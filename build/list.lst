ARM GAS  /tmp/ccQLu7ZL.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"list.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.vListInitialise,"ax",%progbits
  16              		.align	1
  17              		.global	vListInitialise
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	vListInitialise:
  24              	.LFB5:
  25              		.file 1 "FreeRTOS/list.c"
   1:FreeRTOS/list.c **** /*
   2:FreeRTOS/list.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/list.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/list.c ****  *
   5:FreeRTOS/list.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/list.c ****  *
   7:FreeRTOS/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/list.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/list.c ****  * subject to the following conditions:
  13:FreeRTOS/list.c ****  *
  14:FreeRTOS/list.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/list.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/list.c ****  *
  17:FreeRTOS/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/list.c ****  *
  24:FreeRTOS/list.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/list.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/list.c ****  *
  27:FreeRTOS/list.c ****  */
  28:FreeRTOS/list.c **** 
  29:FreeRTOS/list.c **** 
  30:FreeRTOS/list.c **** #include <stdlib.h>
  31:FreeRTOS/list.c **** 
  32:FreeRTOS/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccQLu7ZL.s 			page 2


  34:FreeRTOS/list.c ****  * task.h is included from an application file. */
  35:FreeRTOS/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/list.c **** 
  37:FreeRTOS/list.c **** #include "FreeRTOS.h"
  38:FreeRTOS/list.c **** #include "list.h"
  39:FreeRTOS/list.c **** 
  40:FreeRTOS/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  41:FreeRTOS/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  42:FreeRTOS/list.c ****  * defined for the header files above, but not in this file, in order to
  43:FreeRTOS/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  44:FreeRTOS/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  45:FreeRTOS/list.c **** 
  46:FreeRTOS/list.c **** /*-----------------------------------------------------------
  47:FreeRTOS/list.c **** * PUBLIC LIST API documented in list.h
  48:FreeRTOS/list.c **** *----------------------------------------------------------*/
  49:FreeRTOS/list.c **** 
  50:FreeRTOS/list.c **** void vListInitialise( List_t * const pxList )
  51:FreeRTOS/list.c **** {
  26              		.loc 1 51 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  52:FreeRTOS/list.c ****     /* The list structure contains a list item which is used to mark the
  53:FreeRTOS/list.c ****      * end of the list.  To initialise the list the list end is inserted
  54:FreeRTOS/list.c ****      * as the only list entry. */
  55:FreeRTOS/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  32              		.loc 1 55 0
  33 0000 00F10803 		add	r3, r0, #8
  34 0004 4360     		str	r3, [r0, #4]
  56:FreeRTOS/list.c **** 
  57:FreeRTOS/list.c ****     /* The list end value is the highest possible value in the list to
  58:FreeRTOS/list.c ****      * ensure it remains at the end of the list. */
  59:FreeRTOS/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  35              		.loc 1 59 0
  36 0006 4FF0FF32 		mov	r2, #-1
  37 000a 8260     		str	r2, [r0, #8]
  60:FreeRTOS/list.c **** 
  61:FreeRTOS/list.c ****     /* The list end next and previous pointers point to itself so we know
  62:FreeRTOS/list.c ****      * when the list is empty. */
  63:FreeRTOS/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  38              		.loc 1 63 0
  39 000c C360     		str	r3, [r0, #12]
  64:FreeRTOS/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  40              		.loc 1 64 0
  41 000e 0361     		str	r3, [r0, #16]
  65:FreeRTOS/list.c **** 
  66:FreeRTOS/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  42              		.loc 1 66 0
  43 0010 0023     		movs	r3, #0
  44 0012 0360     		str	r3, [r0]
  67:FreeRTOS/list.c **** 
  68:FreeRTOS/list.c ****     /* Write known values into the list if
  69:FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  70:FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  71:FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
ARM GAS  /tmp/ccQLu7ZL.s 			page 3


  72:FreeRTOS/list.c **** }
  45              		.loc 1 72 0
  46 0014 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE5:
  50              		.section	.text.vListInitialiseItem,"ax",%progbits
  51              		.align	1
  52              		.global	vListInitialiseItem
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu softvfp
  58              	vListInitialiseItem:
  59              	.LFB6:
  73:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  74:FreeRTOS/list.c **** 
  75:FreeRTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  76:FreeRTOS/list.c **** {
  60              		.loc 1 76 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              	.LVL1:
  77:FreeRTOS/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  78:FreeRTOS/list.c ****     pxItem->pxContainer = NULL;
  66              		.loc 1 78 0
  67 0000 0023     		movs	r3, #0
  68 0002 0361     		str	r3, [r0, #16]
  79:FreeRTOS/list.c **** 
  80:FreeRTOS/list.c ****     /* Write known values into the list item if
  81:FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  82:FreeRTOS/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  83:FreeRTOS/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  84:FreeRTOS/list.c **** }
  69              		.loc 1 84 0
  70 0004 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE6:
  74              		.section	.text.vListInsertEnd,"ax",%progbits
  75              		.align	1
  76              		.global	vListInsertEnd
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	vListInsertEnd:
  83              	.LFB7:
  85:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  86:FreeRTOS/list.c **** 
  87:FreeRTOS/list.c **** void vListInsertEnd( List_t * const pxList,
  88:FreeRTOS/list.c ****                      ListItem_t * const pxNewListItem )
  89:FreeRTOS/list.c **** {
  84              		.loc 1 89 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQLu7ZL.s 			page 4


  88              		@ link register save eliminated.
  89              	.LVL2:
  90:FreeRTOS/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
  90              		.loc 1 90 0
  91 0000 4368     		ldr	r3, [r0, #4]
  92              	.LVL3:
  91:FreeRTOS/list.c **** 
  92:FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
  93:FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
  94:FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  95:FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
  96:FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  97:FreeRTOS/list.c **** 
  98:FreeRTOS/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
  99:FreeRTOS/list.c ****      * makes the new list item the last item to be removed by a call to
 100:FreeRTOS/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
 101:FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIndex;
  93              		.loc 1 101 0
  94 0002 4B60     		str	r3, [r1, #4]
 102:FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  95              		.loc 1 102 0
  96 0004 9A68     		ldr	r2, [r3, #8]
  97 0006 8A60     		str	r2, [r1, #8]
 103:FreeRTOS/list.c **** 
 104:FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 105:FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 106:FreeRTOS/list.c **** 
 107:FreeRTOS/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
  98              		.loc 1 107 0
  99 0008 9A68     		ldr	r2, [r3, #8]
 100 000a 5160     		str	r1, [r2, #4]
 108:FreeRTOS/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 101              		.loc 1 108 0
 102 000c 9960     		str	r1, [r3, #8]
 109:FreeRTOS/list.c **** 
 110:FreeRTOS/list.c ****     /* Remember which list the item is in. */
 111:FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 103              		.loc 1 111 0
 104 000e 0861     		str	r0, [r1, #16]
 112:FreeRTOS/list.c **** 
 113:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 105              		.loc 1 113 0
 106 0010 0368     		ldr	r3, [r0]
 107              	.LVL4:
 108 0012 0133     		adds	r3, r3, #1
 109 0014 0360     		str	r3, [r0]
 114:FreeRTOS/list.c **** }
 110              		.loc 1 114 0
 111 0016 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE7:
 115              		.section	.text.vListInsert,"ax",%progbits
 116              		.align	1
 117              		.global	vListInsert
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
ARM GAS  /tmp/ccQLu7ZL.s 			page 5


 121              		.fpu softvfp
 123              	vListInsert:
 124              	.LFB8:
 115:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 116:FreeRTOS/list.c **** 
 117:FreeRTOS/list.c **** void vListInsert( List_t * const pxList,
 118:FreeRTOS/list.c ****                   ListItem_t * const pxNewListItem )
 119:FreeRTOS/list.c **** {
 125              		.loc 1 119 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.LVL5:
 131 0000 30B4     		push	{r4, r5}
 132              	.LCFI0:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 5, -4
 120:FreeRTOS/list.c ****     ListItem_t * pxIterator;
 121:FreeRTOS/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 136              		.loc 1 121 0
 137 0002 0D68     		ldr	r5, [r1]
 138              	.LVL6:
 122:FreeRTOS/list.c **** 
 123:FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 124:FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 125:FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 126:FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 127:FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 128:FreeRTOS/list.c **** 
 129:FreeRTOS/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 130:FreeRTOS/list.c ****      *
 131:FreeRTOS/list.c ****      * If the list already contains a list item with the same item value then the
 132:FreeRTOS/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 133:FreeRTOS/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 134:FreeRTOS/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 135:FreeRTOS/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 136:FreeRTOS/list.c ****      * first, and the algorithm slightly modified if necessary. */
 137:FreeRTOS/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 139              		.loc 1 137 0
 140 0004 B5F1FF3F 		cmp	r5, #-1
 141 0008 02D0     		beq	.L10
 138:FreeRTOS/list.c ****     {
 139:FreeRTOS/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 140:FreeRTOS/list.c ****     }
 141:FreeRTOS/list.c ****     else
 142:FreeRTOS/list.c ****     {
 143:FreeRTOS/list.c ****         /* *** NOTE ***********************************************************
 144:FreeRTOS/list.c ****         *  If you find your application is crashing here then likely causes are
 145:FreeRTOS/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 146:FreeRTOS/list.c ****         *  more tips, and ensure configASSERT() is defined!
 147:FreeRTOS/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 148:FreeRTOS/list.c ****         *
 149:FreeRTOS/list.c ****         *   1) Stack overflow -
 150:FreeRTOS/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 151:FreeRTOS/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
ARM GAS  /tmp/ccQLu7ZL.s 			page 6


 152:FreeRTOS/list.c ****         *      parts where numerically high priority values denote low actual
 153:FreeRTOS/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 154:FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 155:FreeRTOS/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 156:FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 157:FreeRTOS/list.c ****         *   3) Calling an API function from within a critical section or when
 158:FreeRTOS/list.c ****         *      the scheduler is suspended, or calling an API function that does
 159:FreeRTOS/list.c ****         *      not end in "FromISR" from an interrupt.
 160:FreeRTOS/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
 161:FreeRTOS/list.c ****         *      before the scheduler has been started (are interrupts firing
 162:FreeRTOS/list.c ****         *      before vTaskStartScheduler() has been called?).
 163:FreeRTOS/list.c ****         *   5) If the FreeRTOS port supports interrupt nesting then ensure that
 164:FreeRTOS/list.c ****         *      the priority of the tick interrupt is at or below
 165:FreeRTOS/list.c ****         *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
 166:FreeRTOS/list.c ****         **********************************************************************/
 167:FreeRTOS/list.c **** 
 168:FreeRTOS/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 142              		.loc 1 168 0
 143 000a 00F10802 		add	r2, r0, #8
 144              	.LVL7:
 145 000e 02E0     		b	.L7
 146              	.LVL8:
 147              	.L10:
 139:FreeRTOS/list.c ****     }
 148              		.loc 1 139 0
 149 0010 0269     		ldr	r2, [r0, #16]
 150              	.LVL9:
 151 0012 04E0     		b	.L6
 152              	.L8:
 153              		.loc 1 168 0
 154 0014 1A46     		mov	r2, r3
 155              	.LVL10:
 156              	.L7:
 157              		.loc 1 168 0 is_stmt 0 discriminator 1
 158 0016 5368     		ldr	r3, [r2, #4]
 159 0018 1C68     		ldr	r4, [r3]
 160 001a AC42     		cmp	r4, r5
 161 001c FAD9     		bls	.L8
 162              	.L6:
 169:FreeRTOS/list.c ****         {
 170:FreeRTOS/list.c ****             /* There is nothing to do here, just iterating to the wanted
 171:FreeRTOS/list.c ****              * insertion position. */
 172:FreeRTOS/list.c ****         }
 173:FreeRTOS/list.c ****     }
 174:FreeRTOS/list.c **** 
 175:FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 163              		.loc 1 175 0 is_stmt 1
 164 001e 5368     		ldr	r3, [r2, #4]
 165 0020 4B60     		str	r3, [r1, #4]
 176:FreeRTOS/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 166              		.loc 1 176 0
 167 0022 9960     		str	r1, [r3, #8]
 177:FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 168              		.loc 1 177 0
 169 0024 8A60     		str	r2, [r1, #8]
 178:FreeRTOS/list.c ****     pxIterator->pxNext = pxNewListItem;
 170              		.loc 1 178 0
ARM GAS  /tmp/ccQLu7ZL.s 			page 7


 171 0026 5160     		str	r1, [r2, #4]
 179:FreeRTOS/list.c **** 
 180:FreeRTOS/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 181:FreeRTOS/list.c ****      * item later. */
 182:FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 172              		.loc 1 182 0
 173 0028 0861     		str	r0, [r1, #16]
 183:FreeRTOS/list.c **** 
 184:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 174              		.loc 1 184 0
 175 002a 0368     		ldr	r3, [r0]
 176 002c 0133     		adds	r3, r3, #1
 177 002e 0360     		str	r3, [r0]
 185:FreeRTOS/list.c **** }
 178              		.loc 1 185 0
 179 0030 30BC     		pop	{r4, r5}
 180              	.LCFI1:
 181              		.cfi_restore 5
 182              		.cfi_restore 4
 183              		.cfi_def_cfa_offset 0
 184              	.LVL11:
 185 0032 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE8:
 189              		.section	.text.uxListRemove,"ax",%progbits
 190              		.align	1
 191              		.global	uxListRemove
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 197              	uxListRemove:
 198              	.LFB9:
 186:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 187:FreeRTOS/list.c **** 
 188:FreeRTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 189:FreeRTOS/list.c **** {
 199              		.loc 1 189 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204              	.LVL12:
 190:FreeRTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 191:FreeRTOS/list.c ****  * item. */
 192:FreeRTOS/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 205              		.loc 1 192 0
 206 0000 0369     		ldr	r3, [r0, #16]
 207              	.LVL13:
 193:FreeRTOS/list.c **** 
 194:FreeRTOS/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 208              		.loc 1 194 0
 209 0002 4268     		ldr	r2, [r0, #4]
 210 0004 8168     		ldr	r1, [r0, #8]
 211 0006 9160     		str	r1, [r2, #8]
 195:FreeRTOS/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 212              		.loc 1 195 0
ARM GAS  /tmp/ccQLu7ZL.s 			page 8


 213 0008 8268     		ldr	r2, [r0, #8]
 214 000a 4168     		ldr	r1, [r0, #4]
 215 000c 5160     		str	r1, [r2, #4]
 196:FreeRTOS/list.c **** 
 197:FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 198:FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 199:FreeRTOS/list.c **** 
 200:FreeRTOS/list.c ****     /* Make sure the index is left pointing to a valid item. */
 201:FreeRTOS/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 216              		.loc 1 201 0
 217 000e 5A68     		ldr	r2, [r3, #4]
 218 0010 8242     		cmp	r2, r0
 219 0012 06D0     		beq	.L13
 220              	.L12:
 202:FreeRTOS/list.c ****     {
 203:FreeRTOS/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 204:FreeRTOS/list.c ****     }
 205:FreeRTOS/list.c ****     else
 206:FreeRTOS/list.c ****     {
 207:FreeRTOS/list.c ****         mtCOVERAGE_TEST_MARKER();
 208:FreeRTOS/list.c ****     }
 209:FreeRTOS/list.c **** 
 210:FreeRTOS/list.c ****     pxItemToRemove->pxContainer = NULL;
 221              		.loc 1 210 0
 222 0014 0022     		movs	r2, #0
 223 0016 0261     		str	r2, [r0, #16]
 211:FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )--;
 224              		.loc 1 211 0
 225 0018 1A68     		ldr	r2, [r3]
 226 001a 013A     		subs	r2, r2, #1
 227 001c 1A60     		str	r2, [r3]
 212:FreeRTOS/list.c **** 
 213:FreeRTOS/list.c ****     return pxList->uxNumberOfItems;
 228              		.loc 1 213 0
 229 001e 1868     		ldr	r0, [r3]
 230              	.LVL14:
 214:FreeRTOS/list.c **** }
 231              		.loc 1 214 0
 232 0020 7047     		bx	lr
 233              	.LVL15:
 234              	.L13:
 203:FreeRTOS/list.c ****     }
 235              		.loc 1 203 0
 236 0022 8268     		ldr	r2, [r0, #8]
 237 0024 5A60     		str	r2, [r3, #4]
 238 0026 F5E7     		b	.L12
 239              		.cfi_endproc
 240              	.LFE9:
 242              		.text
 243              	.Letext0:
 244              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 245              		.file 3 "/usr/include/newlib/sys/lock.h"
 246              		.file 4 "/usr/include/newlib/sys/_types.h"
 247              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 248              		.file 6 "/usr/include/newlib/sys/reent.h"
 249              		.file 7 "/usr/include/newlib/stdlib.h"
 250              		.file 8 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/ccQLu7ZL.s 			page 9


 251              		.file 9 "FreeRTOS/ARM_CM3/FreeRTOSConfig.h"
 252              		.file 10 "FreeRTOS/ARM_CM3/portmacro.h"
 253              		.file 11 "FreeRTOS/include/list.h"
ARM GAS  /tmp/ccQLu7ZL.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccQLu7ZL.s:16     .text.vListInitialise:0000000000000000 $t
     /tmp/ccQLu7ZL.s:23     .text.vListInitialise:0000000000000000 vListInitialise
     /tmp/ccQLu7ZL.s:51     .text.vListInitialiseItem:0000000000000000 $t
     /tmp/ccQLu7ZL.s:58     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
     /tmp/ccQLu7ZL.s:75     .text.vListInsertEnd:0000000000000000 $t
     /tmp/ccQLu7ZL.s:82     .text.vListInsertEnd:0000000000000000 vListInsertEnd
     /tmp/ccQLu7ZL.s:116    .text.vListInsert:0000000000000000 $t
     /tmp/ccQLu7ZL.s:123    .text.vListInsert:0000000000000000 vListInsert
     /tmp/ccQLu7ZL.s:190    .text.uxListRemove:0000000000000000 $t
     /tmp/ccQLu7ZL.s:197    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
