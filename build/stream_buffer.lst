ARM GAS  /tmp/ccYBDQMR.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stream_buffer.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvBytesInBuffer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvBytesInBuffer:
  23              	.LFB24:
  24              		.file 1 "FreeRTOS/stream_buffer.c"
   1:FreeRTOS/stream_buffer.c **** /*
   2:FreeRTOS/stream_buffer.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/stream_buffer.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/stream_buffer.c ****  *
   5:FreeRTOS/stream_buffer.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/stream_buffer.c ****  *
   7:FreeRTOS/stream_buffer.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/stream_buffer.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/stream_buffer.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/stream_buffer.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/stream_buffer.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/stream_buffer.c ****  * subject to the following conditions:
  13:FreeRTOS/stream_buffer.c ****  *
  14:FreeRTOS/stream_buffer.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/stream_buffer.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/stream_buffer.c ****  *
  17:FreeRTOS/stream_buffer.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/stream_buffer.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/stream_buffer.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/stream_buffer.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/stream_buffer.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/stream_buffer.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/stream_buffer.c ****  *
  24:FreeRTOS/stream_buffer.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/stream_buffer.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/stream_buffer.c ****  *
  27:FreeRTOS/stream_buffer.c ****  */
  28:FreeRTOS/stream_buffer.c **** 
  29:FreeRTOS/stream_buffer.c **** /* Standard includes. */
  30:FreeRTOS/stream_buffer.c **** #include <stdint.h>
  31:FreeRTOS/stream_buffer.c **** #include <string.h>
  32:FreeRTOS/stream_buffer.c **** 
  33:FreeRTOS/stream_buffer.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:FreeRTOS/stream_buffer.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccYBDQMR.s 			page 2


  35:FreeRTOS/stream_buffer.c ****  * task.h is included from an application file. */
  36:FreeRTOS/stream_buffer.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:FreeRTOS/stream_buffer.c **** 
  38:FreeRTOS/stream_buffer.c **** /* FreeRTOS includes. */
  39:FreeRTOS/stream_buffer.c **** #include "FreeRTOS.h"
  40:FreeRTOS/stream_buffer.c **** #include "task.h"
  41:FreeRTOS/stream_buffer.c **** #include "stream_buffer.h"
  42:FreeRTOS/stream_buffer.c **** 
  43:FreeRTOS/stream_buffer.c **** #if ( configUSE_TASK_NOTIFICATIONS != 1 )
  44:FreeRTOS/stream_buffer.c ****     #error configUSE_TASK_NOTIFICATIONS must be set to 1 to build stream_buffer.c
  45:FreeRTOS/stream_buffer.c **** #endif
  46:FreeRTOS/stream_buffer.c **** 
  47:FreeRTOS/stream_buffer.c **** /* Lint e961, e9021 and e750 are suppressed as a MISRA exception justified
  48:FreeRTOS/stream_buffer.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  49:FreeRTOS/stream_buffer.c ****  * for the header files above, but not in this file, in order to generate the
  50:FreeRTOS/stream_buffer.c ****  * correct privileged Vs unprivileged linkage and placement. */
  51:FreeRTOS/stream_buffer.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  52:FreeRTOS/stream_buffer.c **** 
  53:FreeRTOS/stream_buffer.c **** /* If the user has not provided application specific Rx notification macros,
  54:FreeRTOS/stream_buffer.c ****  * or #defined the notification macros away, then provide default implementations
  55:FreeRTOS/stream_buffer.c ****  * that uses task notifications. */
  56:FreeRTOS/stream_buffer.c **** /*lint -save -e9026 Function like macros allowed and needed here so they can be overridden. */
  57:FreeRTOS/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED
  58:FreeRTOS/stream_buffer.c ****     #define sbRECEIVE_COMPLETED( pxStreamBuffer )                         \
  59:FreeRTOS/stream_buffer.c ****     vTaskSuspendAll();                                                    \
  60:FreeRTOS/stream_buffer.c ****     {                                                                     \
  61:FreeRTOS/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )              \
  62:FreeRTOS/stream_buffer.c ****         {                                                                 \
  63:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToSend, \
  64:FreeRTOS/stream_buffer.c ****                                   ( uint32_t ) 0,                         \
  65:FreeRTOS/stream_buffer.c ****                                   eNoAction );                            \
  66:FreeRTOS/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;                \
  67:FreeRTOS/stream_buffer.c ****         }                                                                 \
  68:FreeRTOS/stream_buffer.c ****     }                                                                     \
  69:FreeRTOS/stream_buffer.c ****     ( void ) xTaskResumeAll();
  70:FreeRTOS/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED */
  71:FreeRTOS/stream_buffer.c **** 
  72:FreeRTOS/stream_buffer.c **** #ifndef sbRECEIVE_COMPLETED_FROM_ISR
  73:FreeRTOS/stream_buffer.c ****     #define sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer,                            \
  74:FreeRTOS/stream_buffer.c ****                                           pxHigherPriorityTaskWoken )                \
  75:FreeRTOS/stream_buffer.c ****     {                                                                                \
  76:FreeRTOS/stream_buffer.c ****         UBaseType_t uxSavedInterruptStatus;                                          \
  77:FreeRTOS/stream_buffer.c ****                                                                                      \
  78:FreeRTOS/stream_buffer.c ****         uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();  \
  79:FreeRTOS/stream_buffer.c ****         {                                                                            \
  80:FreeRTOS/stream_buffer.c ****             if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )                     \
  81:FreeRTOS/stream_buffer.c ****             {                                                                        \
  82:FreeRTOS/stream_buffer.c ****                 ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend, \
  83:FreeRTOS/stream_buffer.c ****                                              ( uint32_t ) 0,                         \
  84:FreeRTOS/stream_buffer.c ****                                              eNoAction,                              \
  85:FreeRTOS/stream_buffer.c ****                                              pxHigherPriorityTaskWoken );            \
  86:FreeRTOS/stream_buffer.c ****                 ( pxStreamBuffer )->xTaskWaitingToSend = NULL;                       \
  87:FreeRTOS/stream_buffer.c ****             }                                                                        \
  88:FreeRTOS/stream_buffer.c ****         }                                                                            \
  89:FreeRTOS/stream_buffer.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );                 \
  90:FreeRTOS/stream_buffer.c ****     }
  91:FreeRTOS/stream_buffer.c **** #endif /* sbRECEIVE_COMPLETED_FROM_ISR */
ARM GAS  /tmp/ccYBDQMR.s 			page 3


  92:FreeRTOS/stream_buffer.c **** 
  93:FreeRTOS/stream_buffer.c **** /* If the user has not provided an application specific Tx notification macro,
  94:FreeRTOS/stream_buffer.c ****  * or #defined the notification macro away, them provide a default implementation
  95:FreeRTOS/stream_buffer.c ****  * that uses task notifications. */
  96:FreeRTOS/stream_buffer.c **** #ifndef sbSEND_COMPLETED
  97:FreeRTOS/stream_buffer.c ****     #define sbSEND_COMPLETED( pxStreamBuffer )                               \
  98:FreeRTOS/stream_buffer.c ****     vTaskSuspendAll();                                                       \
  99:FreeRTOS/stream_buffer.c ****     {                                                                        \
 100:FreeRTOS/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )              \
 101:FreeRTOS/stream_buffer.c ****         {                                                                    \
 102:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotify( ( pxStreamBuffer )->xTaskWaitingToReceive, \
 103:FreeRTOS/stream_buffer.c ****                                   ( uint32_t ) 0,                            \
 104:FreeRTOS/stream_buffer.c ****                                   eNoAction );                               \
 105:FreeRTOS/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;                \
 106:FreeRTOS/stream_buffer.c ****         }                                                                    \
 107:FreeRTOS/stream_buffer.c ****     }                                                                        \
 108:FreeRTOS/stream_buffer.c ****     ( void ) xTaskResumeAll();
 109:FreeRTOS/stream_buffer.c **** #endif /* sbSEND_COMPLETED */
 110:FreeRTOS/stream_buffer.c **** 
 111:FreeRTOS/stream_buffer.c **** #ifndef sbSEND_COMPLETE_FROM_ISR
 112:FreeRTOS/stream_buffer.c ****     #define sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken )       \
 113:FreeRTOS/stream_buffer.c ****     {                                                                                   \
 114:FreeRTOS/stream_buffer.c ****         UBaseType_t uxSavedInterruptStatus;                                             \
 115:FreeRTOS/stream_buffer.c ****                                                                                         \
 116:FreeRTOS/stream_buffer.c ****         uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();     \
 117:FreeRTOS/stream_buffer.c ****         {                                                                               \
 118:FreeRTOS/stream_buffer.c ****             if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )                     \
 119:FreeRTOS/stream_buffer.c ****             {                                                                           \
 120:FreeRTOS/stream_buffer.c ****                 ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive, \
 121:FreeRTOS/stream_buffer.c ****                                              ( uint32_t ) 0,                            \
 122:FreeRTOS/stream_buffer.c ****                                              eNoAction,                                 \
 123:FreeRTOS/stream_buffer.c ****                                              pxHigherPriorityTaskWoken );               \
 124:FreeRTOS/stream_buffer.c ****                 ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;                       \
 125:FreeRTOS/stream_buffer.c ****             }                                                                           \
 126:FreeRTOS/stream_buffer.c ****         }                                                                               \
 127:FreeRTOS/stream_buffer.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );                    \
 128:FreeRTOS/stream_buffer.c ****     }
 129:FreeRTOS/stream_buffer.c **** #endif /* sbSEND_COMPLETE_FROM_ISR */
 130:FreeRTOS/stream_buffer.c **** /*lint -restore (9026) */
 131:FreeRTOS/stream_buffer.c **** 
 132:FreeRTOS/stream_buffer.c **** /* The number of bytes used to hold the length of a message in the buffer. */
 133:FreeRTOS/stream_buffer.c **** #define sbBYTES_TO_STORE_MESSAGE_LENGTH    ( sizeof( configMESSAGE_BUFFER_LENGTH_TYPE ) )
 134:FreeRTOS/stream_buffer.c **** 
 135:FreeRTOS/stream_buffer.c **** /* Bits stored in the ucFlags field of the stream buffer. */
 136:FreeRTOS/stream_buffer.c **** #define sbFLAGS_IS_MESSAGE_BUFFER          ( ( uint8_t ) 1 ) /* Set if the stream buffer was create
 137:FreeRTOS/stream_buffer.c **** #define sbFLAGS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 2 ) /* Set if the stream buffer was create
 138:FreeRTOS/stream_buffer.c **** 
 139:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 140:FreeRTOS/stream_buffer.c **** 
 141:FreeRTOS/stream_buffer.c **** /* Structure that hold state information on the buffer. */
 142:FreeRTOS/stream_buffer.c **** typedef struct StreamBufferDef_t                 /*lint !e9058 Style convention uses tag. */
 143:FreeRTOS/stream_buffer.c **** {
 144:FreeRTOS/stream_buffer.c ****     volatile size_t xTail;                       /* Index to the next item to read within the buffe
 145:FreeRTOS/stream_buffer.c ****     volatile size_t xHead;                       /* Index to the next item to write within the buff
 146:FreeRTOS/stream_buffer.c ****     size_t xLength;                              /* The length of the buffer pointed to by pucBuffe
 147:FreeRTOS/stream_buffer.c ****     size_t xTriggerLevelBytes;                   /* The number of bytes that must be in the stream 
 148:FreeRTOS/stream_buffer.c ****     volatile TaskHandle_t xTaskWaitingToReceive; /* Holds the handle of a task waiting for data, or
ARM GAS  /tmp/ccYBDQMR.s 			page 4


 149:FreeRTOS/stream_buffer.c ****     volatile TaskHandle_t xTaskWaitingToSend;    /* Holds the handle of a task waiting to send data
 150:FreeRTOS/stream_buffer.c ****     uint8_t * pucBuffer;                         /* Points to the buffer itself - that is - the RAM
 151:FreeRTOS/stream_buffer.c ****     uint8_t ucFlags;
 152:FreeRTOS/stream_buffer.c **** 
 153:FreeRTOS/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 154:FreeRTOS/stream_buffer.c ****         UBaseType_t uxStreamBufferNumber; /* Used for tracing purposes. */
 155:FreeRTOS/stream_buffer.c ****     #endif
 156:FreeRTOS/stream_buffer.c **** } StreamBuffer_t;
 157:FreeRTOS/stream_buffer.c **** 
 158:FreeRTOS/stream_buffer.c **** /*
 159:FreeRTOS/stream_buffer.c ****  * The number of bytes available to be read from the buffer.
 160:FreeRTOS/stream_buffer.c ****  */
 161:FreeRTOS/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer ) PRIVILEGED_FUNCTION;
 162:FreeRTOS/stream_buffer.c **** 
 163:FreeRTOS/stream_buffer.c **** /*
 164:FreeRTOS/stream_buffer.c ****  * Add xCount bytes from pucData into the pxStreamBuffer's data storage area.
 165:FreeRTOS/stream_buffer.c ****  * This function does not update the buffer's xHead pointer, so multiple writes
 166:FreeRTOS/stream_buffer.c ****  * may be chained together "atomically". This is useful for Message Buffers where
 167:FreeRTOS/stream_buffer.c ****  * the length and data bytes are written in two separate chunks, and we don't want
 168:FreeRTOS/stream_buffer.c ****  * the reader to see the buffer as having grown until after all data is copied over.
 169:FreeRTOS/stream_buffer.c ****  * This function takes a custom xHead value to indicate where to write to (necessary
 170:FreeRTOS/stream_buffer.c ****  * for chaining) and returns the the resulting xHead position.
 171:FreeRTOS/stream_buffer.c ****  * To mark the write as complete, manually set the buffer's xHead field with the
 172:FreeRTOS/stream_buffer.c ****  * returned xHead from this function.
 173:FreeRTOS/stream_buffer.c ****  */
 174:FreeRTOS/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
 175:FreeRTOS/stream_buffer.c ****                                      const uint8_t * pucData,
 176:FreeRTOS/stream_buffer.c ****                                      size_t xCount,
 177:FreeRTOS/stream_buffer.c ****                                      size_t xHead ) PRIVILEGED_FUNCTION;
 178:FreeRTOS/stream_buffer.c **** 
 179:FreeRTOS/stream_buffer.c **** /*
 180:FreeRTOS/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then reads an entire
 181:FreeRTOS/stream_buffer.c ****  * message out of the buffer.  If the stream buffer is being used as a stream
 182:FreeRTOS/stream_buffer.c ****  * buffer then read as many bytes as possible from the buffer.
 183:FreeRTOS/stream_buffer.c ****  * prvReadBytesFromBuffer() is called to actually extract the bytes from the
 184:FreeRTOS/stream_buffer.c ****  * buffer's data storage area.
 185:FreeRTOS/stream_buffer.c ****  */
 186:FreeRTOS/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
 187:FreeRTOS/stream_buffer.c ****                                         void * pvRxData,
 188:FreeRTOS/stream_buffer.c ****                                         size_t xBufferLengthBytes,
 189:FreeRTOS/stream_buffer.c ****                                         size_t xBytesAvailable ) PRIVILEGED_FUNCTION;
 190:FreeRTOS/stream_buffer.c **** 
 191:FreeRTOS/stream_buffer.c **** /*
 192:FreeRTOS/stream_buffer.c ****  * If the stream buffer is being used as a message buffer, then writes an entire
 193:FreeRTOS/stream_buffer.c ****  * message to the buffer.  If the stream buffer is being used as a stream
 194:FreeRTOS/stream_buffer.c ****  * buffer then write as many bytes as possible to the buffer.
 195:FreeRTOS/stream_buffer.c ****  * prvWriteBytestoBuffer() is called to actually send the bytes to the buffer's
 196:FreeRTOS/stream_buffer.c ****  * data storage area.
 197:FreeRTOS/stream_buffer.c ****  */
 198:FreeRTOS/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 199:FreeRTOS/stream_buffer.c ****                                        const void * pvTxData,
 200:FreeRTOS/stream_buffer.c ****                                        size_t xDataLengthBytes,
 201:FreeRTOS/stream_buffer.c ****                                        size_t xSpace,
 202:FreeRTOS/stream_buffer.c ****                                        size_t xRequiredSpace ) PRIVILEGED_FUNCTION;
 203:FreeRTOS/stream_buffer.c **** 
 204:FreeRTOS/stream_buffer.c **** /*
 205:FreeRTOS/stream_buffer.c ****  * Copies xCount bytes from the pxStreamBuffer's data storage area to pucData.
ARM GAS  /tmp/ccYBDQMR.s 			page 5


 206:FreeRTOS/stream_buffer.c ****  * This function does not update the buffer's xTail pointer, so multiple reads
 207:FreeRTOS/stream_buffer.c ****  * may be chained together "atomically". This is useful for Message Buffers where
 208:FreeRTOS/stream_buffer.c ****  * the length and data bytes are read in two separate chunks, and we don't want
 209:FreeRTOS/stream_buffer.c ****  * the writer to see the buffer as having more free space until after all data is
 210:FreeRTOS/stream_buffer.c ****  * copied over, especially if we have to abort the read due to insufficient receiving space.
 211:FreeRTOS/stream_buffer.c ****  * This function takes a custom xTail value to indicate where to read from (necessary
 212:FreeRTOS/stream_buffer.c ****  * for chaining) and returns the the resulting xTail position.
 213:FreeRTOS/stream_buffer.c ****  * To mark the read as complete, manually set the buffer's xTail field with the
 214:FreeRTOS/stream_buffer.c ****  * returned xTail from this function.
 215:FreeRTOS/stream_buffer.c ****  */
 216:FreeRTOS/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
 217:FreeRTOS/stream_buffer.c ****                                       uint8_t * pucData,
 218:FreeRTOS/stream_buffer.c ****                                       size_t xCount,
 219:FreeRTOS/stream_buffer.c ****                                       size_t xTail ) PRIVILEGED_FUNCTION;
 220:FreeRTOS/stream_buffer.c **** 
 221:FreeRTOS/stream_buffer.c **** /*
 222:FreeRTOS/stream_buffer.c ****  * Called by both pxStreamBufferCreate() and pxStreamBufferCreateStatic() to
 223:FreeRTOS/stream_buffer.c ****  * initialise the members of the newly created stream buffer structure.
 224:FreeRTOS/stream_buffer.c ****  */
 225:FreeRTOS/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
 226:FreeRTOS/stream_buffer.c ****                                           uint8_t * const pucBuffer,
 227:FreeRTOS/stream_buffer.c ****                                           size_t xBufferSizeBytes,
 228:FreeRTOS/stream_buffer.c ****                                           size_t xTriggerLevelBytes,
 229:FreeRTOS/stream_buffer.c ****                                           uint8_t ucFlags ) PRIVILEGED_FUNCTION;
 230:FreeRTOS/stream_buffer.c **** 
 231:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 232:FreeRTOS/stream_buffer.c **** 
 233:FreeRTOS/stream_buffer.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 234:FreeRTOS/stream_buffer.c **** 
 235:FreeRTOS/stream_buffer.c ****     StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
 236:FreeRTOS/stream_buffer.c ****                                                      size_t xTriggerLevelBytes,
 237:FreeRTOS/stream_buffer.c ****                                                      BaseType_t xIsMessageBuffer )
 238:FreeRTOS/stream_buffer.c ****     {
 239:FreeRTOS/stream_buffer.c ****         uint8_t * pucAllocatedMemory;
 240:FreeRTOS/stream_buffer.c ****         uint8_t ucFlags;
 241:FreeRTOS/stream_buffer.c **** 
 242:FreeRTOS/stream_buffer.c ****         /* In case the stream buffer is going to be used as a message buffer
 243:FreeRTOS/stream_buffer.c ****          * (that is, it will hold discrete messages with a little meta data that
 244:FreeRTOS/stream_buffer.c ****          * says how big the next message is) check the buffer will be large enough
 245:FreeRTOS/stream_buffer.c ****          * to hold at least one message. */
 246:FreeRTOS/stream_buffer.c ****         if( xIsMessageBuffer == pdTRUE )
 247:FreeRTOS/stream_buffer.c ****         {
 248:FreeRTOS/stream_buffer.c ****             /* Is a message buffer but not statically allocated. */
 249:FreeRTOS/stream_buffer.c ****             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 250:FreeRTOS/stream_buffer.c ****             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 251:FreeRTOS/stream_buffer.c ****         }
 252:FreeRTOS/stream_buffer.c ****         else
 253:FreeRTOS/stream_buffer.c ****         {
 254:FreeRTOS/stream_buffer.c ****             /* Not a message buffer and not statically allocated. */
 255:FreeRTOS/stream_buffer.c ****             ucFlags = 0;
 256:FreeRTOS/stream_buffer.c ****             configASSERT( xBufferSizeBytes > 0 );
 257:FreeRTOS/stream_buffer.c ****         }
 258:FreeRTOS/stream_buffer.c **** 
 259:FreeRTOS/stream_buffer.c ****         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 260:FreeRTOS/stream_buffer.c **** 
 261:FreeRTOS/stream_buffer.c ****         /* A trigger level of 0 would cause a waiting task to unblock even when
 262:FreeRTOS/stream_buffer.c ****          * the buffer was empty. */
ARM GAS  /tmp/ccYBDQMR.s 			page 6


 263:FreeRTOS/stream_buffer.c ****         if( xTriggerLevelBytes == ( size_t ) 0 )
 264:FreeRTOS/stream_buffer.c ****         {
 265:FreeRTOS/stream_buffer.c ****             xTriggerLevelBytes = ( size_t ) 1;
 266:FreeRTOS/stream_buffer.c ****         }
 267:FreeRTOS/stream_buffer.c **** 
 268:FreeRTOS/stream_buffer.c ****         /* A stream buffer requires a StreamBuffer_t structure and a buffer.
 269:FreeRTOS/stream_buffer.c ****          * Both are allocated in a single call to pvPortMalloc().  The
 270:FreeRTOS/stream_buffer.c ****          * StreamBuffer_t structure is placed at the start of the allocated memory
 271:FreeRTOS/stream_buffer.c ****          * and the buffer follows immediately after.  The requested size is
 272:FreeRTOS/stream_buffer.c ****          * incremented so the free space is returned as the user would expect -
 273:FreeRTOS/stream_buffer.c ****          * this is a quirk of the implementation that means otherwise the free
 274:FreeRTOS/stream_buffer.c ****          * space would be reported as one byte smaller than would be logically
 275:FreeRTOS/stream_buffer.c ****          * expected. */
 276:FreeRTOS/stream_buffer.c ****         if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 277:FreeRTOS/stream_buffer.c ****         {
 278:FreeRTOS/stream_buffer.c ****             xBufferSizeBytes++;
 279:FreeRTOS/stream_buffer.c ****             pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffe
 280:FreeRTOS/stream_buffer.c ****         }
 281:FreeRTOS/stream_buffer.c ****         else
 282:FreeRTOS/stream_buffer.c ****         {
 283:FreeRTOS/stream_buffer.c ****             pucAllocatedMemory = NULL;
 284:FreeRTOS/stream_buffer.c ****         }
 285:FreeRTOS/stream_buffer.c **** 
 286:FreeRTOS/stream_buffer.c ****         if( pucAllocatedMemory != NULL )
 287:FreeRTOS/stream_buffer.c ****         {
 288:FreeRTOS/stream_buffer.c ****             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structu
 289:FreeRTOS/stream_buffer.c ****                                           pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage
 290:FreeRTOS/stream_buffer.c ****                                           xBufferSizeBytes,
 291:FreeRTOS/stream_buffer.c ****                                           xTriggerLevelBytes,
 292:FreeRTOS/stream_buffer.c ****                                           ucFlags );
 293:FreeRTOS/stream_buffer.c **** 
 294:FreeRTOS/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffe
 295:FreeRTOS/stream_buffer.c ****         }
 296:FreeRTOS/stream_buffer.c ****         else
 297:FreeRTOS/stream_buffer.c ****         {
 298:FreeRTOS/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 299:FreeRTOS/stream_buffer.c ****         }
 300:FreeRTOS/stream_buffer.c **** 
 301:FreeRTOS/stream_buffer.c ****         return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as alloca
 302:FreeRTOS/stream_buffer.c ****     }
 303:FreeRTOS/stream_buffer.c **** 
 304:FreeRTOS/stream_buffer.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 305:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 306:FreeRTOS/stream_buffer.c **** 
 307:FreeRTOS/stream_buffer.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 308:FreeRTOS/stream_buffer.c **** 
 309:FreeRTOS/stream_buffer.c ****     StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
 310:FreeRTOS/stream_buffer.c ****                                                            size_t xTriggerLevelBytes,
 311:FreeRTOS/stream_buffer.c ****                                                            BaseType_t xIsMessageBuffer,
 312:FreeRTOS/stream_buffer.c ****                                                            uint8_t * const pucStreamBufferStorageAr
 313:FreeRTOS/stream_buffer.c ****                                                            StaticStreamBuffer_t * const pxStaticStr
 314:FreeRTOS/stream_buffer.c ****     {
 315:FreeRTOS/stream_buffer.c ****         StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !
 316:FreeRTOS/stream_buffer.c ****         StreamBufferHandle_t xReturn;
 317:FreeRTOS/stream_buffer.c ****         uint8_t ucFlags;
 318:FreeRTOS/stream_buffer.c **** 
 319:FreeRTOS/stream_buffer.c ****         configASSERT( pucStreamBufferStorageArea );
ARM GAS  /tmp/ccYBDQMR.s 			page 7


 320:FreeRTOS/stream_buffer.c ****         configASSERT( pxStaticStreamBuffer );
 321:FreeRTOS/stream_buffer.c ****         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 322:FreeRTOS/stream_buffer.c **** 
 323:FreeRTOS/stream_buffer.c ****         /* A trigger level of 0 would cause a waiting task to unblock even when
 324:FreeRTOS/stream_buffer.c ****          * the buffer was empty. */
 325:FreeRTOS/stream_buffer.c ****         if( xTriggerLevelBytes == ( size_t ) 0 )
 326:FreeRTOS/stream_buffer.c ****         {
 327:FreeRTOS/stream_buffer.c ****             xTriggerLevelBytes = ( size_t ) 1;
 328:FreeRTOS/stream_buffer.c ****         }
 329:FreeRTOS/stream_buffer.c **** 
 330:FreeRTOS/stream_buffer.c ****         if( xIsMessageBuffer != pdFALSE )
 331:FreeRTOS/stream_buffer.c ****         {
 332:FreeRTOS/stream_buffer.c ****             /* Statically allocated message buffer. */
 333:FreeRTOS/stream_buffer.c ****             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 334:FreeRTOS/stream_buffer.c ****         }
 335:FreeRTOS/stream_buffer.c ****         else
 336:FreeRTOS/stream_buffer.c ****         {
 337:FreeRTOS/stream_buffer.c ****             /* Statically allocated stream buffer. */
 338:FreeRTOS/stream_buffer.c ****             ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 339:FreeRTOS/stream_buffer.c ****         }
 340:FreeRTOS/stream_buffer.c **** 
 341:FreeRTOS/stream_buffer.c ****         /* In case the stream buffer is going to be used as a message buffer
 342:FreeRTOS/stream_buffer.c ****          * (that is, it will hold discrete messages with a little meta data that
 343:FreeRTOS/stream_buffer.c ****          * says how big the next message is) check the buffer will be large enough
 344:FreeRTOS/stream_buffer.c ****          * to hold at least one message. */
 345:FreeRTOS/stream_buffer.c ****         configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 346:FreeRTOS/stream_buffer.c **** 
 347:FreeRTOS/stream_buffer.c ****         #if ( configASSERT_DEFINED == 1 )
 348:FreeRTOS/stream_buffer.c ****             {
 349:FreeRTOS/stream_buffer.c ****                 /* Sanity check that the size of the structure used to declare a
 350:FreeRTOS/stream_buffer.c ****                  * variable of type StaticStreamBuffer_t equals the size of the real
 351:FreeRTOS/stream_buffer.c ****                  * message buffer structure. */
 352:FreeRTOS/stream_buffer.c ****                 volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 353:FreeRTOS/stream_buffer.c ****                 configASSERT( xSize == sizeof( StreamBuffer_t ) );
 354:FreeRTOS/stream_buffer.c ****             } /*lint !e529 xSize is referenced is configASSERT() is defined. */
 355:FreeRTOS/stream_buffer.c ****         #endif /* configASSERT_DEFINED */
 356:FreeRTOS/stream_buffer.c **** 
 357:FreeRTOS/stream_buffer.c ****         if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 358:FreeRTOS/stream_buffer.c ****         {
 359:FreeRTOS/stream_buffer.c ****             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 360:FreeRTOS/stream_buffer.c ****                                           pucStreamBufferStorageArea,
 361:FreeRTOS/stream_buffer.c ****                                           xBufferSizeBytes,
 362:FreeRTOS/stream_buffer.c ****                                           xTriggerLevelBytes,
 363:FreeRTOS/stream_buffer.c ****                                           ucFlags );
 364:FreeRTOS/stream_buffer.c **** 
 365:FreeRTOS/stream_buffer.c ****             /* Remember this was statically allocated in case it is ever deleted
 366:FreeRTOS/stream_buffer.c ****              * again. */
 367:FreeRTOS/stream_buffer.c ****             pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 368:FreeRTOS/stream_buffer.c **** 
 369:FreeRTOS/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );
 370:FreeRTOS/stream_buffer.c **** 
 371:FreeRTOS/stream_buffer.c ****             xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requ
 372:FreeRTOS/stream_buffer.c ****         }
 373:FreeRTOS/stream_buffer.c ****         else
 374:FreeRTOS/stream_buffer.c ****         {
 375:FreeRTOS/stream_buffer.c ****             xReturn = NULL;
 376:FreeRTOS/stream_buffer.c ****             traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
ARM GAS  /tmp/ccYBDQMR.s 			page 8


 377:FreeRTOS/stream_buffer.c ****         }
 378:FreeRTOS/stream_buffer.c **** 
 379:FreeRTOS/stream_buffer.c ****         return xReturn;
 380:FreeRTOS/stream_buffer.c ****     }
 381:FreeRTOS/stream_buffer.c **** 
 382:FreeRTOS/stream_buffer.c **** #endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 383:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 384:FreeRTOS/stream_buffer.c **** 
 385:FreeRTOS/stream_buffer.c **** void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
 386:FreeRTOS/stream_buffer.c **** {
 387:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 388:FreeRTOS/stream_buffer.c **** 
 389:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 390:FreeRTOS/stream_buffer.c **** 
 391:FreeRTOS/stream_buffer.c ****     traceSTREAM_BUFFER_DELETE( xStreamBuffer );
 392:FreeRTOS/stream_buffer.c **** 
 393:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 394:FreeRTOS/stream_buffer.c ****     {
 395:FreeRTOS/stream_buffer.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 396:FreeRTOS/stream_buffer.c ****             {
 397:FreeRTOS/stream_buffer.c ****                 /* Both the structure and the buffer were allocated using a single call
 398:FreeRTOS/stream_buffer.c ****                 * to pvPortMalloc(), hence only one call to vPortFree() is required. */
 399:FreeRTOS/stream_buffer.c ****                 vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics req
 400:FreeRTOS/stream_buffer.c ****             }
 401:FreeRTOS/stream_buffer.c ****         #else
 402:FreeRTOS/stream_buffer.c ****             {
 403:FreeRTOS/stream_buffer.c ****                 /* Should not be possible to get here, ucFlags must be corrupt.
 404:FreeRTOS/stream_buffer.c ****                  * Force an assert. */
 405:FreeRTOS/stream_buffer.c ****                 configASSERT( xStreamBuffer == ( StreamBufferHandle_t ) ~0 );
 406:FreeRTOS/stream_buffer.c ****             }
 407:FreeRTOS/stream_buffer.c ****         #endif
 408:FreeRTOS/stream_buffer.c ****     }
 409:FreeRTOS/stream_buffer.c ****     else
 410:FreeRTOS/stream_buffer.c ****     {
 411:FreeRTOS/stream_buffer.c ****         /* The structure and buffer were not allocated dynamically and cannot be
 412:FreeRTOS/stream_buffer.c ****          * freed - just scrub the structure so future use will assert. */
 413:FreeRTOS/stream_buffer.c ****         ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 414:FreeRTOS/stream_buffer.c ****     }
 415:FreeRTOS/stream_buffer.c **** }
 416:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 417:FreeRTOS/stream_buffer.c **** 
 418:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
 419:FreeRTOS/stream_buffer.c **** {
 420:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 421:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn = pdFAIL;
 422:FreeRTOS/stream_buffer.c **** 
 423:FreeRTOS/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 424:FreeRTOS/stream_buffer.c ****         UBaseType_t uxStreamBufferNumber;
 425:FreeRTOS/stream_buffer.c ****     #endif
 426:FreeRTOS/stream_buffer.c **** 
 427:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 428:FreeRTOS/stream_buffer.c **** 
 429:FreeRTOS/stream_buffer.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 430:FreeRTOS/stream_buffer.c ****         {
 431:FreeRTOS/stream_buffer.c ****             /* Store the stream buffer number so it can be restored after the
 432:FreeRTOS/stream_buffer.c ****              * reset. */
 433:FreeRTOS/stream_buffer.c ****             uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
ARM GAS  /tmp/ccYBDQMR.s 			page 9


 434:FreeRTOS/stream_buffer.c ****         }
 435:FreeRTOS/stream_buffer.c ****     #endif
 436:FreeRTOS/stream_buffer.c **** 
 437:FreeRTOS/stream_buffer.c ****     /* Can only reset a message buffer if there are no tasks blocked on it. */
 438:FreeRTOS/stream_buffer.c ****     taskENTER_CRITICAL();
 439:FreeRTOS/stream_buffer.c ****     {
 440:FreeRTOS/stream_buffer.c ****         if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 441:FreeRTOS/stream_buffer.c ****         {
 442:FreeRTOS/stream_buffer.c ****             if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 443:FreeRTOS/stream_buffer.c ****             {
 444:FreeRTOS/stream_buffer.c ****                 prvInitialiseNewStreamBuffer( pxStreamBuffer,
 445:FreeRTOS/stream_buffer.c ****                                               pxStreamBuffer->pucBuffer,
 446:FreeRTOS/stream_buffer.c ****                                               pxStreamBuffer->xLength,
 447:FreeRTOS/stream_buffer.c ****                                               pxStreamBuffer->xTriggerLevelBytes,
 448:FreeRTOS/stream_buffer.c ****                                               pxStreamBuffer->ucFlags );
 449:FreeRTOS/stream_buffer.c ****                 xReturn = pdPASS;
 450:FreeRTOS/stream_buffer.c **** 
 451:FreeRTOS/stream_buffer.c ****                 #if ( configUSE_TRACE_FACILITY == 1 )
 452:FreeRTOS/stream_buffer.c ****                     {
 453:FreeRTOS/stream_buffer.c ****                         pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 454:FreeRTOS/stream_buffer.c ****                     }
 455:FreeRTOS/stream_buffer.c ****                 #endif
 456:FreeRTOS/stream_buffer.c **** 
 457:FreeRTOS/stream_buffer.c ****                 traceSTREAM_BUFFER_RESET( xStreamBuffer );
 458:FreeRTOS/stream_buffer.c ****             }
 459:FreeRTOS/stream_buffer.c ****         }
 460:FreeRTOS/stream_buffer.c ****     }
 461:FreeRTOS/stream_buffer.c ****     taskEXIT_CRITICAL();
 462:FreeRTOS/stream_buffer.c **** 
 463:FreeRTOS/stream_buffer.c ****     return xReturn;
 464:FreeRTOS/stream_buffer.c **** }
 465:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 466:FreeRTOS/stream_buffer.c **** 
 467:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,
 468:FreeRTOS/stream_buffer.c ****                                          size_t xTriggerLevel )
 469:FreeRTOS/stream_buffer.c **** {
 470:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 471:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
 472:FreeRTOS/stream_buffer.c **** 
 473:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 474:FreeRTOS/stream_buffer.c **** 
 475:FreeRTOS/stream_buffer.c ****     /* It is not valid for the trigger level to be 0. */
 476:FreeRTOS/stream_buffer.c ****     if( xTriggerLevel == ( size_t ) 0 )
 477:FreeRTOS/stream_buffer.c ****     {
 478:FreeRTOS/stream_buffer.c ****         xTriggerLevel = ( size_t ) 1;
 479:FreeRTOS/stream_buffer.c ****     }
 480:FreeRTOS/stream_buffer.c **** 
 481:FreeRTOS/stream_buffer.c ****     /* The trigger level is the number of bytes that must be in the stream
 482:FreeRTOS/stream_buffer.c ****      * buffer before a task that is waiting for data is unblocked. */
 483:FreeRTOS/stream_buffer.c ****     if( xTriggerLevel < pxStreamBuffer->xLength )
 484:FreeRTOS/stream_buffer.c ****     {
 485:FreeRTOS/stream_buffer.c ****         pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 486:FreeRTOS/stream_buffer.c ****         xReturn = pdPASS;
 487:FreeRTOS/stream_buffer.c ****     }
 488:FreeRTOS/stream_buffer.c ****     else
 489:FreeRTOS/stream_buffer.c ****     {
 490:FreeRTOS/stream_buffer.c ****         xReturn = pdFALSE;
ARM GAS  /tmp/ccYBDQMR.s 			page 10


 491:FreeRTOS/stream_buffer.c ****     }
 492:FreeRTOS/stream_buffer.c **** 
 493:FreeRTOS/stream_buffer.c ****     return xReturn;
 494:FreeRTOS/stream_buffer.c **** }
 495:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 496:FreeRTOS/stream_buffer.c **** 
 497:FreeRTOS/stream_buffer.c **** size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
 498:FreeRTOS/stream_buffer.c **** {
 499:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 500:FreeRTOS/stream_buffer.c ****     size_t xSpace;
 501:FreeRTOS/stream_buffer.c ****     size_t xOriginalTail;
 502:FreeRTOS/stream_buffer.c **** 
 503:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 504:FreeRTOS/stream_buffer.c **** 
 505:FreeRTOS/stream_buffer.c ****     /* The code below reads xTail and then xHead.  This is safe if the stream
 506:FreeRTOS/stream_buffer.c ****      * buffer is updated once between the two reads - but not if the stream buffer
 507:FreeRTOS/stream_buffer.c ****      * is updated more than once between the two reads - hence the loop. */
 508:FreeRTOS/stream_buffer.c ****     do
 509:FreeRTOS/stream_buffer.c ****     {
 510:FreeRTOS/stream_buffer.c ****         xOriginalTail = pxStreamBuffer->xTail;
 511:FreeRTOS/stream_buffer.c ****         xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 512:FreeRTOS/stream_buffer.c ****         xSpace -= pxStreamBuffer->xHead;
 513:FreeRTOS/stream_buffer.c ****     } while( xOriginalTail != pxStreamBuffer->xTail );
 514:FreeRTOS/stream_buffer.c **** 
 515:FreeRTOS/stream_buffer.c ****     xSpace -= ( size_t ) 1;
 516:FreeRTOS/stream_buffer.c **** 
 517:FreeRTOS/stream_buffer.c ****     if( xSpace >= pxStreamBuffer->xLength )
 518:FreeRTOS/stream_buffer.c ****     {
 519:FreeRTOS/stream_buffer.c ****         xSpace -= pxStreamBuffer->xLength;
 520:FreeRTOS/stream_buffer.c ****     }
 521:FreeRTOS/stream_buffer.c ****     else
 522:FreeRTOS/stream_buffer.c ****     {
 523:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 524:FreeRTOS/stream_buffer.c ****     }
 525:FreeRTOS/stream_buffer.c **** 
 526:FreeRTOS/stream_buffer.c ****     return xSpace;
 527:FreeRTOS/stream_buffer.c **** }
 528:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 529:FreeRTOS/stream_buffer.c **** 
 530:FreeRTOS/stream_buffer.c **** size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
 531:FreeRTOS/stream_buffer.c **** {
 532:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 533:FreeRTOS/stream_buffer.c ****     size_t xReturn;
 534:FreeRTOS/stream_buffer.c **** 
 535:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 536:FreeRTOS/stream_buffer.c **** 
 537:FreeRTOS/stream_buffer.c ****     xReturn = prvBytesInBuffer( pxStreamBuffer );
 538:FreeRTOS/stream_buffer.c ****     return xReturn;
 539:FreeRTOS/stream_buffer.c **** }
 540:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 541:FreeRTOS/stream_buffer.c **** 
 542:FreeRTOS/stream_buffer.c **** size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
 543:FreeRTOS/stream_buffer.c ****                           const void * pvTxData,
 544:FreeRTOS/stream_buffer.c ****                           size_t xDataLengthBytes,
 545:FreeRTOS/stream_buffer.c ****                           TickType_t xTicksToWait )
 546:FreeRTOS/stream_buffer.c **** {
 547:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
ARM GAS  /tmp/ccYBDQMR.s 			page 11


 548:FreeRTOS/stream_buffer.c ****     size_t xReturn, xSpace = 0;
 549:FreeRTOS/stream_buffer.c ****     size_t xRequiredSpace = xDataLengthBytes;
 550:FreeRTOS/stream_buffer.c ****     TimeOut_t xTimeOut;
 551:FreeRTOS/stream_buffer.c ****     size_t xMaxReportedSpace = 0;
 552:FreeRTOS/stream_buffer.c **** 
 553:FreeRTOS/stream_buffer.c ****     configASSERT( pvTxData );
 554:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 555:FreeRTOS/stream_buffer.c **** 
 556:FreeRTOS/stream_buffer.c ****     /* The maximum amount of space a stream buffer will ever report is its length
 557:FreeRTOS/stream_buffer.c ****      * minus 1. */
 558:FreeRTOS/stream_buffer.c ****     xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 559:FreeRTOS/stream_buffer.c **** 
 560:FreeRTOS/stream_buffer.c ****     /* This send function is used to write to both message buffers and stream
 561:FreeRTOS/stream_buffer.c ****      * buffers.  If this is a message buffer then the space needed must be
 562:FreeRTOS/stream_buffer.c ****      * increased by the amount of bytes needed to store the length of the
 563:FreeRTOS/stream_buffer.c ****      * message. */
 564:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 565:FreeRTOS/stream_buffer.c ****     {
 566:FreeRTOS/stream_buffer.c ****         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 567:FreeRTOS/stream_buffer.c **** 
 568:FreeRTOS/stream_buffer.c ****         /* Overflow? */
 569:FreeRTOS/stream_buffer.c ****         configASSERT( xRequiredSpace > xDataLengthBytes );
 570:FreeRTOS/stream_buffer.c **** 
 571:FreeRTOS/stream_buffer.c ****         /* If this is a message buffer then it must be possible to write the
 572:FreeRTOS/stream_buffer.c ****          * whole message. */
 573:FreeRTOS/stream_buffer.c ****         if( xRequiredSpace > xMaxReportedSpace )
 574:FreeRTOS/stream_buffer.c ****         {
 575:FreeRTOS/stream_buffer.c ****             /* The message would not fit even if the entire buffer was empty,
 576:FreeRTOS/stream_buffer.c ****              * so don't wait for space. */
 577:FreeRTOS/stream_buffer.c ****             xTicksToWait = ( TickType_t ) 0;
 578:FreeRTOS/stream_buffer.c ****         }
 579:FreeRTOS/stream_buffer.c ****         else
 580:FreeRTOS/stream_buffer.c ****         {
 581:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 582:FreeRTOS/stream_buffer.c ****         }
 583:FreeRTOS/stream_buffer.c ****     }
 584:FreeRTOS/stream_buffer.c ****     else
 585:FreeRTOS/stream_buffer.c ****     {
 586:FreeRTOS/stream_buffer.c ****         /* If this is a stream buffer then it is acceptable to write only part
 587:FreeRTOS/stream_buffer.c ****          * of the message to the buffer.  Cap the length to the total length of
 588:FreeRTOS/stream_buffer.c ****          * the buffer. */
 589:FreeRTOS/stream_buffer.c ****         if( xRequiredSpace > xMaxReportedSpace )
 590:FreeRTOS/stream_buffer.c ****         {
 591:FreeRTOS/stream_buffer.c ****             xRequiredSpace = xMaxReportedSpace;
 592:FreeRTOS/stream_buffer.c ****         }
 593:FreeRTOS/stream_buffer.c ****         else
 594:FreeRTOS/stream_buffer.c ****         {
 595:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 596:FreeRTOS/stream_buffer.c ****         }
 597:FreeRTOS/stream_buffer.c ****     }
 598:FreeRTOS/stream_buffer.c **** 
 599:FreeRTOS/stream_buffer.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 600:FreeRTOS/stream_buffer.c ****     {
 601:FreeRTOS/stream_buffer.c ****         vTaskSetTimeOutState( &xTimeOut );
 602:FreeRTOS/stream_buffer.c **** 
 603:FreeRTOS/stream_buffer.c ****         do
 604:FreeRTOS/stream_buffer.c ****         {
ARM GAS  /tmp/ccYBDQMR.s 			page 12


 605:FreeRTOS/stream_buffer.c ****             /* Wait until the required number of bytes are free in the message
 606:FreeRTOS/stream_buffer.c ****              * buffer. */
 607:FreeRTOS/stream_buffer.c ****             taskENTER_CRITICAL();
 608:FreeRTOS/stream_buffer.c ****             {
 609:FreeRTOS/stream_buffer.c ****                 xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 610:FreeRTOS/stream_buffer.c **** 
 611:FreeRTOS/stream_buffer.c ****                 if( xSpace < xRequiredSpace )
 612:FreeRTOS/stream_buffer.c ****                 {
 613:FreeRTOS/stream_buffer.c ****                     /* Clear notification state as going to wait for space. */
 614:FreeRTOS/stream_buffer.c ****                     ( void ) xTaskNotifyStateClear( NULL );
 615:FreeRTOS/stream_buffer.c **** 
 616:FreeRTOS/stream_buffer.c ****                     /* Should only be one writer. */
 617:FreeRTOS/stream_buffer.c ****                     configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 618:FreeRTOS/stream_buffer.c ****                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 619:FreeRTOS/stream_buffer.c ****                 }
 620:FreeRTOS/stream_buffer.c ****                 else
 621:FreeRTOS/stream_buffer.c ****                 {
 622:FreeRTOS/stream_buffer.c ****                     taskEXIT_CRITICAL();
 623:FreeRTOS/stream_buffer.c ****                     break;
 624:FreeRTOS/stream_buffer.c ****                 }
 625:FreeRTOS/stream_buffer.c ****             }
 626:FreeRTOS/stream_buffer.c ****             taskEXIT_CRITICAL();
 627:FreeRTOS/stream_buffer.c **** 
 628:FreeRTOS/stream_buffer.c ****             traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
 629:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 630:FreeRTOS/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToSend = NULL;
 631:FreeRTOS/stream_buffer.c ****         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 632:FreeRTOS/stream_buffer.c ****     }
 633:FreeRTOS/stream_buffer.c ****     else
 634:FreeRTOS/stream_buffer.c ****     {
 635:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 636:FreeRTOS/stream_buffer.c ****     }
 637:FreeRTOS/stream_buffer.c **** 
 638:FreeRTOS/stream_buffer.c ****     if( xSpace == ( size_t ) 0 )
 639:FreeRTOS/stream_buffer.c ****     {
 640:FreeRTOS/stream_buffer.c ****         xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 641:FreeRTOS/stream_buffer.c ****     }
 642:FreeRTOS/stream_buffer.c ****     else
 643:FreeRTOS/stream_buffer.c ****     {
 644:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 645:FreeRTOS/stream_buffer.c ****     }
 646:FreeRTOS/stream_buffer.c **** 
 647:FreeRTOS/stream_buffer.c ****     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequire
 648:FreeRTOS/stream_buffer.c **** 
 649:FreeRTOS/stream_buffer.c ****     if( xReturn > ( size_t ) 0 )
 650:FreeRTOS/stream_buffer.c ****     {
 651:FreeRTOS/stream_buffer.c ****         traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 652:FreeRTOS/stream_buffer.c **** 
 653:FreeRTOS/stream_buffer.c ****         /* Was a task waiting for the data? */
 654:FreeRTOS/stream_buffer.c ****         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 655:FreeRTOS/stream_buffer.c ****         {
 656:FreeRTOS/stream_buffer.c ****             sbSEND_COMPLETED( pxStreamBuffer );
 657:FreeRTOS/stream_buffer.c ****         }
 658:FreeRTOS/stream_buffer.c ****         else
 659:FreeRTOS/stream_buffer.c ****         {
 660:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 661:FreeRTOS/stream_buffer.c ****         }
ARM GAS  /tmp/ccYBDQMR.s 			page 13


 662:FreeRTOS/stream_buffer.c ****     }
 663:FreeRTOS/stream_buffer.c ****     else
 664:FreeRTOS/stream_buffer.c ****     {
 665:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 666:FreeRTOS/stream_buffer.c ****         traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 667:FreeRTOS/stream_buffer.c ****     }
 668:FreeRTOS/stream_buffer.c **** 
 669:FreeRTOS/stream_buffer.c ****     return xReturn;
 670:FreeRTOS/stream_buffer.c **** }
 671:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 672:FreeRTOS/stream_buffer.c **** 
 673:FreeRTOS/stream_buffer.c **** size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
 674:FreeRTOS/stream_buffer.c ****                                  const void * pvTxData,
 675:FreeRTOS/stream_buffer.c ****                                  size_t xDataLengthBytes,
 676:FreeRTOS/stream_buffer.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
 677:FreeRTOS/stream_buffer.c **** {
 678:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 679:FreeRTOS/stream_buffer.c ****     size_t xReturn, xSpace;
 680:FreeRTOS/stream_buffer.c ****     size_t xRequiredSpace = xDataLengthBytes;
 681:FreeRTOS/stream_buffer.c **** 
 682:FreeRTOS/stream_buffer.c ****     configASSERT( pvTxData );
 683:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 684:FreeRTOS/stream_buffer.c **** 
 685:FreeRTOS/stream_buffer.c ****     /* This send function is used to write to both message buffers and stream
 686:FreeRTOS/stream_buffer.c ****      * buffers.  If this is a message buffer then the space needed must be
 687:FreeRTOS/stream_buffer.c ****      * increased by the amount of bytes needed to store the length of the
 688:FreeRTOS/stream_buffer.c ****      * message. */
 689:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 690:FreeRTOS/stream_buffer.c ****     {
 691:FreeRTOS/stream_buffer.c ****         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 692:FreeRTOS/stream_buffer.c ****     }
 693:FreeRTOS/stream_buffer.c ****     else
 694:FreeRTOS/stream_buffer.c ****     {
 695:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 696:FreeRTOS/stream_buffer.c ****     }
 697:FreeRTOS/stream_buffer.c **** 
 698:FreeRTOS/stream_buffer.c ****     xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 699:FreeRTOS/stream_buffer.c ****     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequire
 700:FreeRTOS/stream_buffer.c **** 
 701:FreeRTOS/stream_buffer.c ****     if( xReturn > ( size_t ) 0 )
 702:FreeRTOS/stream_buffer.c ****     {
 703:FreeRTOS/stream_buffer.c ****         /* Was a task waiting for the data? */
 704:FreeRTOS/stream_buffer.c ****         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 705:FreeRTOS/stream_buffer.c ****         {
 706:FreeRTOS/stream_buffer.c ****             sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 707:FreeRTOS/stream_buffer.c ****         }
 708:FreeRTOS/stream_buffer.c ****         else
 709:FreeRTOS/stream_buffer.c ****         {
 710:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 711:FreeRTOS/stream_buffer.c ****         }
 712:FreeRTOS/stream_buffer.c ****     }
 713:FreeRTOS/stream_buffer.c ****     else
 714:FreeRTOS/stream_buffer.c ****     {
 715:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 716:FreeRTOS/stream_buffer.c ****     }
 717:FreeRTOS/stream_buffer.c **** 
 718:FreeRTOS/stream_buffer.c ****     traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
ARM GAS  /tmp/ccYBDQMR.s 			page 14


 719:FreeRTOS/stream_buffer.c **** 
 720:FreeRTOS/stream_buffer.c ****     return xReturn;
 721:FreeRTOS/stream_buffer.c **** }
 722:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 723:FreeRTOS/stream_buffer.c **** 
 724:FreeRTOS/stream_buffer.c **** static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
 725:FreeRTOS/stream_buffer.c ****                                        const void * pvTxData,
 726:FreeRTOS/stream_buffer.c ****                                        size_t xDataLengthBytes,
 727:FreeRTOS/stream_buffer.c ****                                        size_t xSpace,
 728:FreeRTOS/stream_buffer.c ****                                        size_t xRequiredSpace )
 729:FreeRTOS/stream_buffer.c **** {
 730:FreeRTOS/stream_buffer.c ****     size_t xNextHead = pxStreamBuffer->xHead;
 731:FreeRTOS/stream_buffer.c **** 
 732:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 733:FreeRTOS/stream_buffer.c ****     {
 734:FreeRTOS/stream_buffer.c ****         /* This is a message buffer, as opposed to a stream buffer. */
 735:FreeRTOS/stream_buffer.c **** 
 736:FreeRTOS/stream_buffer.c ****         if( xSpace >= xRequiredSpace )
 737:FreeRTOS/stream_buffer.c ****         {
 738:FreeRTOS/stream_buffer.c ****             /* There is enough space to write both the message length and the message
 739:FreeRTOS/stream_buffer.c ****              * itself into the buffer.  Start by writing the length of the data, the data
 740:FreeRTOS/stream_buffer.c ****              * itself will be written later in this function. */
 741:FreeRTOS/stream_buffer.c ****             xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBy
 742:FreeRTOS/stream_buffer.c ****         }
 743:FreeRTOS/stream_buffer.c ****         else
 744:FreeRTOS/stream_buffer.c ****         {
 745:FreeRTOS/stream_buffer.c ****             /* Not enough space, so do not write data to the buffer. */
 746:FreeRTOS/stream_buffer.c ****             xDataLengthBytes = 0;
 747:FreeRTOS/stream_buffer.c ****         }
 748:FreeRTOS/stream_buffer.c ****     }
 749:FreeRTOS/stream_buffer.c ****     else
 750:FreeRTOS/stream_buffer.c ****     {
 751:FreeRTOS/stream_buffer.c ****         /* This is a stream buffer, as opposed to a message buffer, so writing a
 752:FreeRTOS/stream_buffer.c ****          * stream of bytes rather than discrete messages.  Plan to write as many
 753:FreeRTOS/stream_buffer.c ****          * bytes as possible. */
 754:FreeRTOS/stream_buffer.c ****         xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 755:FreeRTOS/stream_buffer.c ****     }
 756:FreeRTOS/stream_buffer.c **** 
 757:FreeRTOS/stream_buffer.c ****     if( xDataLengthBytes != ( size_t ) 0 )
 758:FreeRTOS/stream_buffer.c ****     {
 759:FreeRTOS/stream_buffer.c ****         /* Write the data to the buffer. */
 760:FreeRTOS/stream_buffer.c ****         pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData
 761:FreeRTOS/stream_buffer.c ****     }
 762:FreeRTOS/stream_buffer.c **** 
 763:FreeRTOS/stream_buffer.c ****     return xDataLengthBytes;
 764:FreeRTOS/stream_buffer.c **** }
 765:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 766:FreeRTOS/stream_buffer.c **** 
 767:FreeRTOS/stream_buffer.c **** size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
 768:FreeRTOS/stream_buffer.c ****                              void * pvRxData,
 769:FreeRTOS/stream_buffer.c ****                              size_t xBufferLengthBytes,
 770:FreeRTOS/stream_buffer.c ****                              TickType_t xTicksToWait )
 771:FreeRTOS/stream_buffer.c **** {
 772:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 773:FreeRTOS/stream_buffer.c ****     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 774:FreeRTOS/stream_buffer.c **** 
 775:FreeRTOS/stream_buffer.c ****     configASSERT( pvRxData );
ARM GAS  /tmp/ccYBDQMR.s 			page 15


 776:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 777:FreeRTOS/stream_buffer.c **** 
 778:FreeRTOS/stream_buffer.c ****     /* This receive function is used by both message buffers, which store
 779:FreeRTOS/stream_buffer.c ****      * discrete messages, and stream buffers, which store a continuous stream of
 780:FreeRTOS/stream_buffer.c ****      * bytes.  Discrete messages include an additional
 781:FreeRTOS/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 782:FreeRTOS/stream_buffer.c ****      * message. */
 783:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 784:FreeRTOS/stream_buffer.c ****     {
 785:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 786:FreeRTOS/stream_buffer.c ****     }
 787:FreeRTOS/stream_buffer.c ****     else
 788:FreeRTOS/stream_buffer.c ****     {
 789:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
 790:FreeRTOS/stream_buffer.c ****     }
 791:FreeRTOS/stream_buffer.c **** 
 792:FreeRTOS/stream_buffer.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 793:FreeRTOS/stream_buffer.c ****     {
 794:FreeRTOS/stream_buffer.c ****         /* Checking if there is data and clearing the notification state must be
 795:FreeRTOS/stream_buffer.c ****          * performed atomically. */
 796:FreeRTOS/stream_buffer.c ****         taskENTER_CRITICAL();
 797:FreeRTOS/stream_buffer.c ****         {
 798:FreeRTOS/stream_buffer.c ****             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 799:FreeRTOS/stream_buffer.c **** 
 800:FreeRTOS/stream_buffer.c ****             /* If this function was invoked by a message buffer read then
 801:FreeRTOS/stream_buffer.c ****              * xBytesToStoreMessageLength holds the number of bytes used to hold
 802:FreeRTOS/stream_buffer.c ****              * the length of the next discrete message.  If this function was
 803:FreeRTOS/stream_buffer.c ****              * invoked by a stream buffer read then xBytesToStoreMessageLength will
 804:FreeRTOS/stream_buffer.c ****              * be 0. */
 805:FreeRTOS/stream_buffer.c ****             if( xBytesAvailable <= xBytesToStoreMessageLength )
 806:FreeRTOS/stream_buffer.c ****             {
 807:FreeRTOS/stream_buffer.c ****                 /* Clear notification state as going to wait for data. */
 808:FreeRTOS/stream_buffer.c ****                 ( void ) xTaskNotifyStateClear( NULL );
 809:FreeRTOS/stream_buffer.c **** 
 810:FreeRTOS/stream_buffer.c ****                 /* Should only be one reader. */
 811:FreeRTOS/stream_buffer.c ****                 configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 812:FreeRTOS/stream_buffer.c ****                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 813:FreeRTOS/stream_buffer.c ****             }
 814:FreeRTOS/stream_buffer.c ****             else
 815:FreeRTOS/stream_buffer.c ****             {
 816:FreeRTOS/stream_buffer.c ****                 mtCOVERAGE_TEST_MARKER();
 817:FreeRTOS/stream_buffer.c ****             }
 818:FreeRTOS/stream_buffer.c ****         }
 819:FreeRTOS/stream_buffer.c ****         taskEXIT_CRITICAL();
 820:FreeRTOS/stream_buffer.c **** 
 821:FreeRTOS/stream_buffer.c ****         if( xBytesAvailable <= xBytesToStoreMessageLength )
 822:FreeRTOS/stream_buffer.c ****         {
 823:FreeRTOS/stream_buffer.c ****             /* Wait for data to be available. */
 824:FreeRTOS/stream_buffer.c ****             traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
 825:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 826:FreeRTOS/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 827:FreeRTOS/stream_buffer.c **** 
 828:FreeRTOS/stream_buffer.c ****             /* Recheck the data available after blocking. */
 829:FreeRTOS/stream_buffer.c ****             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 830:FreeRTOS/stream_buffer.c ****         }
 831:FreeRTOS/stream_buffer.c ****         else
 832:FreeRTOS/stream_buffer.c ****         {
ARM GAS  /tmp/ccYBDQMR.s 			page 16


 833:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 834:FreeRTOS/stream_buffer.c ****         }
 835:FreeRTOS/stream_buffer.c ****     }
 836:FreeRTOS/stream_buffer.c ****     else
 837:FreeRTOS/stream_buffer.c ****     {
 838:FreeRTOS/stream_buffer.c ****         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 839:FreeRTOS/stream_buffer.c ****     }
 840:FreeRTOS/stream_buffer.c **** 
 841:FreeRTOS/stream_buffer.c ****     /* Whether receiving a discrete message (where xBytesToStoreMessageLength
 842:FreeRTOS/stream_buffer.c ****      * holds the number of bytes used to store the message length) or a stream of
 843:FreeRTOS/stream_buffer.c ****      * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 844:FreeRTOS/stream_buffer.c ****      * available must be greater than xBytesToStoreMessageLength to be able to
 845:FreeRTOS/stream_buffer.c ****      * read bytes from the buffer. */
 846:FreeRTOS/stream_buffer.c ****     if( xBytesAvailable > xBytesToStoreMessageLength )
 847:FreeRTOS/stream_buffer.c ****     {
 848:FreeRTOS/stream_buffer.c ****         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, x
 849:FreeRTOS/stream_buffer.c **** 
 850:FreeRTOS/stream_buffer.c ****         /* Was a task waiting for space in the buffer? */
 851:FreeRTOS/stream_buffer.c ****         if( xReceivedLength != ( size_t ) 0 )
 852:FreeRTOS/stream_buffer.c ****         {
 853:FreeRTOS/stream_buffer.c ****             traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 854:FreeRTOS/stream_buffer.c ****             sbRECEIVE_COMPLETED( pxStreamBuffer );
 855:FreeRTOS/stream_buffer.c ****         }
 856:FreeRTOS/stream_buffer.c ****         else
 857:FreeRTOS/stream_buffer.c ****         {
 858:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 859:FreeRTOS/stream_buffer.c ****         }
 860:FreeRTOS/stream_buffer.c ****     }
 861:FreeRTOS/stream_buffer.c ****     else
 862:FreeRTOS/stream_buffer.c ****     {
 863:FreeRTOS/stream_buffer.c ****         traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 864:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 865:FreeRTOS/stream_buffer.c ****     }
 866:FreeRTOS/stream_buffer.c **** 
 867:FreeRTOS/stream_buffer.c ****     return xReceivedLength;
 868:FreeRTOS/stream_buffer.c **** }
 869:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 870:FreeRTOS/stream_buffer.c **** 
 871:FreeRTOS/stream_buffer.c **** size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
 872:FreeRTOS/stream_buffer.c **** {
 873:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 874:FreeRTOS/stream_buffer.c ****     size_t xReturn, xBytesAvailable;
 875:FreeRTOS/stream_buffer.c ****     configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;
 876:FreeRTOS/stream_buffer.c **** 
 877:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 878:FreeRTOS/stream_buffer.c **** 
 879:FreeRTOS/stream_buffer.c ****     /* Ensure the stream buffer is being used as a message buffer. */
 880:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 881:FreeRTOS/stream_buffer.c ****     {
 882:FreeRTOS/stream_buffer.c ****         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 883:FreeRTOS/stream_buffer.c **** 
 884:FreeRTOS/stream_buffer.c ****         if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 885:FreeRTOS/stream_buffer.c ****         {
 886:FreeRTOS/stream_buffer.c ****             /* The number of bytes available is greater than the number of bytes
 887:FreeRTOS/stream_buffer.c ****              * required to hold the length of the next message, so another message
 888:FreeRTOS/stream_buffer.c ****              * is available. */
 889:FreeRTOS/stream_buffer.c ****             ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO
ARM GAS  /tmp/ccYBDQMR.s 			page 17


 890:FreeRTOS/stream_buffer.c ****             xReturn = ( size_t ) xTempReturn;
 891:FreeRTOS/stream_buffer.c ****         }
 892:FreeRTOS/stream_buffer.c ****         else
 893:FreeRTOS/stream_buffer.c ****         {
 894:FreeRTOS/stream_buffer.c ****             /* The minimum amount of bytes in a message buffer is
 895:FreeRTOS/stream_buffer.c ****              * ( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
 896:FreeRTOS/stream_buffer.c ****              * less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
 897:FreeRTOS/stream_buffer.c ****              * value is 0. */
 898:FreeRTOS/stream_buffer.c ****             configASSERT( xBytesAvailable == 0 );
 899:FreeRTOS/stream_buffer.c ****             xReturn = 0;
 900:FreeRTOS/stream_buffer.c ****         }
 901:FreeRTOS/stream_buffer.c ****     }
 902:FreeRTOS/stream_buffer.c ****     else
 903:FreeRTOS/stream_buffer.c ****     {
 904:FreeRTOS/stream_buffer.c ****         xReturn = 0;
 905:FreeRTOS/stream_buffer.c ****     }
 906:FreeRTOS/stream_buffer.c **** 
 907:FreeRTOS/stream_buffer.c ****     return xReturn;
 908:FreeRTOS/stream_buffer.c **** }
 909:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 910:FreeRTOS/stream_buffer.c **** 
 911:FreeRTOS/stream_buffer.c **** size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
 912:FreeRTOS/stream_buffer.c ****                                     void * pvRxData,
 913:FreeRTOS/stream_buffer.c ****                                     size_t xBufferLengthBytes,
 914:FreeRTOS/stream_buffer.c ****                                     BaseType_t * const pxHigherPriorityTaskWoken )
 915:FreeRTOS/stream_buffer.c **** {
 916:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 917:FreeRTOS/stream_buffer.c ****     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 918:FreeRTOS/stream_buffer.c **** 
 919:FreeRTOS/stream_buffer.c ****     configASSERT( pvRxData );
 920:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 921:FreeRTOS/stream_buffer.c **** 
 922:FreeRTOS/stream_buffer.c ****     /* This receive function is used by both message buffers, which store
 923:FreeRTOS/stream_buffer.c ****      * discrete messages, and stream buffers, which store a continuous stream of
 924:FreeRTOS/stream_buffer.c ****      * bytes.  Discrete messages include an additional
 925:FreeRTOS/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
 926:FreeRTOS/stream_buffer.c ****      * message. */
 927:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 928:FreeRTOS/stream_buffer.c ****     {
 929:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 930:FreeRTOS/stream_buffer.c ****     }
 931:FreeRTOS/stream_buffer.c ****     else
 932:FreeRTOS/stream_buffer.c ****     {
 933:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
 934:FreeRTOS/stream_buffer.c ****     }
 935:FreeRTOS/stream_buffer.c **** 
 936:FreeRTOS/stream_buffer.c ****     xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 937:FreeRTOS/stream_buffer.c **** 
 938:FreeRTOS/stream_buffer.c ****     /* Whether receiving a discrete message (where xBytesToStoreMessageLength
 939:FreeRTOS/stream_buffer.c ****      * holds the number of bytes used to store the message length) or a stream of
 940:FreeRTOS/stream_buffer.c ****      * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
 941:FreeRTOS/stream_buffer.c ****      * available must be greater than xBytesToStoreMessageLength to be able to
 942:FreeRTOS/stream_buffer.c ****      * read bytes from the buffer. */
 943:FreeRTOS/stream_buffer.c ****     if( xBytesAvailable > xBytesToStoreMessageLength )
 944:FreeRTOS/stream_buffer.c ****     {
 945:FreeRTOS/stream_buffer.c ****         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, x
 946:FreeRTOS/stream_buffer.c **** 
ARM GAS  /tmp/ccYBDQMR.s 			page 18


 947:FreeRTOS/stream_buffer.c ****         /* Was a task waiting for space in the buffer? */
 948:FreeRTOS/stream_buffer.c ****         if( xReceivedLength != ( size_t ) 0 )
 949:FreeRTOS/stream_buffer.c ****         {
 950:FreeRTOS/stream_buffer.c ****             sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 951:FreeRTOS/stream_buffer.c ****         }
 952:FreeRTOS/stream_buffer.c ****         else
 953:FreeRTOS/stream_buffer.c ****         {
 954:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 955:FreeRTOS/stream_buffer.c ****         }
 956:FreeRTOS/stream_buffer.c ****     }
 957:FreeRTOS/stream_buffer.c ****     else
 958:FreeRTOS/stream_buffer.c ****     {
 959:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
 960:FreeRTOS/stream_buffer.c ****     }
 961:FreeRTOS/stream_buffer.c **** 
 962:FreeRTOS/stream_buffer.c ****     traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );
 963:FreeRTOS/stream_buffer.c **** 
 964:FreeRTOS/stream_buffer.c ****     return xReceivedLength;
 965:FreeRTOS/stream_buffer.c **** }
 966:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 967:FreeRTOS/stream_buffer.c **** 
 968:FreeRTOS/stream_buffer.c **** static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
 969:FreeRTOS/stream_buffer.c ****                                         void * pvRxData,
 970:FreeRTOS/stream_buffer.c ****                                         size_t xBufferLengthBytes,
 971:FreeRTOS/stream_buffer.c ****                                         size_t xBytesAvailable )
 972:FreeRTOS/stream_buffer.c **** {
 973:FreeRTOS/stream_buffer.c ****     size_t xCount, xNextMessageLength;
 974:FreeRTOS/stream_buffer.c ****     configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;
 975:FreeRTOS/stream_buffer.c ****     size_t xNextTail = pxStreamBuffer->xTail;
 976:FreeRTOS/stream_buffer.c **** 
 977:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 978:FreeRTOS/stream_buffer.c ****     {
 979:FreeRTOS/stream_buffer.c ****         /* A discrete message is being received.  First receive the length
 980:FreeRTOS/stream_buffer.c ****          * of the message. */
 981:FreeRTOS/stream_buffer.c ****         xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, 
 982:FreeRTOS/stream_buffer.c ****         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 983:FreeRTOS/stream_buffer.c **** 
 984:FreeRTOS/stream_buffer.c ****         /* Reduce the number of bytes available by the number of bytes just
 985:FreeRTOS/stream_buffer.c ****          * read out. */
 986:FreeRTOS/stream_buffer.c ****         xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 987:FreeRTOS/stream_buffer.c **** 
 988:FreeRTOS/stream_buffer.c ****         /* Check there is enough space in the buffer provided by the
 989:FreeRTOS/stream_buffer.c ****          * user. */
 990:FreeRTOS/stream_buffer.c ****         if( xNextMessageLength > xBufferLengthBytes )
 991:FreeRTOS/stream_buffer.c ****         {
 992:FreeRTOS/stream_buffer.c ****             /* The user has provided insufficient space to read the message. */
 993:FreeRTOS/stream_buffer.c ****             xNextMessageLength = 0;
 994:FreeRTOS/stream_buffer.c ****         }
 995:FreeRTOS/stream_buffer.c ****         else
 996:FreeRTOS/stream_buffer.c ****         {
 997:FreeRTOS/stream_buffer.c ****             mtCOVERAGE_TEST_MARKER();
 998:FreeRTOS/stream_buffer.c ****         }
 999:FreeRTOS/stream_buffer.c ****     }
1000:FreeRTOS/stream_buffer.c ****     else
1001:FreeRTOS/stream_buffer.c ****     {
1002:FreeRTOS/stream_buffer.c ****         /* A stream of bytes is being received (as opposed to a discrete
1003:FreeRTOS/stream_buffer.c ****          * message), so read as many bytes as possible. */
ARM GAS  /tmp/ccYBDQMR.s 			page 19


1004:FreeRTOS/stream_buffer.c ****         xNextMessageLength = xBufferLengthBytes;
1005:FreeRTOS/stream_buffer.c ****     }
1006:FreeRTOS/stream_buffer.c **** 
1007:FreeRTOS/stream_buffer.c ****     /* Use the minimum of the wanted bytes and the available bytes. */
1008:FreeRTOS/stream_buffer.c ****     xCount = configMIN( xNextMessageLength, xBytesAvailable );
1009:FreeRTOS/stream_buffer.c **** 
1010:FreeRTOS/stream_buffer.c ****     if( xCount != ( size_t ) 0 )
1011:FreeRTOS/stream_buffer.c ****     {
1012:FreeRTOS/stream_buffer.c ****         /* Read the actual data and update the tail to mark the data as officially consumed. */
1013:FreeRTOS/stream_buffer.c ****         pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCo
1014:FreeRTOS/stream_buffer.c ****     }
1015:FreeRTOS/stream_buffer.c **** 
1016:FreeRTOS/stream_buffer.c ****     return xCount;
1017:FreeRTOS/stream_buffer.c **** }
1018:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1019:FreeRTOS/stream_buffer.c **** 
1020:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
1021:FreeRTOS/stream_buffer.c **** {
1022:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
1023:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
1024:FreeRTOS/stream_buffer.c ****     size_t xTail;
1025:FreeRTOS/stream_buffer.c **** 
1026:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
1027:FreeRTOS/stream_buffer.c **** 
1028:FreeRTOS/stream_buffer.c ****     /* True if no bytes are available. */
1029:FreeRTOS/stream_buffer.c ****     xTail = pxStreamBuffer->xTail;
1030:FreeRTOS/stream_buffer.c **** 
1031:FreeRTOS/stream_buffer.c ****     if( pxStreamBuffer->xHead == xTail )
1032:FreeRTOS/stream_buffer.c ****     {
1033:FreeRTOS/stream_buffer.c ****         xReturn = pdTRUE;
1034:FreeRTOS/stream_buffer.c ****     }
1035:FreeRTOS/stream_buffer.c ****     else
1036:FreeRTOS/stream_buffer.c ****     {
1037:FreeRTOS/stream_buffer.c ****         xReturn = pdFALSE;
1038:FreeRTOS/stream_buffer.c ****     }
1039:FreeRTOS/stream_buffer.c **** 
1040:FreeRTOS/stream_buffer.c ****     return xReturn;
1041:FreeRTOS/stream_buffer.c **** }
1042:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1043:FreeRTOS/stream_buffer.c **** 
1044:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
1045:FreeRTOS/stream_buffer.c **** {
1046:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
1047:FreeRTOS/stream_buffer.c ****     size_t xBytesToStoreMessageLength;
1048:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
1049:FreeRTOS/stream_buffer.c **** 
1050:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
1051:FreeRTOS/stream_buffer.c **** 
1052:FreeRTOS/stream_buffer.c ****     /* This generic version of the receive function is used by both message
1053:FreeRTOS/stream_buffer.c ****      * buffers, which store discrete messages, and stream buffers, which store a
1054:FreeRTOS/stream_buffer.c ****      * continuous stream of bytes.  Discrete messages include an additional
1055:FreeRTOS/stream_buffer.c ****      * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
1056:FreeRTOS/stream_buffer.c ****     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
1057:FreeRTOS/stream_buffer.c ****     {
1058:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
1059:FreeRTOS/stream_buffer.c ****     }
1060:FreeRTOS/stream_buffer.c ****     else
ARM GAS  /tmp/ccYBDQMR.s 			page 20


1061:FreeRTOS/stream_buffer.c ****     {
1062:FreeRTOS/stream_buffer.c ****         xBytesToStoreMessageLength = 0;
1063:FreeRTOS/stream_buffer.c ****     }
1064:FreeRTOS/stream_buffer.c **** 
1065:FreeRTOS/stream_buffer.c ****     /* True if the available space equals zero. */
1066:FreeRTOS/stream_buffer.c ****     if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
1067:FreeRTOS/stream_buffer.c ****     {
1068:FreeRTOS/stream_buffer.c ****         xReturn = pdTRUE;
1069:FreeRTOS/stream_buffer.c ****     }
1070:FreeRTOS/stream_buffer.c ****     else
1071:FreeRTOS/stream_buffer.c ****     {
1072:FreeRTOS/stream_buffer.c ****         xReturn = pdFALSE;
1073:FreeRTOS/stream_buffer.c ****     }
1074:FreeRTOS/stream_buffer.c **** 
1075:FreeRTOS/stream_buffer.c ****     return xReturn;
1076:FreeRTOS/stream_buffer.c **** }
1077:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1078:FreeRTOS/stream_buffer.c **** 
1079:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
1080:FreeRTOS/stream_buffer.c ****                                               BaseType_t * pxHigherPriorityTaskWoken )
1081:FreeRTOS/stream_buffer.c **** {
1082:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
1083:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
1084:FreeRTOS/stream_buffer.c ****     UBaseType_t uxSavedInterruptStatus;
1085:FreeRTOS/stream_buffer.c **** 
1086:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
1087:FreeRTOS/stream_buffer.c **** 
1088:FreeRTOS/stream_buffer.c ****     uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
1089:FreeRTOS/stream_buffer.c ****     {
1090:FreeRTOS/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
1091:FreeRTOS/stream_buffer.c ****         {
1092:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
1093:FreeRTOS/stream_buffer.c ****                                          ( uint32_t ) 0,
1094:FreeRTOS/stream_buffer.c ****                                          eNoAction,
1095:FreeRTOS/stream_buffer.c ****                                          pxHigherPriorityTaskWoken );
1096:FreeRTOS/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
1097:FreeRTOS/stream_buffer.c ****             xReturn = pdTRUE;
1098:FreeRTOS/stream_buffer.c ****         }
1099:FreeRTOS/stream_buffer.c ****         else
1100:FreeRTOS/stream_buffer.c ****         {
1101:FreeRTOS/stream_buffer.c ****             xReturn = pdFALSE;
1102:FreeRTOS/stream_buffer.c ****         }
1103:FreeRTOS/stream_buffer.c ****     }
1104:FreeRTOS/stream_buffer.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1105:FreeRTOS/stream_buffer.c **** 
1106:FreeRTOS/stream_buffer.c ****     return xReturn;
1107:FreeRTOS/stream_buffer.c **** }
1108:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1109:FreeRTOS/stream_buffer.c **** 
1110:FreeRTOS/stream_buffer.c **** BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,
1111:FreeRTOS/stream_buffer.c ****                                                  BaseType_t * pxHigherPriorityTaskWoken )
1112:FreeRTOS/stream_buffer.c **** {
1113:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
1114:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
1115:FreeRTOS/stream_buffer.c ****     UBaseType_t uxSavedInterruptStatus;
1116:FreeRTOS/stream_buffer.c **** 
1117:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
ARM GAS  /tmp/ccYBDQMR.s 			page 21


1118:FreeRTOS/stream_buffer.c **** 
1119:FreeRTOS/stream_buffer.c ****     uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
1120:FreeRTOS/stream_buffer.c ****     {
1121:FreeRTOS/stream_buffer.c ****         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
1122:FreeRTOS/stream_buffer.c ****         {
1123:FreeRTOS/stream_buffer.c ****             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
1124:FreeRTOS/stream_buffer.c ****                                          ( uint32_t ) 0,
1125:FreeRTOS/stream_buffer.c ****                                          eNoAction,
1126:FreeRTOS/stream_buffer.c ****                                          pxHigherPriorityTaskWoken );
1127:FreeRTOS/stream_buffer.c ****             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
1128:FreeRTOS/stream_buffer.c ****             xReturn = pdTRUE;
1129:FreeRTOS/stream_buffer.c ****         }
1130:FreeRTOS/stream_buffer.c ****         else
1131:FreeRTOS/stream_buffer.c ****         {
1132:FreeRTOS/stream_buffer.c ****             xReturn = pdFALSE;
1133:FreeRTOS/stream_buffer.c ****         }
1134:FreeRTOS/stream_buffer.c ****     }
1135:FreeRTOS/stream_buffer.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1136:FreeRTOS/stream_buffer.c **** 
1137:FreeRTOS/stream_buffer.c ****     return xReturn;
1138:FreeRTOS/stream_buffer.c **** }
1139:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1140:FreeRTOS/stream_buffer.c **** 
1141:FreeRTOS/stream_buffer.c **** static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
1142:FreeRTOS/stream_buffer.c ****                                      const uint8_t * pucData,
1143:FreeRTOS/stream_buffer.c ****                                      size_t xCount,
1144:FreeRTOS/stream_buffer.c ****                                      size_t xHead )
1145:FreeRTOS/stream_buffer.c **** {
1146:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
1147:FreeRTOS/stream_buffer.c **** 
1148:FreeRTOS/stream_buffer.c ****     configASSERT( xCount > ( size_t ) 0 );
1149:FreeRTOS/stream_buffer.c **** 
1150:FreeRTOS/stream_buffer.c ****     /* Calculate the number of bytes that can be added in the first write -
1151:FreeRTOS/stream_buffer.c ****      * which may be less than the total number of bytes that need to be added if
1152:FreeRTOS/stream_buffer.c ****      * the buffer will wrap back to the beginning. */
1153:FreeRTOS/stream_buffer.c ****     xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
1154:FreeRTOS/stream_buffer.c **** 
1155:FreeRTOS/stream_buffer.c ****     /* Write as many bytes as can be written in the first write. */
1156:FreeRTOS/stream_buffer.c ****     configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
1157:FreeRTOS/stream_buffer.c ****     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucDa
1158:FreeRTOS/stream_buffer.c **** 
1159:FreeRTOS/stream_buffer.c ****     /* If the number of bytes written was less than the number that could be
1160:FreeRTOS/stream_buffer.c ****      * written in the first write... */
1161:FreeRTOS/stream_buffer.c ****     if( xCount > xFirstLength )
1162:FreeRTOS/stream_buffer.c ****     {
1163:FreeRTOS/stream_buffer.c ****         /* ...then write the remaining bytes to the start of the buffer. */
1164:FreeRTOS/stream_buffer.c ****         configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
1165:FreeRTOS/stream_buffer.c ****         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstL
1166:FreeRTOS/stream_buffer.c ****     }
1167:FreeRTOS/stream_buffer.c ****     else
1168:FreeRTOS/stream_buffer.c ****     {
1169:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1170:FreeRTOS/stream_buffer.c ****     }
1171:FreeRTOS/stream_buffer.c **** 
1172:FreeRTOS/stream_buffer.c ****     xHead += xCount;
1173:FreeRTOS/stream_buffer.c **** 
1174:FreeRTOS/stream_buffer.c ****     if( xHead >= pxStreamBuffer->xLength )
ARM GAS  /tmp/ccYBDQMR.s 			page 22


1175:FreeRTOS/stream_buffer.c ****     {
1176:FreeRTOS/stream_buffer.c ****         xHead -= pxStreamBuffer->xLength;
1177:FreeRTOS/stream_buffer.c ****     }
1178:FreeRTOS/stream_buffer.c ****     else
1179:FreeRTOS/stream_buffer.c ****     {
1180:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/stream_buffer.c ****     }
1182:FreeRTOS/stream_buffer.c **** 
1183:FreeRTOS/stream_buffer.c ****     return xHead;
1184:FreeRTOS/stream_buffer.c **** }
1185:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1186:FreeRTOS/stream_buffer.c **** 
1187:FreeRTOS/stream_buffer.c **** static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
1188:FreeRTOS/stream_buffer.c ****                                       uint8_t * pucData,
1189:FreeRTOS/stream_buffer.c ****                                       size_t xCount,
1190:FreeRTOS/stream_buffer.c ****                                       size_t xTail )
1191:FreeRTOS/stream_buffer.c **** {
1192:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
1193:FreeRTOS/stream_buffer.c **** 
1194:FreeRTOS/stream_buffer.c ****     configASSERT( xCount != ( size_t ) 0 );
1195:FreeRTOS/stream_buffer.c **** 
1196:FreeRTOS/stream_buffer.c ****     /* Calculate the number of bytes that can be read - which may be
1197:FreeRTOS/stream_buffer.c ****      * less than the number wanted if the data wraps around to the start of
1198:FreeRTOS/stream_buffer.c ****      * the buffer. */
1199:FreeRTOS/stream_buffer.c ****     xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
1200:FreeRTOS/stream_buffer.c **** 
1201:FreeRTOS/stream_buffer.c ****     /* Obtain the number of bytes it is possible to obtain in the first
1202:FreeRTOS/stream_buffer.c ****      * read.  Asserts check bounds of read and write. */
1203:FreeRTOS/stream_buffer.c ****     configASSERT( xFirstLength <= xCount );
1204:FreeRTOS/stream_buffer.c ****     configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
1205:FreeRTOS/stream_buffer.c ****     ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), 
1206:FreeRTOS/stream_buffer.c **** 
1207:FreeRTOS/stream_buffer.c ****     /* If the total number of wanted bytes is greater than the number
1208:FreeRTOS/stream_buffer.c ****      * that could be read in the first read... */
1209:FreeRTOS/stream_buffer.c ****     if( xCount > xFirstLength )
1210:FreeRTOS/stream_buffer.c ****     {
1211:FreeRTOS/stream_buffer.c ****         /* ...then read the remaining bytes from the start of the buffer. */
1212:FreeRTOS/stream_buffer.c ****         ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucB
1213:FreeRTOS/stream_buffer.c ****     }
1214:FreeRTOS/stream_buffer.c ****     else
1215:FreeRTOS/stream_buffer.c ****     {
1216:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/stream_buffer.c ****     }
1218:FreeRTOS/stream_buffer.c **** 
1219:FreeRTOS/stream_buffer.c ****     /* Move the tail pointer to effectively remove the data read from the buffer. */
1220:FreeRTOS/stream_buffer.c ****     xTail += xCount;
1221:FreeRTOS/stream_buffer.c **** 
1222:FreeRTOS/stream_buffer.c ****     if( xTail >= pxStreamBuffer->xLength )
1223:FreeRTOS/stream_buffer.c ****     {
1224:FreeRTOS/stream_buffer.c ****         xTail -= pxStreamBuffer->xLength;
1225:FreeRTOS/stream_buffer.c ****     }
1226:FreeRTOS/stream_buffer.c **** 
1227:FreeRTOS/stream_buffer.c ****     return xTail;
1228:FreeRTOS/stream_buffer.c **** }
1229:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1230:FreeRTOS/stream_buffer.c **** 
1231:FreeRTOS/stream_buffer.c **** static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
ARM GAS  /tmp/ccYBDQMR.s 			page 23


1232:FreeRTOS/stream_buffer.c **** {
  25              		.loc 1 1232 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1233:FreeRTOS/stream_buffer.c **** /* Returns the distance between xTail and xHead. */
1234:FreeRTOS/stream_buffer.c ****     size_t xCount;
1235:FreeRTOS/stream_buffer.c **** 
1236:FreeRTOS/stream_buffer.c ****     xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
  31              		.loc 1 1236 0
  32 0000 8268     		ldr	r2, [r0, #8]
  33 0002 4368     		ldr	r3, [r0, #4]
  34 0004 1344     		add	r3, r3, r2
  35              	.LVL1:
1237:FreeRTOS/stream_buffer.c ****     xCount -= pxStreamBuffer->xTail;
  36              		.loc 1 1237 0
  37 0006 0068     		ldr	r0, [r0]
  38              	.LVL2:
  39 0008 181A     		subs	r0, r3, r0
  40              	.LVL3:
1238:FreeRTOS/stream_buffer.c **** 
1239:FreeRTOS/stream_buffer.c ****     if( xCount >= pxStreamBuffer->xLength )
  41              		.loc 1 1239 0
  42 000a 8242     		cmp	r2, r0
  43 000c 00D8     		bhi	.L1
1240:FreeRTOS/stream_buffer.c ****     {
1241:FreeRTOS/stream_buffer.c ****         xCount -= pxStreamBuffer->xLength;
  44              		.loc 1 1241 0
  45 000e 801A     		subs	r0, r0, r2
  46              	.LVL4:
  47              	.L1:
1242:FreeRTOS/stream_buffer.c ****     }
1243:FreeRTOS/stream_buffer.c ****     else
1244:FreeRTOS/stream_buffer.c ****     {
1245:FreeRTOS/stream_buffer.c ****         mtCOVERAGE_TEST_MARKER();
1246:FreeRTOS/stream_buffer.c ****     }
1247:FreeRTOS/stream_buffer.c **** 
1248:FreeRTOS/stream_buffer.c ****     return xCount;
1249:FreeRTOS/stream_buffer.c **** }
  48              		.loc 1 1249 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE24:
  53              		.section	.text.prvInitialiseNewStreamBuffer,"ax",%progbits
  54              		.align	1
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu softvfp
  60              	prvInitialiseNewStreamBuffer:
  61              	.LFB25:
1250:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
1251:FreeRTOS/stream_buffer.c **** 
1252:FreeRTOS/stream_buffer.c **** static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
1253:FreeRTOS/stream_buffer.c ****                                           uint8_t * const pucBuffer,
ARM GAS  /tmp/ccYBDQMR.s 			page 24


1254:FreeRTOS/stream_buffer.c ****                                           size_t xBufferSizeBytes,
1255:FreeRTOS/stream_buffer.c ****                                           size_t xTriggerLevelBytes,
1256:FreeRTOS/stream_buffer.c ****                                           uint8_t ucFlags )
1257:FreeRTOS/stream_buffer.c **** {
  62              		.loc 1 1257 0
  63              		.cfi_startproc
  64              		@ args = 4, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL5:
  67 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 24
  70              		.cfi_offset 3, -24
  71              		.cfi_offset 4, -20
  72              		.cfi_offset 5, -16
  73              		.cfi_offset 6, -12
  74              		.cfi_offset 7, -8
  75              		.cfi_offset 14, -4
  76 0002 0446     		mov	r4, r0
  77 0004 0D46     		mov	r5, r1
  78 0006 1746     		mov	r7, r2
  79 0008 1E46     		mov	r6, r3
  80              	.LVL6:
  81              	.LBB85:
1258:FreeRTOS/stream_buffer.c ****     /* Assert here is deliberately writing to the entire buffer to ensure it can
1259:FreeRTOS/stream_buffer.c ****      * be written to without generating exceptions, and is setting the buffer to a
1260:FreeRTOS/stream_buffer.c ****      * known value to assist in development/debugging. */
1261:FreeRTOS/stream_buffer.c ****     #if ( configASSERT_DEFINED == 1 )
1262:FreeRTOS/stream_buffer.c ****         {
1263:FreeRTOS/stream_buffer.c ****             /* The value written just has to be identifiable when looking at the
1264:FreeRTOS/stream_buffer.c ****              * memory.  Don't use 0xA5 as that is the stack fill value and could
1265:FreeRTOS/stream_buffer.c ****              * result in confusion as to what is actually being observed. */
1266:FreeRTOS/stream_buffer.c ****             const BaseType_t xWriteValue = 0x55;
1267:FreeRTOS/stream_buffer.c ****             configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer )
  82              		.loc 1 1267 0
  83 000a 5521     		movs	r1, #85
  84              	.LVL7:
  85 000c 2846     		mov	r0, r5
  86              	.LVL8:
  87 000e FFF7FEFF 		bl	memset
  88              	.LVL9:
  89 0012 8542     		cmp	r5, r0
  90 0014 08D0     		beq	.L4
  91              	.LBB86:
  92              	.LBB87:
  93              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
ARM GAS  /tmp/ccYBDQMR.s 			page 25


  12:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** 
  30:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/ARM_CM3/portmacro.h **** 
  33:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/ARM_CM3/portmacro.h ****         extern "C" {
  35:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  36:FreeRTOS/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/ARM_CM3/portmacro.h ****  *
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/ARM_CM3/portmacro.h ****  *
  43:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/ARM_CM3/portmacro.h ****  */
  46:FreeRTOS/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/ARM_CM3/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/ARM_CM3/portmacro.h ****     #else
  64:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
ARM GAS  /tmp/ccYBDQMR.s 			page 26


  69:FreeRTOS/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  71:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/ARM_CM3/portmacro.h **** 
  73:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/ARM_CM3/portmacro.h **** 
  80:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/ARM_CM3/portmacro.h ****     {                                                   \
  83:FreeRTOS/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/ARM_CM3/portmacro.h ****                                                         \
  86:FreeRTOS/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/ARM_CM3/portmacro.h ****     }
  91:FreeRTOS/ARM_CM3/portmacro.h **** 
  92:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/ARM_CM3/portmacro.h **** 
  98:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 122:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/ARM_CM3/portmacro.h **** 
 124:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
ARM GAS  /tmp/ccYBDQMR.s 			page 27


 126:FreeRTOS/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/ARM_CM3/portmacro.h **** 
 131:FreeRTOS/ARM_CM3/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/ARM_CM3/portmacro.h ****         {
 134:FreeRTOS/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/ARM_CM3/portmacro.h **** 
 136:FreeRTOS/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h ****             return ucReturn;
 139:FreeRTOS/ARM_CM3/portmacro.h ****         }
 140:FreeRTOS/ARM_CM3/portmacro.h **** 
 141:FreeRTOS/ARM_CM3/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/ARM_CM3/portmacro.h ****         #endif
 145:FreeRTOS/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/ARM_CM3/portmacro.h **** 
 152:FreeRTOS/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNOP()
 165:FreeRTOS/ARM_CM3/portmacro.h **** 
 166:FreeRTOS/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/ARM_CM3/portmacro.h **** 
 168:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 171:FreeRTOS/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:FreeRTOS/ARM_CM3/portmacro.h ****     {
 176:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:FreeRTOS/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 178:FreeRTOS/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:FreeRTOS/ARM_CM3/portmacro.h **** 
 182:FreeRTOS/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
ARM GAS  /tmp/ccYBDQMR.s 			page 28


 183:FreeRTOS/ARM_CM3/portmacro.h ****         {
 184:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 185:FreeRTOS/ARM_CM3/portmacro.h ****         }
 186:FreeRTOS/ARM_CM3/portmacro.h ****         else
 187:FreeRTOS/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 189:FreeRTOS/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h ****         return xReturn;
 192:FreeRTOS/ARM_CM3/portmacro.h ****     }
 193:FreeRTOS/ARM_CM3/portmacro.h **** 
 194:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 195:FreeRTOS/ARM_CM3/portmacro.h **** 
 196:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:FreeRTOS/ARM_CM3/portmacro.h ****     {
 198:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:FreeRTOS/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
  94              		.loc 2 200 0
  95              		.syntax unified
  96              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
  97 0016 4FF05003 			mov r3, #80												
  98 001a 83F31188 		msr basepri, r3											
  99 001e BFF36F8F 		isb														
 100 0022 BFF34F8F 		dsb														
 101              	
 102              	@ 0 "" 2
 103              	.LVL10:
 104              		.thumb
 105              		.syntax unified
 106              	.L5:
 107 0026 FEE7     		b	.L5
 108              	.L4:
 109              	.LBE87:
 110              	.LBE86:
 111              	.LBE85:
1268:FreeRTOS/stream_buffer.c ****         } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
1269:FreeRTOS/stream_buffer.c ****     #endif
1270:FreeRTOS/stream_buffer.c **** 
1271:FreeRTOS/stream_buffer.c ****     ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 mem
 112              		.loc 1 1271 0
 113 0028 2022     		movs	r2, #32
 114 002a 0021     		movs	r1, #0
 115 002c 2046     		mov	r0, r4
 116 002e FFF7FEFF 		bl	memset
 117              	.LVL11:
1272:FreeRTOS/stream_buffer.c ****     pxStreamBuffer->pucBuffer = pucBuffer;
 118              		.loc 1 1272 0
 119 0032 A561     		str	r5, [r4, #24]
1273:FreeRTOS/stream_buffer.c ****     pxStreamBuffer->xLength = xBufferSizeBytes;
 120              		.loc 1 1273 0
 121 0034 A760     		str	r7, [r4, #8]
1274:FreeRTOS/stream_buffer.c ****     pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 122              		.loc 1 1274 0
 123 0036 E660     		str	r6, [r4, #12]
1275:FreeRTOS/stream_buffer.c ****     pxStreamBuffer->ucFlags = ucFlags;
 124              		.loc 1 1275 0
ARM GAS  /tmp/ccYBDQMR.s 			page 29


 125 0038 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 126 003c 2377     		strb	r3, [r4, #28]
1276:FreeRTOS/stream_buffer.c **** }
 127              		.loc 1 1276 0
 128 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 129              		.cfi_endproc
 130              	.LFE25:
 132              		.section	.text.prvWriteBytesToBuffer,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	prvWriteBytesToBuffer:
 140              	.LFB22:
1145:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
 141              		.loc 1 1145 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL12:
1148:FreeRTOS/stream_buffer.c **** 
 146              		.loc 1 1148 0
 147 0000 42B9     		cbnz	r2, .L8
 148              	.LBB88:
 149              	.LBB89:
 150              		.loc 2 200 0
 151              		.syntax unified
 152              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 153 0002 4FF05003 			mov r3, #80												
 154 0006 83F31188 		msr basepri, r3											
 155 000a BFF36F8F 		isb														
 156 000e BFF34F8F 		dsb														
 157              	
 158              	@ 0 "" 2
 159              	.LVL13:
 160              		.thumb
 161              		.syntax unified
 162              	.L9:
 163 0012 FEE7     		b	.L9
 164              	.LVL14:
 165              	.L8:
 166              	.LBE89:
 167              	.LBE88:
1145:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
 168              		.loc 1 1145 0
 169 0014 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 170              	.LCFI1:
 171              		.cfi_def_cfa_offset 24
 172              		.cfi_offset 4, -24
 173              		.cfi_offset 5, -20
 174              		.cfi_offset 6, -16
 175              		.cfi_offset 7, -12
 176              		.cfi_offset 8, -8
 177              		.cfi_offset 14, -4
 178 0018 1446     		mov	r4, r2
1153:FreeRTOS/stream_buffer.c **** 
ARM GAS  /tmp/ccYBDQMR.s 			page 30


 179              		.loc 1 1153 0
 180 001a 8268     		ldr	r2, [r0, #8]
 181              	.LVL15:
 182 001c D61A     		subs	r6, r2, r3
 183 001e A642     		cmp	r6, r4
 184 0020 28BF     		it	cs
 185 0022 2646     		movcs	r6, r4
 186              	.LVL16:
1156:FreeRTOS/stream_buffer.c ****     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucDa
 187              		.loc 1 1156 0
 188 0024 9D19     		adds	r5, r3, r6
 189 0026 AA42     		cmp	r2, r5
 190 0028 08D2     		bcs	.L10
 191              	.LBB90:
 192              	.LBB91:
 193              		.loc 2 200 0
 194              		.syntax unified
 195              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 196 002a 4FF05003 			mov r3, #80												
 197 002e 83F31188 		msr basepri, r3											
 198 0032 BFF36F8F 		isb														
 199 0036 BFF34F8F 		dsb														
 200              	
 201              	@ 0 "" 2
 202              	.LVL17:
 203              		.thumb
 204              		.syntax unified
 205              	.L11:
 206 003a FEE7     		b	.L11
 207              	.LVL18:
 208              	.L10:
 209 003c 1F46     		mov	r7, r3
 210 003e 8846     		mov	r8, r1
 211 0040 0546     		mov	r5, r0
 212              	.LBE91:
 213              	.LBE90:
1157:FreeRTOS/stream_buffer.c **** 
 214              		.loc 1 1157 0
 215 0042 8069     		ldr	r0, [r0, #24]
 216              	.LVL19:
 217 0044 3246     		mov	r2, r6
 218 0046 1844     		add	r0, r0, r3
 219 0048 FFF7FEFF 		bl	memcpy
 220              	.LVL20:
1161:FreeRTOS/stream_buffer.c ****     {
 221              		.loc 1 1161 0
 222 004c B442     		cmp	r4, r6
 223 004e 11D9     		bls	.L12
1164:FreeRTOS/stream_buffer.c ****         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstL
 224              		.loc 1 1164 0
 225 0050 A21B     		subs	r2, r4, r6
 226 0052 AB68     		ldr	r3, [r5, #8]
 227 0054 9A42     		cmp	r2, r3
 228 0056 08D9     		bls	.L13
 229              	.LBB92:
 230              	.LBB93:
 231              		.loc 2 200 0
ARM GAS  /tmp/ccYBDQMR.s 			page 31


 232              		.syntax unified
 233              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 234 0058 4FF05003 			mov r3, #80												
 235 005c 83F31188 		msr basepri, r3											
 236 0060 BFF36F8F 		isb														
 237 0064 BFF34F8F 		dsb														
 238              	
 239              	@ 0 "" 2
 240              	.LVL21:
 241              		.thumb
 242              		.syntax unified
 243              	.L14:
 244 0068 FEE7     		b	.L14
 245              	.L13:
 246              	.LBE93:
 247              	.LBE92:
1165:FreeRTOS/stream_buffer.c ****     }
 248              		.loc 1 1165 0
 249 006a 08EB0601 		add	r1, r8, r6
 250 006e A869     		ldr	r0, [r5, #24]
 251 0070 FFF7FEFF 		bl	memcpy
 252              	.LVL22:
 253              	.L12:
1172:FreeRTOS/stream_buffer.c **** 
 254              		.loc 1 1172 0
 255 0074 E019     		adds	r0, r4, r7
 256              	.LVL23:
1174:FreeRTOS/stream_buffer.c ****     {
 257              		.loc 1 1174 0
 258 0076 AB68     		ldr	r3, [r5, #8]
 259 0078 8342     		cmp	r3, r0
 260 007a 00D8     		bhi	.L7
1176:FreeRTOS/stream_buffer.c ****     }
 261              		.loc 1 1176 0
 262 007c C01A     		subs	r0, r0, r3
 263              	.LVL24:
 264              	.L7:
1184:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 265              		.loc 1 1184 0
 266 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 267              		.cfi_endproc
 268              	.LFE22:
 270              		.section	.text.prvWriteMessageToBuffer,"ax",%progbits
 271              		.align	1
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu softvfp
 277              	prvWriteMessageToBuffer:
 278              	.LFB13:
 729:FreeRTOS/stream_buffer.c ****     size_t xNextHead = pxStreamBuffer->xHead;
 279              		.loc 1 729 0
 280              		.cfi_startproc
 281              		@ args = 4, pretend = 0, frame = 8
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL25:
 284 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccYBDQMR.s 			page 32


 285              	.LCFI2:
 286              		.cfi_def_cfa_offset 12
 287              		.cfi_offset 4, -12
 288              		.cfi_offset 5, -8
 289              		.cfi_offset 14, -4
 290 0002 83B0     		sub	sp, sp, #12
 291              	.LCFI3:
 292              		.cfi_def_cfa_offset 24
 293 0004 0446     		mov	r4, r0
 294 0006 0D46     		mov	r5, r1
 295 0008 0192     		str	r2, [sp, #4]
 730:FreeRTOS/stream_buffer.c **** 
 296              		.loc 1 730 0
 297 000a 4068     		ldr	r0, [r0, #4]
 298              	.LVL26:
 732:FreeRTOS/stream_buffer.c ****     {
 299              		.loc 1 732 0
 300 000c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 301              	.LVL27:
 302 000e 12F0010F 		tst	r2, #1
 303 0012 0DD0     		beq	.L19
 736:FreeRTOS/stream_buffer.c ****         {
 304              		.loc 1 736 0
 305 0014 069A     		ldr	r2, [sp, #24]
 306 0016 9342     		cmp	r3, r2
 307 0018 02D2     		bcs	.L24
 746:FreeRTOS/stream_buffer.c ****         }
 308              		.loc 1 746 0
 309 001a 0023     		movs	r3, #0
 310              	.LVL28:
 311 001c 0193     		str	r3, [sp, #4]
 312              	.LVL29:
 313 001e 0CE0     		b	.L21
 314              	.LVL30:
 315              	.L24:
 741:FreeRTOS/stream_buffer.c ****         }
 316              		.loc 1 741 0
 317 0020 0346     		mov	r3, r0
 318              	.LVL31:
 319 0022 0422     		movs	r2, #4
 320 0024 0DEB0201 		add	r1, sp, r2
 321              	.LVL32:
 322 0028 2046     		mov	r0, r4
 323              	.LVL33:
 324 002a FFF7FEFF 		bl	prvWriteBytesToBuffer
 325              	.LVL34:
 326 002e 04E0     		b	.L21
 327              	.LVL35:
 328              	.L19:
 754:FreeRTOS/stream_buffer.c ****     }
 329              		.loc 1 754 0
 330 0030 019A     		ldr	r2, [sp, #4]
 331 0032 9A42     		cmp	r2, r3
 332 0034 28BF     		it	cs
 333 0036 1A46     		movcs	r2, r3
 334 0038 0192     		str	r2, [sp, #4]
 335              	.LVL36:
ARM GAS  /tmp/ccYBDQMR.s 			page 33


 336              	.L21:
 757:FreeRTOS/stream_buffer.c ****     {
 337              		.loc 1 757 0
 338 003a 019A     		ldr	r2, [sp, #4]
 339 003c 12B9     		cbnz	r2, .L25
 340              	.LVL37:
 341              	.L22:
 764:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 342              		.loc 1 764 0
 343 003e 0198     		ldr	r0, [sp, #4]
 344 0040 03B0     		add	sp, sp, #12
 345              	.LCFI4:
 346              		.cfi_remember_state
 347              		.cfi_def_cfa_offset 12
 348              		@ sp needed
 349 0042 30BD     		pop	{r4, r5, pc}
 350              	.LVL38:
 351              	.L25:
 352              	.LCFI5:
 353              		.cfi_restore_state
 760:FreeRTOS/stream_buffer.c ****     }
 354              		.loc 1 760 0
 355 0044 0346     		mov	r3, r0
 356 0046 2946     		mov	r1, r5
 357 0048 2046     		mov	r0, r4
 358              	.LVL39:
 359 004a FFF7FEFF 		bl	prvWriteBytesToBuffer
 360              	.LVL40:
 361 004e 6060     		str	r0, [r4, #4]
 362 0050 F5E7     		b	.L22
 363              		.cfi_endproc
 364              	.LFE13:
 366              		.section	.text.prvReadBytesFromBuffer,"ax",%progbits
 367              		.align	1
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	prvReadBytesFromBuffer:
 374              	.LFB23:
1191:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
 375              		.loc 1 1191 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL41:
1194:FreeRTOS/stream_buffer.c **** 
 380              		.loc 1 1194 0
 381 0000 42B9     		cbnz	r2, .L27
 382              	.LBB94:
 383              	.LBB95:
 384              		.loc 2 200 0
 385              		.syntax unified
 386              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 387 0002 4FF05003 			mov r3, #80												
 388 0006 83F31188 		msr basepri, r3											
 389 000a BFF36F8F 		isb														
ARM GAS  /tmp/ccYBDQMR.s 			page 34


 390 000e BFF34F8F 		dsb														
 391              	
 392              	@ 0 "" 2
 393              	.LVL42:
 394              		.thumb
 395              		.syntax unified
 396              	.L28:
 397 0012 FEE7     		b	.L28
 398              	.LVL43:
 399              	.L27:
 400              	.LBE95:
 401              	.LBE94:
1191:FreeRTOS/stream_buffer.c ****     size_t xFirstLength;
 402              		.loc 1 1191 0
 403 0014 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 404              	.LCFI6:
 405              		.cfi_def_cfa_offset 24
 406              		.cfi_offset 4, -24
 407              		.cfi_offset 5, -20
 408              		.cfi_offset 6, -16
 409              		.cfi_offset 7, -12
 410              		.cfi_offset 8, -8
 411              		.cfi_offset 14, -4
 412 0018 1446     		mov	r4, r2
1199:FreeRTOS/stream_buffer.c **** 
 413              		.loc 1 1199 0
 414 001a 8268     		ldr	r2, [r0, #8]
 415              	.LVL44:
 416 001c D51A     		subs	r5, r2, r3
 417 001e A542     		cmp	r5, r4
 418 0020 28BF     		it	cs
 419 0022 2546     		movcs	r5, r4
 420              	.LVL45:
1203:FreeRTOS/stream_buffer.c ****     configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 421              		.loc 1 1203 0
 422 0024 AC42     		cmp	r4, r5
 423 0026 08D2     		bcs	.L29
 424              	.LBB96:
 425              	.LBB97:
 426              		.loc 2 200 0
 427              		.syntax unified
 428              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 429 0028 4FF05003 			mov r3, #80												
 430 002c 83F31188 		msr basepri, r3											
 431 0030 BFF36F8F 		isb														
 432 0034 BFF34F8F 		dsb														
 433              	
 434              	@ 0 "" 2
 435              	.LVL46:
 436              		.thumb
 437              		.syntax unified
 438              	.L30:
 439 0038 FEE7     		b	.L30
 440              	.LVL47:
 441              	.L29:
 442              	.LBE97:
 443              	.LBE96:
ARM GAS  /tmp/ccYBDQMR.s 			page 35


1204:FreeRTOS/stream_buffer.c ****     ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), 
 444              		.loc 1 1204 0
 445 003a 5E19     		adds	r6, r3, r5
 446 003c B242     		cmp	r2, r6
 447 003e 08D2     		bcs	.L31
 448              	.LBB98:
 449              	.LBB99:
 450              		.loc 2 200 0
 451              		.syntax unified
 452              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 453 0040 4FF05003 			mov r3, #80												
 454 0044 83F31188 		msr basepri, r3											
 455 0048 BFF36F8F 		isb														
 456 004c BFF34F8F 		dsb														
 457              	
 458              	@ 0 "" 2
 459              	.LVL48:
 460              		.thumb
 461              		.syntax unified
 462              	.L32:
 463 0050 FEE7     		b	.L32
 464              	.LVL49:
 465              	.L31:
 466 0052 1F46     		mov	r7, r3
 467 0054 8846     		mov	r8, r1
 468 0056 0646     		mov	r6, r0
 469              	.LBE99:
 470              	.LBE98:
1205:FreeRTOS/stream_buffer.c **** 
 471              		.loc 1 1205 0
 472 0058 8169     		ldr	r1, [r0, #24]
 473              	.LVL50:
 474 005a 2A46     		mov	r2, r5
 475 005c 1944     		add	r1, r1, r3
 476 005e 4046     		mov	r0, r8
 477              	.LVL51:
 478 0060 FFF7FEFF 		bl	memcpy
 479              	.LVL52:
1209:FreeRTOS/stream_buffer.c ****     {
 480              		.loc 1 1209 0
 481 0064 AC42     		cmp	r4, r5
 482 0066 05D9     		bls	.L33
1212:FreeRTOS/stream_buffer.c ****     }
 483              		.loc 1 1212 0
 484 0068 621B     		subs	r2, r4, r5
 485 006a B169     		ldr	r1, [r6, #24]
 486 006c 08EB0500 		add	r0, r8, r5
 487 0070 FFF7FEFF 		bl	memcpy
 488              	.LVL53:
 489              	.L33:
1220:FreeRTOS/stream_buffer.c **** 
 490              		.loc 1 1220 0
 491 0074 E019     		adds	r0, r4, r7
 492              	.LVL54:
1222:FreeRTOS/stream_buffer.c ****     {
 493              		.loc 1 1222 0
 494 0076 B368     		ldr	r3, [r6, #8]
ARM GAS  /tmp/ccYBDQMR.s 			page 36


 495 0078 8342     		cmp	r3, r0
 496 007a 00D8     		bhi	.L26
1224:FreeRTOS/stream_buffer.c ****     }
 497              		.loc 1 1224 0
 498 007c C01A     		subs	r0, r0, r3
 499              	.LVL55:
 500              	.L26:
1228:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 501              		.loc 1 1228 0
 502 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 503              		.cfi_endproc
 504              	.LFE23:
 506              		.section	.text.prvReadMessageFromBuffer,"ax",%progbits
 507              		.align	1
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.fpu softvfp
 513              	prvReadMessageFromBuffer:
 514              	.LFB17:
 972:FreeRTOS/stream_buffer.c ****     size_t xCount, xNextMessageLength;
 515              		.loc 1 972 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              	.LVL56:
 520 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 521              	.LCFI7:
 522              		.cfi_def_cfa_offset 20
 523              		.cfi_offset 4, -20
 524              		.cfi_offset 5, -16
 525              		.cfi_offset 6, -12
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI8:
 530              		.cfi_def_cfa_offset 32
 531 0004 0546     		mov	r5, r0
 532 0006 0F46     		mov	r7, r1
 533 0008 1646     		mov	r6, r2
 534 000a 1C46     		mov	r4, r3
 975:FreeRTOS/stream_buffer.c **** 
 535              		.loc 1 975 0
 536 000c 0368     		ldr	r3, [r0]
 537              	.LVL57:
 977:FreeRTOS/stream_buffer.c ****     {
 538              		.loc 1 977 0
 539 000e 027F     		ldrb	r2, [r0, #28]	@ zero_extendqisi2
 540              	.LVL58:
 541 0010 12F0010F 		tst	r2, #1
 542 0014 06D1     		bne	.L42
 543              	.LVL59:
 544              	.L38:
1008:FreeRTOS/stream_buffer.c **** 
 545              		.loc 1 1008 0
 546 0016 B442     		cmp	r4, r6
 547 0018 28BF     		it	cs
ARM GAS  /tmp/ccYBDQMR.s 			page 37


 548 001a 3446     		movcs	r4, r6
 549              	.LVL60:
1010:FreeRTOS/stream_buffer.c ****     {
 550              		.loc 1 1010 0
 551 001c 84B9     		cbnz	r4, .L43
 552              	.LVL61:
 553              	.L37:
1017:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 554              		.loc 1 1017 0
 555 001e 2046     		mov	r0, r4
 556 0020 03B0     		add	sp, sp, #12
 557              	.LCFI9:
 558              		.cfi_remember_state
 559              		.cfi_def_cfa_offset 20
 560              		@ sp needed
 561 0022 F0BD     		pop	{r4, r5, r6, r7, pc}
 562              	.LVL62:
 563              	.L42:
 564              	.LCFI10:
 565              		.cfi_restore_state
 981:FreeRTOS/stream_buffer.c ****         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 566              		.loc 1 981 0
 567 0024 0422     		movs	r2, #4
 568 0026 0DEB0201 		add	r1, sp, r2
 569              	.LVL63:
 570 002a FFF7FEFF 		bl	prvReadBytesFromBuffer
 571              	.LVL64:
 572 002e 0346     		mov	r3, r0
 573              	.LVL65:
 982:FreeRTOS/stream_buffer.c **** 
 574              		.loc 1 982 0
 575 0030 019A     		ldr	r2, [sp, #4]
 576              	.LVL66:
 986:FreeRTOS/stream_buffer.c **** 
 577              		.loc 1 986 0
 578 0032 043C     		subs	r4, r4, #4
 579              	.LVL67:
 990:FreeRTOS/stream_buffer.c ****         {
 580              		.loc 1 990 0
 581 0034 9642     		cmp	r6, r2
 582 0036 01D3     		bcc	.L40
 982:FreeRTOS/stream_buffer.c **** 
 583              		.loc 1 982 0
 584 0038 1646     		mov	r6, r2
 585              	.LVL68:
 586 003a ECE7     		b	.L38
 587              	.LVL69:
 588              	.L40:
 993:FreeRTOS/stream_buffer.c ****         }
 589              		.loc 1 993 0
 590 003c 0026     		movs	r6, #0
 591              	.LVL70:
 592 003e EAE7     		b	.L38
 593              	.LVL71:
 594              	.L43:
1013:FreeRTOS/stream_buffer.c ****     }
 595              		.loc 1 1013 0
ARM GAS  /tmp/ccYBDQMR.s 			page 38


 596 0040 2246     		mov	r2, r4
 597 0042 3946     		mov	r1, r7
 598 0044 2846     		mov	r0, r5
 599 0046 FFF7FEFF 		bl	prvReadBytesFromBuffer
 600              	.LVL72:
 601 004a 2860     		str	r0, [r5]
1016:FreeRTOS/stream_buffer.c **** }
 602              		.loc 1 1016 0
 603 004c E7E7     		b	.L37
 604              		.cfi_endproc
 605              	.LFE17:
 607              		.section	.text.xStreamBufferGenericCreate,"ax",%progbits
 608              		.align	1
 609              		.global	xStreamBufferGenericCreate
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu softvfp
 615              	xStreamBufferGenericCreate:
 616              	.LFB5:
 238:FreeRTOS/stream_buffer.c ****         uint8_t * pucAllocatedMemory;
 617              		.loc 1 238 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              	.LVL73:
 622 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 623              	.LCFI11:
 624              		.cfi_def_cfa_offset 20
 625              		.cfi_offset 4, -20
 626              		.cfi_offset 5, -16
 627              		.cfi_offset 6, -12
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 83B0     		sub	sp, sp, #12
 631              	.LCFI12:
 632              		.cfi_def_cfa_offset 32
 633 0004 0D46     		mov	r5, r1
 246:FreeRTOS/stream_buffer.c ****         {
 634              		.loc 1 246 0
 635 0006 012A     		cmp	r2, #1
 636 0008 09D0     		beq	.L58
 637              	.LVL74:
 256:FreeRTOS/stream_buffer.c ****         }
 638              		.loc 1 256 0
 639 000a F8B9     		cbnz	r0, .L54
 640              	.LBB100:
 641              	.LBB101:
 642              		.loc 2 200 0
 643              		.syntax unified
 644              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 645 000c 4FF05003 			mov r3, #80												
 646 0010 83F31188 		msr basepri, r3											
 647 0014 BFF36F8F 		isb														
 648 0018 BFF34F8F 		dsb														
 649              	
 650              	@ 0 "" 2
ARM GAS  /tmp/ccYBDQMR.s 			page 39


 651              	.LVL75:
 652              		.thumb
 653              		.syntax unified
 654              	.L48:
 655 001c FEE7     		b	.L48
 656              	.LVL76:
 657              	.L58:
 658              	.LBE101:
 659              	.LBE100:
 250:FreeRTOS/stream_buffer.c ****         }
 660              		.loc 1 250 0
 661 001e 0428     		cmp	r0, #4
 662 0020 08D8     		bhi	.L53
 663              	.LBB102:
 664              	.LBB103:
 665              		.loc 2 200 0
 666              		.syntax unified
 667              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 668 0022 4FF05003 			mov r3, #80												
 669 0026 83F31188 		msr basepri, r3											
 670 002a BFF36F8F 		isb														
 671 002e BFF34F8F 		dsb														
 672              	
 673              	@ 0 "" 2
 674              	.LVL77:
 675              		.thumb
 676              		.syntax unified
 677              	.L47:
 678 0032 FEE7     		b	.L47
 679              	.L53:
 680              	.LBE103:
 681              	.LBE102:
 249:FreeRTOS/stream_buffer.c ****             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 682              		.loc 1 249 0
 683 0034 0126     		movs	r6, #1
 684              	.LVL78:
 685              	.L46:
 259:FreeRTOS/stream_buffer.c **** 
 686              		.loc 1 259 0
 687 0036 A842     		cmp	r0, r5
 688 0038 0AD2     		bcs	.L49
 689              	.LBB104:
 690              	.LBB105:
 691              		.loc 2 200 0
 692              		.syntax unified
 693              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 694 003a 4FF05003 			mov r3, #80												
 695 003e 83F31188 		msr basepri, r3											
 696 0042 BFF36F8F 		isb														
 697 0046 BFF34F8F 		dsb														
 698              	
 699              	@ 0 "" 2
 700              	.LVL79:
 701              		.thumb
 702              		.syntax unified
 703              	.L50:
 704 004a FEE7     		b	.L50
ARM GAS  /tmp/ccYBDQMR.s 			page 40


 705              	.LVL80:
 706              	.L54:
 707              	.LBE105:
 708              	.LBE104:
 255:FreeRTOS/stream_buffer.c ****             configASSERT( xBufferSizeBytes > 0 );
 709              		.loc 1 255 0
 710 004c 0026     		movs	r6, #0
 711 004e F2E7     		b	.L46
 712              	.LVL81:
 713              	.L49:
 263:FreeRTOS/stream_buffer.c ****         {
 714              		.loc 1 263 0
 715 0050 05B9     		cbnz	r5, .L51
 265:FreeRTOS/stream_buffer.c ****         }
 716              		.loc 1 265 0
 717 0052 0125     		movs	r5, #1
 718              	.L51:
 719              	.LVL82:
 276:FreeRTOS/stream_buffer.c ****         {
 720              		.loc 1 276 0
 721 0054 10F1220F 		cmn	r0, #34
 722 0058 0FD8     		bhi	.L56
 278:FreeRTOS/stream_buffer.c ****             pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffe
 723              		.loc 1 278 0
 724 005a 471C     		adds	r7, r0, #1
 725              	.LVL83:
 279:FreeRTOS/stream_buffer.c ****         }
 726              		.loc 1 279 0
 727 005c 2130     		adds	r0, r0, #33
 728 005e FFF7FEFF 		bl	pvPortMalloc
 729              	.LVL84:
 286:FreeRTOS/stream_buffer.c ****         {
 730              		.loc 1 286 0
 731 0062 0446     		mov	r4, r0
 732 0064 30B1     		cbz	r0, .L44
 288:FreeRTOS/stream_buffer.c ****                                           pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage
 733              		.loc 1 288 0
 734 0066 0096     		str	r6, [sp]
 735 0068 2B46     		mov	r3, r5
 736 006a 3A46     		mov	r2, r7
 737 006c 00F12001 		add	r1, r0, #32
 738 0070 FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 739              	.LVL85:
 740              	.L44:
 302:FreeRTOS/stream_buffer.c **** 
 741              		.loc 1 302 0
 742 0074 2046     		mov	r0, r4
 743 0076 03B0     		add	sp, sp, #12
 744              	.LCFI13:
 745              		.cfi_remember_state
 746              		.cfi_def_cfa_offset 20
 747              		@ sp needed
 748 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 749              	.LVL86:
 750              	.L56:
 751              	.LCFI14:
 752              		.cfi_restore_state
ARM GAS  /tmp/ccYBDQMR.s 			page 41


 283:FreeRTOS/stream_buffer.c ****         }
 753              		.loc 1 283 0
 754 007a 0024     		movs	r4, #0
 301:FreeRTOS/stream_buffer.c ****     }
 755              		.loc 1 301 0
 756 007c FAE7     		b	.L44
 757              		.cfi_endproc
 758              	.LFE5:
 760              		.section	.text.vStreamBufferDelete,"ax",%progbits
 761              		.align	1
 762              		.global	vStreamBufferDelete
 763              		.syntax unified
 764              		.thumb
 765              		.thumb_func
 766              		.fpu softvfp
 768              	vStreamBufferDelete:
 769              	.LFB6:
 386:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 770              		.loc 1 386 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              	.LVL87:
 775 0000 08B5     		push	{r3, lr}
 776              	.LCFI15:
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 3, -8
 779              		.cfi_offset 14, -4
 780              	.LVL88:
 389:FreeRTOS/stream_buffer.c **** 
 781              		.loc 1 389 0
 782 0002 30B1     		cbz	r0, .L65
 393:FreeRTOS/stream_buffer.c ****     {
 783              		.loc 1 393 0
 784 0004 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 785 0006 13F0020F 		tst	r3, #2
 786 000a 0BD1     		bne	.L62
 399:FreeRTOS/stream_buffer.c ****             }
 787              		.loc 1 399 0
 788 000c FFF7FEFF 		bl	vPortFree
 789              	.LVL89:
 790              	.L59:
 415:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 791              		.loc 1 415 0
 792 0010 08BD     		pop	{r3, pc}
 793              	.LVL90:
 794              	.L65:
 795              	.LBB106:
 796              	.LBB107:
 797              		.loc 2 200 0
 798              		.syntax unified
 799              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 800 0012 4FF05003 			mov r3, #80												
 801 0016 83F31188 		msr basepri, r3											
 802 001a BFF36F8F 		isb														
 803 001e BFF34F8F 		dsb														
 804              	
ARM GAS  /tmp/ccYBDQMR.s 			page 42


 805              	@ 0 "" 2
 806              	.LVL91:
 807              		.thumb
 808              		.syntax unified
 809              	.L61:
 810 0022 FEE7     		b	.L61
 811              	.L62:
 812              	.LBE107:
 813              	.LBE106:
 413:FreeRTOS/stream_buffer.c ****     }
 814              		.loc 1 413 0
 815 0024 2022     		movs	r2, #32
 816 0026 0021     		movs	r1, #0
 817 0028 FFF7FEFF 		bl	memset
 818              	.LVL92:
 415:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 819              		.loc 1 415 0
 820 002c F0E7     		b	.L59
 821              		.cfi_endproc
 822              	.LFE6:
 824              		.section	.text.xStreamBufferReset,"ax",%progbits
 825              		.align	1
 826              		.global	xStreamBufferReset
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu softvfp
 832              	xStreamBufferReset:
 833              	.LFB7:
 419:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 834              		.loc 1 419 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              	.LVL93:
 427:FreeRTOS/stream_buffer.c **** 
 839              		.loc 1 427 0
 840 0000 40B9     		cbnz	r0, .L67
 841              	.LBB108:
 842              	.LBB109:
 843              		.loc 2 200 0
 844              		.syntax unified
 845              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 846 0002 4FF05003 			mov r3, #80												
 847 0006 83F31188 		msr basepri, r3											
 848 000a BFF36F8F 		isb														
 849 000e BFF34F8F 		dsb														
 850              	
 851              	@ 0 "" 2
 852              	.LVL94:
 853              		.thumb
 854              		.syntax unified
 855              	.L68:
 856 0012 FEE7     		b	.L68
 857              	.L67:
 858              	.LBE109:
 859              	.LBE108:
ARM GAS  /tmp/ccYBDQMR.s 			page 43


 419:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 860              		.loc 1 419 0
 861 0014 10B5     		push	{r4, lr}
 862              	.LCFI16:
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 4, -8
 865              		.cfi_offset 14, -4
 866 0016 82B0     		sub	sp, sp, #8
 867              	.LCFI17:
 868              		.cfi_def_cfa_offset 16
 869 0018 0446     		mov	r4, r0
 438:FreeRTOS/stream_buffer.c ****     {
 870              		.loc 1 438 0
 871 001a FFF7FEFF 		bl	vPortEnterCritical
 872              	.LVL95:
 440:FreeRTOS/stream_buffer.c ****         {
 873              		.loc 1 440 0
 874 001e 2369     		ldr	r3, [r4, #16]
 875 0020 2BB1     		cbz	r3, .L74
 421:FreeRTOS/stream_buffer.c **** 
 876              		.loc 1 421 0
 877 0022 0024     		movs	r4, #0
 878              	.LVL96:
 879              	.L69:
 461:FreeRTOS/stream_buffer.c **** 
 880              		.loc 1 461 0
 881 0024 FFF7FEFF 		bl	vPortExitCritical
 882              	.LVL97:
 464:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 883              		.loc 1 464 0
 884 0028 2046     		mov	r0, r4
 885 002a 02B0     		add	sp, sp, #8
 886              	.LCFI18:
 887              		.cfi_remember_state
 888              		.cfi_def_cfa_offset 8
 889              		@ sp needed
 890 002c 10BD     		pop	{r4, pc}
 891              	.LVL98:
 892              	.L74:
 893              	.LCFI19:
 894              		.cfi_restore_state
 442:FreeRTOS/stream_buffer.c ****             {
 895              		.loc 1 442 0
 896 002e 6369     		ldr	r3, [r4, #20]
 897 0030 4BB9     		cbnz	r3, .L71
 444:FreeRTOS/stream_buffer.c ****                                               pxStreamBuffer->pucBuffer,
 898              		.loc 1 444 0
 899 0032 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 900 0034 0093     		str	r3, [sp]
 901 0036 E368     		ldr	r3, [r4, #12]
 902 0038 A268     		ldr	r2, [r4, #8]
 903 003a A169     		ldr	r1, [r4, #24]
 904 003c 2046     		mov	r0, r4
 905 003e FFF7FEFF 		bl	prvInitialiseNewStreamBuffer
 906              	.LVL99:
 449:FreeRTOS/stream_buffer.c **** 
 907              		.loc 1 449 0
ARM GAS  /tmp/ccYBDQMR.s 			page 44


 908 0042 0124     		movs	r4, #1
 909              	.LVL100:
 910 0044 EEE7     		b	.L69
 911              	.LVL101:
 912              	.L71:
 421:FreeRTOS/stream_buffer.c **** 
 913              		.loc 1 421 0
 914 0046 0024     		movs	r4, #0
 915              	.LVL102:
 916 0048 ECE7     		b	.L69
 917              		.cfi_endproc
 918              	.LFE7:
 920              		.section	.text.xStreamBufferSetTriggerLevel,"ax",%progbits
 921              		.align	1
 922              		.global	xStreamBufferSetTriggerLevel
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu softvfp
 928              	xStreamBufferSetTriggerLevel:
 929              	.LFB8:
 469:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 930              		.loc 1 469 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL103:
 473:FreeRTOS/stream_buffer.c **** 
 936              		.loc 1 473 0
 937 0000 0346     		mov	r3, r0
 938 0002 38B1     		cbz	r0, .L82
 476:FreeRTOS/stream_buffer.c ****     {
 939              		.loc 1 476 0
 940 0004 01B9     		cbnz	r1, .L78
 478:FreeRTOS/stream_buffer.c ****     }
 941              		.loc 1 478 0
 942 0006 0121     		movs	r1, #1
 943              	.LVL104:
 944              	.L78:
 483:FreeRTOS/stream_buffer.c ****     {
 945              		.loc 1 483 0
 946 0008 9A68     		ldr	r2, [r3, #8]
 947 000a 8A42     		cmp	r2, r1
 948 000c 0BD9     		bls	.L81
 485:FreeRTOS/stream_buffer.c ****         xReturn = pdPASS;
 949              		.loc 1 485 0
 950 000e D960     		str	r1, [r3, #12]
 951              	.LVL105:
 486:FreeRTOS/stream_buffer.c ****     }
 952              		.loc 1 486 0
 953 0010 0120     		movs	r0, #1
 954              	.LVL106:
 955 0012 7047     		bx	lr
 956              	.LVL107:
 957              	.L82:
 958              	.LBB110:
ARM GAS  /tmp/ccYBDQMR.s 			page 45


 959              	.LBB111:
 960              		.loc 2 200 0
 961              		.syntax unified
 962              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 963 0014 4FF05003 			mov r3, #80												
 964 0018 83F31188 		msr basepri, r3											
 965 001c BFF36F8F 		isb														
 966 0020 BFF34F8F 		dsb														
 967              	
 968              	@ 0 "" 2
 969              	.LVL108:
 970              		.thumb
 971              		.syntax unified
 972              	.L77:
 973 0024 FEE7     		b	.L77
 974              	.L81:
 975              	.LBE111:
 976              	.LBE110:
 490:FreeRTOS/stream_buffer.c ****     }
 977              		.loc 1 490 0
 978 0026 0020     		movs	r0, #0
 979              	.LVL109:
 494:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 980              		.loc 1 494 0
 981 0028 7047     		bx	lr
 982              		.cfi_endproc
 983              	.LFE8:
 985              		.section	.text.xStreamBufferSpacesAvailable,"ax",%progbits
 986              		.align	1
 987              		.global	xStreamBufferSpacesAvailable
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu softvfp
 993              	xStreamBufferSpacesAvailable:
 994              	.LFB9:
 498:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 995              		.loc 1 498 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 1000              	.LVL110:
 503:FreeRTOS/stream_buffer.c **** 
 1001              		.loc 1 503 0
 1002 0000 0346     		mov	r3, r0
 1003 0002 78B1     		cbz	r0, .L89
 498:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1004              		.loc 1 498 0
 1005 0004 10B4     		push	{r4}
 1006              	.LCFI20:
 1007              		.cfi_def_cfa_offset 4
 1008              		.cfi_offset 4, -4
 1009              	.LVL111:
 1010              	.L84:
 510:FreeRTOS/stream_buffer.c ****         xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 1011              		.loc 1 510 0 discriminator 1
ARM GAS  /tmp/ccYBDQMR.s 			page 46


 1012 0006 1968     		ldr	r1, [r3]
 1013              	.LVL112:
 511:FreeRTOS/stream_buffer.c ****         xSpace -= pxStreamBuffer->xHead;
 1014              		.loc 1 511 0 discriminator 1
 1015 0008 9A68     		ldr	r2, [r3, #8]
 1016 000a 1868     		ldr	r0, [r3]
 1017 000c 1044     		add	r0, r0, r2
 1018              	.LVL113:
 512:FreeRTOS/stream_buffer.c ****     } while( xOriginalTail != pxStreamBuffer->xTail );
 1019              		.loc 1 512 0 discriminator 1
 1020 000e 5C68     		ldr	r4, [r3, #4]
 1021 0010 001B     		subs	r0, r0, r4
 1022              	.LVL114:
 513:FreeRTOS/stream_buffer.c **** 
 1023              		.loc 1 513 0 discriminator 1
 1024 0012 1C68     		ldr	r4, [r3]
 1025 0014 8C42     		cmp	r4, r1
 1026 0016 F6D1     		bne	.L84
 515:FreeRTOS/stream_buffer.c **** 
 1027              		.loc 1 515 0
 1028 0018 0138     		subs	r0, r0, #1
 1029              	.LVL115:
 517:FreeRTOS/stream_buffer.c ****     {
 1030              		.loc 1 517 0
 1031 001a 8242     		cmp	r2, r0
 1032 001c 00D8     		bhi	.L83
 519:FreeRTOS/stream_buffer.c ****     }
 1033              		.loc 1 519 0
 1034 001e 801A     		subs	r0, r0, r2
 1035              	.LVL116:
 1036              	.L83:
 527:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1037              		.loc 1 527 0
 1038 0020 10BC     		pop	{r4}
 1039              	.LCFI21:
 1040              		.cfi_restore 4
 1041              		.cfi_def_cfa_offset 0
 1042 0022 7047     		bx	lr
 1043              	.LVL117:
 1044              	.L89:
 1045              	.LBB112:
 1046              	.LBB113:
 1047              		.loc 2 200 0
 1048              		.syntax unified
 1049              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1050 0024 4FF05003 			mov r3, #80												
 1051 0028 83F31188 		msr basepri, r3											
 1052 002c BFF36F8F 		isb														
 1053 0030 BFF34F8F 		dsb														
 1054              	
 1055              	@ 0 "" 2
 1056              	.LVL118:
 1057              		.thumb
 1058              		.syntax unified
 1059              	.L85:
 1060 0034 FEE7     		b	.L85
 1061              	.LBE113:
ARM GAS  /tmp/ccYBDQMR.s 			page 47


 1062              	.LBE112:
 1063              		.cfi_endproc
 1064              	.LFE9:
 1066              		.section	.text.xStreamBufferBytesAvailable,"ax",%progbits
 1067              		.align	1
 1068              		.global	xStreamBufferBytesAvailable
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu softvfp
 1074              	xStreamBufferBytesAvailable:
 1075              	.LFB10:
 531:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1076              		.loc 1 531 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080              	.LVL119:
 1081 0000 08B5     		push	{r3, lr}
 1082              	.LCFI22:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 3, -8
 1085              		.cfi_offset 14, -4
 1086              	.LVL120:
 535:FreeRTOS/stream_buffer.c **** 
 1087              		.loc 1 535 0
 1088 0002 40B9     		cbnz	r0, .L91
 1089              	.LBB114:
 1090              	.LBB115:
 1091              		.loc 2 200 0
 1092              		.syntax unified
 1093              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1094 0004 4FF05003 			mov r3, #80												
 1095 0008 83F31188 		msr basepri, r3											
 1096 000c BFF36F8F 		isb														
 1097 0010 BFF34F8F 		dsb														
 1098              	
 1099              	@ 0 "" 2
 1100              	.LVL121:
 1101              		.thumb
 1102              		.syntax unified
 1103              	.L92:
 1104 0014 FEE7     		b	.L92
 1105              	.L91:
 1106              	.LBE115:
 1107              	.LBE114:
 537:FreeRTOS/stream_buffer.c ****     return xReturn;
 1108              		.loc 1 537 0
 1109 0016 FFF7FEFF 		bl	prvBytesInBuffer
 1110              	.LVL122:
 539:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1111              		.loc 1 539 0
 1112 001a 08BD     		pop	{r3, pc}
 1113              		.cfi_endproc
 1114              	.LFE10:
 1116              		.section	.text.xStreamBufferSend,"ax",%progbits
 1117              		.align	1
ARM GAS  /tmp/ccYBDQMR.s 			page 48


 1118              		.global	xStreamBufferSend
 1119              		.syntax unified
 1120              		.thumb
 1121              		.thumb_func
 1122              		.fpu softvfp
 1124              	xStreamBufferSend:
 1125              	.LFB11:
 546:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1126              		.loc 1 546 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 16
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              	.LVL123:
 1131 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1132              	.LCFI23:
 1133              		.cfi_def_cfa_offset 28
 1134              		.cfi_offset 4, -28
 1135              		.cfi_offset 5, -24
 1136              		.cfi_offset 6, -20
 1137              		.cfi_offset 7, -16
 1138              		.cfi_offset 8, -12
 1139              		.cfi_offset 9, -8
 1140              		.cfi_offset 14, -4
 1141 0004 87B0     		sub	sp, sp, #28
 1142              	.LCFI24:
 1143              		.cfi_def_cfa_offset 56
 1144 0006 0393     		str	r3, [sp, #12]
 1145              	.LVL124:
 553:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1146              		.loc 1 553 0
 1147 0008 51B1     		cbz	r1, .L114
 1148 000a 8846     		mov	r8, r1
 554:FreeRTOS/stream_buffer.c **** 
 1149              		.loc 1 554 0
 1150 000c 88B9     		cbnz	r0, .L97
 1151              	.LBB116:
 1152              	.LBB117:
 1153              		.loc 2 200 0
 1154              		.syntax unified
 1155              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1156 000e 4FF05003 			mov r3, #80												
 1157 0012 83F31188 		msr basepri, r3											
 1158 0016 BFF36F8F 		isb														
 1159 001a BFF34F8F 		dsb														
 1160              	
 1161              	@ 0 "" 2
 1162              	.LVL125:
 1163              		.thumb
 1164              		.syntax unified
 1165              	.L98:
 1166 001e FEE7     		b	.L98
 1167              	.LVL126:
 1168              	.L114:
 1169              	.LBE117:
 1170              	.LBE116:
 1171              	.LBB118:
 1172              	.LBB119:
ARM GAS  /tmp/ccYBDQMR.s 			page 49


 1173              		.syntax unified
 1174              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1175 0020 4FF05003 			mov r3, #80												
 1176 0024 83F31188 		msr basepri, r3											
 1177 0028 BFF36F8F 		isb														
 1178 002c BFF34F8F 		dsb														
 1179              	
 1180              	@ 0 "" 2
 1181              	.LVL127:
 1182              		.thumb
 1183              		.syntax unified
 1184              	.L96:
 1185 0030 FEE7     		b	.L96
 1186              	.LVL128:
 1187              	.L97:
 1188              	.LBE119:
 1189              	.LBE118:
 558:FreeRTOS/stream_buffer.c **** 
 1190              		.loc 1 558 0
 1191 0032 8368     		ldr	r3, [r0, #8]
 1192              	.LVL129:
 1193 0034 013B     		subs	r3, r3, #1
 1194              	.LVL130:
 564:FreeRTOS/stream_buffer.c ****     {
 1195              		.loc 1 564 0
 1196 0036 017F     		ldrb	r1, [r0, #28]	@ zero_extendqisi2
 1197              	.LVL131:
 1198 0038 11F0010F 		tst	r1, #1
 1199 003c 10D0     		beq	.L99
 566:FreeRTOS/stream_buffer.c **** 
 1200              		.loc 1 566 0
 1201 003e 171D     		adds	r7, r2, #4
 1202              	.LVL132:
 569:FreeRTOS/stream_buffer.c **** 
 1203              		.loc 1 569 0
 1204 0040 BA42     		cmp	r2, r7
 1205 0042 08D3     		bcc	.L100
 1206              	.LBB120:
 1207              	.LBB121:
 1208              		.loc 2 200 0
 1209              		.syntax unified
 1210              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1211 0044 4FF05003 			mov r3, #80												
 1212 0048 83F31188 		msr basepri, r3											
 1213 004c BFF36F8F 		isb														
 1214 0050 BFF34F8F 		dsb														
 1215              	
 1216              	@ 0 "" 2
 1217              	.LVL133:
 1218              		.thumb
 1219              		.syntax unified
 1220              	.L101:
 1221 0054 FEE7     		b	.L101
 1222              	.LVL134:
 1223              	.L100:
 1224              	.LBE121:
 1225              	.LBE120:
ARM GAS  /tmp/ccYBDQMR.s 			page 50


 573:FreeRTOS/stream_buffer.c ****         {
 1226              		.loc 1 573 0
 1227 0056 BB42     		cmp	r3, r7
 1228 0058 05D2     		bcs	.L102
 577:FreeRTOS/stream_buffer.c ****         }
 1229              		.loc 1 577 0
 1230 005a 0023     		movs	r3, #0
 1231              	.LVL135:
 1232 005c 0393     		str	r3, [sp, #12]
 1233              	.LVL136:
 1234 005e 02E0     		b	.L102
 1235              	.LVL137:
 1236              	.L99:
 589:FreeRTOS/stream_buffer.c ****         {
 1237              		.loc 1 589 0
 1238 0060 9A42     		cmp	r2, r3
 1239 0062 3FD8     		bhi	.L112
 549:FreeRTOS/stream_buffer.c ****     TimeOut_t xTimeOut;
 1240              		.loc 1 549 0
 1241 0064 1746     		mov	r7, r2
 1242              	.LVL138:
 1243              	.L102:
 1244 0066 1546     		mov	r5, r2
 1245 0068 0446     		mov	r4, r0
 1246              	.LVL139:
 599:FreeRTOS/stream_buffer.c ****     {
 1247              		.loc 1 599 0
 1248 006a 039B     		ldr	r3, [sp, #12]
 1249 006c 4BB3     		cbz	r3, .L103
 601:FreeRTOS/stream_buffer.c **** 
 1250              		.loc 1 601 0
 1251 006e 04A8     		add	r0, sp, #16
 1252              	.LVL140:
 1253 0070 FFF7FEFF 		bl	vTaskSetTimeOutState
 1254              	.LVL141:
 1255              	.L107:
 607:FreeRTOS/stream_buffer.c ****             {
 1256              		.loc 1 607 0
 1257 0074 FFF7FEFF 		bl	vPortEnterCritical
 1258              	.LVL142:
 609:FreeRTOS/stream_buffer.c **** 
 1259              		.loc 1 609 0
 1260 0078 2046     		mov	r0, r4
 1261 007a FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1262              	.LVL143:
 1263 007e 0646     		mov	r6, r0
 1264              	.LVL144:
 611:FreeRTOS/stream_buffer.c ****                 {
 1265              		.loc 1 611 0
 1266 0080 8742     		cmp	r7, r0
 1267 0082 3AD9     		bls	.L104
 614:FreeRTOS/stream_buffer.c **** 
 1268              		.loc 1 614 0
 1269 0084 0021     		movs	r1, #0
 1270 0086 0846     		mov	r0, r1
 1271              	.LVL145:
 1272 0088 FFF7FEFF 		bl	xTaskGenericNotifyStateClear
ARM GAS  /tmp/ccYBDQMR.s 			page 51


 1273              	.LVL146:
 617:FreeRTOS/stream_buffer.c ****                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 1274              		.loc 1 617 0
 1275 008c 6369     		ldr	r3, [r4, #20]
 1276 008e 5BBB     		cbnz	r3, .L115
 618:FreeRTOS/stream_buffer.c ****                 }
 1277              		.loc 1 618 0
 1278 0090 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1279              	.LVL147:
 1280 0094 6061     		str	r0, [r4, #20]
 626:FreeRTOS/stream_buffer.c **** 
 1281              		.loc 1 626 0
 1282 0096 FFF7FEFF 		bl	vPortExitCritical
 1283              	.LVL148:
 629:FreeRTOS/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToSend = NULL;
 1284              		.loc 1 629 0
 1285 009a 0DF11809 		add	r9, sp, #24
 1286 009e 59F80C3D 		ldr	r3, [r9, #-12]!
 1287 00a2 0093     		str	r3, [sp]
 1288 00a4 0023     		movs	r3, #0
 1289 00a6 1A46     		mov	r2, r3
 1290 00a8 1946     		mov	r1, r3
 1291 00aa 1846     		mov	r0, r3
 1292 00ac FFF7FEFF 		bl	xTaskGenericNotifyWait
 1293              	.LVL149:
 630:FreeRTOS/stream_buffer.c ****         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 1294              		.loc 1 630 0
 1295 00b0 0023     		movs	r3, #0
 1296 00b2 6361     		str	r3, [r4, #20]
 631:FreeRTOS/stream_buffer.c ****     }
 1297              		.loc 1 631 0
 1298 00b4 4946     		mov	r1, r9
 1299 00b6 04A8     		add	r0, sp, #16
 1300 00b8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1301              	.LVL150:
 1302 00bc 0028     		cmp	r0, #0
 1303 00be D9D0     		beq	.L107
 1304              	.L108:
 638:FreeRTOS/stream_buffer.c ****     {
 1305              		.loc 1 638 0
 1306 00c0 1EB9     		cbnz	r6, .L109
 1307              	.LVL151:
 1308              	.L103:
 640:FreeRTOS/stream_buffer.c ****     }
 1309              		.loc 1 640 0
 1310 00c2 2046     		mov	r0, r4
 1311 00c4 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1312              	.LVL152:
 1313 00c8 0646     		mov	r6, r0
 1314              	.LVL153:
 1315              	.L109:
 647:FreeRTOS/stream_buffer.c **** 
 1316              		.loc 1 647 0
 1317 00ca 0097     		str	r7, [sp]
 1318 00cc 3346     		mov	r3, r6
 1319 00ce 2A46     		mov	r2, r5
 1320 00d0 4146     		mov	r1, r8
ARM GAS  /tmp/ccYBDQMR.s 			page 52


 1321 00d2 2046     		mov	r0, r4
 1322 00d4 FFF7FEFF 		bl	prvWriteMessageToBuffer
 1323              	.LVL154:
 649:FreeRTOS/stream_buffer.c ****     {
 1324              		.loc 1 649 0
 1325 00d8 0646     		mov	r6, r0
 1326              	.LVL155:
 1327 00da 88B9     		cbnz	r0, .L116
 1328              	.LVL156:
 1329              	.L94:
 670:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1330              		.loc 1 670 0
 1331 00dc 3046     		mov	r0, r6
 1332 00de 07B0     		add	sp, sp, #28
 1333              	.LCFI25:
 1334              		.cfi_remember_state
 1335              		.cfi_def_cfa_offset 28
 1336              		@ sp needed
 1337 00e0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1338              	.LVL157:
 1339              	.L112:
 1340              	.LCFI26:
 1341              		.cfi_restore_state
 591:FreeRTOS/stream_buffer.c ****         }
 1342              		.loc 1 591 0
 1343 00e4 1F46     		mov	r7, r3
 1344 00e6 BEE7     		b	.L102
 1345              	.LVL158:
 1346              	.L115:
 1347              	.LBB122:
 1348              	.LBB123:
 1349              		.loc 2 200 0
 1350              		.syntax unified
 1351              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1352 00e8 4FF05003 			mov r3, #80												
 1353 00ec 83F31188 		msr basepri, r3											
 1354 00f0 BFF36F8F 		isb														
 1355 00f4 BFF34F8F 		dsb														
 1356              	
 1357              	@ 0 "" 2
 1358              	.LVL159:
 1359              		.thumb
 1360              		.syntax unified
 1361              	.L106:
 1362 00f8 FEE7     		b	.L106
 1363              	.LVL160:
 1364              	.L104:
 1365              	.LBE123:
 1366              	.LBE122:
 622:FreeRTOS/stream_buffer.c ****                     break;
 1367              		.loc 1 622 0
 1368 00fa FFF7FEFF 		bl	vPortExitCritical
 1369              	.LVL161:
 623:FreeRTOS/stream_buffer.c ****                 }
 1370              		.loc 1 623 0
 1371 00fe DFE7     		b	.L108
 1372              	.LVL162:
ARM GAS  /tmp/ccYBDQMR.s 			page 53


 1373              	.L116:
 654:FreeRTOS/stream_buffer.c ****         {
 1374              		.loc 1 654 0
 1375 0100 2046     		mov	r0, r4
 1376              	.LVL163:
 1377 0102 FFF7FEFF 		bl	prvBytesInBuffer
 1378              	.LVL164:
 1379 0106 E368     		ldr	r3, [r4, #12]
 1380 0108 9842     		cmp	r0, r3
 1381 010a E7D3     		bcc	.L94
 656:FreeRTOS/stream_buffer.c ****         }
 1382              		.loc 1 656 0
 1383 010c FFF7FEFF 		bl	vTaskSuspendAll
 1384              	.LVL165:
 1385 0110 2369     		ldr	r3, [r4, #16]
 1386 0112 43B1     		cbz	r3, .L111
 656:FreeRTOS/stream_buffer.c ****         }
 1387              		.loc 1 656 0 is_stmt 0 discriminator 1
 1388 0114 2069     		ldr	r0, [r4, #16]
 1389 0116 0025     		movs	r5, #0
 1390              	.LVL166:
 1391 0118 0095     		str	r5, [sp]
 1392 011a 2B46     		mov	r3, r5
 1393 011c 2A46     		mov	r2, r5
 1394 011e 2946     		mov	r1, r5
 1395 0120 FFF7FEFF 		bl	xTaskGenericNotify
 1396              	.LVL167:
 1397 0124 2561     		str	r5, [r4, #16]
 1398              	.L111:
 656:FreeRTOS/stream_buffer.c ****         }
 1399              		.loc 1 656 0 discriminator 3
 1400 0126 FFF7FEFF 		bl	xTaskResumeAll
 1401              	.LVL168:
 669:FreeRTOS/stream_buffer.c **** }
 1402              		.loc 1 669 0 is_stmt 1 discriminator 3
 1403 012a D7E7     		b	.L94
 1404              		.cfi_endproc
 1405              	.LFE11:
 1407              		.section	.text.xStreamBufferSendFromISR,"ax",%progbits
 1408              		.align	1
 1409              		.global	xStreamBufferSendFromISR
 1410              		.syntax unified
 1411              		.thumb
 1412              		.thumb_func
 1413              		.fpu softvfp
 1415              	xStreamBufferSendFromISR:
 1416              	.LFB12:
 677:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1417              		.loc 1 677 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 1421              	.LVL169:
 682:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1422              		.loc 1 682 0
 1423 0000 69B1     		cbz	r1, .L128
 677:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
ARM GAS  /tmp/ccYBDQMR.s 			page 54


 1424              		.loc 1 677 0
 1425 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1426              	.LCFI27:
 1427              		.cfi_def_cfa_offset 24
 1428              		.cfi_offset 4, -24
 1429              		.cfi_offset 5, -20
 1430              		.cfi_offset 6, -16
 1431              		.cfi_offset 7, -12
 1432              		.cfi_offset 8, -8
 1433              		.cfi_offset 14, -4
 1434 0006 82B0     		sub	sp, sp, #8
 1435              	.LCFI28:
 1436              		.cfi_def_cfa_offset 32
 1437 0008 0E46     		mov	r6, r1
 683:FreeRTOS/stream_buffer.c **** 
 1438              		.loc 1 683 0
 1439 000a 88B9     		cbnz	r0, .L120
 1440              	.LBB124:
 1441              	.LBB125:
 1442              		.loc 2 200 0
 1443              		.syntax unified
 1444              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1445 000c 4FF05003 			mov r3, #80												
 1446 0010 83F31188 		msr basepri, r3											
 1447 0014 BFF36F8F 		isb														
 1448 0018 BFF34F8F 		dsb														
 1449              	
 1450              	@ 0 "" 2
 1451              	.LVL170:
 1452              		.thumb
 1453              		.syntax unified
 1454              	.L121:
 1455 001c FEE7     		b	.L121
 1456              	.LVL171:
 1457              	.L128:
 1458              	.LCFI29:
 1459              		.cfi_def_cfa_offset 0
 1460              		.cfi_restore 4
 1461              		.cfi_restore 5
 1462              		.cfi_restore 6
 1463              		.cfi_restore 7
 1464              		.cfi_restore 8
 1465              		.cfi_restore 14
 1466              	.LBE125:
 1467              	.LBE124:
 1468              	.LBB126:
 1469              	.LBB127:
 1470              		.syntax unified
 1471              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1472 001e 4FF05003 			mov r3, #80												
 1473 0022 83F31188 		msr basepri, r3											
 1474 0026 BFF36F8F 		isb														
 1475 002a BFF34F8F 		dsb														
 1476              	
 1477              	@ 0 "" 2
 1478              	.LVL172:
 1479              		.thumb
ARM GAS  /tmp/ccYBDQMR.s 			page 55


 1480              		.syntax unified
 1481              	.L119:
 1482 002e FEE7     		b	.L119
 1483              	.LVL173:
 1484              	.L120:
 1485              	.LCFI30:
 1486              		.cfi_def_cfa_offset 32
 1487              		.cfi_offset 4, -24
 1488              		.cfi_offset 5, -20
 1489              		.cfi_offset 6, -16
 1490              		.cfi_offset 7, -12
 1491              		.cfi_offset 8, -8
 1492              		.cfi_offset 14, -4
 1493              	.LBE127:
 1494              	.LBE126:
 689:FreeRTOS/stream_buffer.c ****     {
 1495              		.loc 1 689 0
 1496 0030 017F     		ldrb	r1, [r0, #28]	@ zero_extendqisi2
 1497              	.LVL174:
 1498 0032 11F0010F 		tst	r1, #1
 1499 0036 32D0     		beq	.L125
 691:FreeRTOS/stream_buffer.c ****     }
 1500              		.loc 1 691 0
 1501 0038 02F10408 		add	r8, r2, #4
 1502              	.LVL175:
 1503              	.L122:
 1504 003c 1F46     		mov	r7, r3
 1505 003e 1546     		mov	r5, r2
 1506 0040 0446     		mov	r4, r0
 698:FreeRTOS/stream_buffer.c ****     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequire
 1507              		.loc 1 698 0
 1508 0042 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 1509              	.LVL176:
 699:FreeRTOS/stream_buffer.c **** 
 1510              		.loc 1 699 0
 1511 0046 CDF80080 		str	r8, [sp]
 1512 004a 0346     		mov	r3, r0
 1513 004c 2A46     		mov	r2, r5
 1514 004e 3146     		mov	r1, r6
 1515 0050 2046     		mov	r0, r4
 1516              	.LVL177:
 1517 0052 FFF7FEFF 		bl	prvWriteMessageToBuffer
 1518              	.LVL178:
 701:FreeRTOS/stream_buffer.c ****     {
 1519              		.loc 1 701 0
 1520 0056 0646     		mov	r6, r0
 1521              	.LVL179:
 1522 0058 E8B1     		cbz	r0, .L117
 704:FreeRTOS/stream_buffer.c ****         {
 1523              		.loc 1 704 0
 1524 005a 2046     		mov	r0, r4
 1525              	.LVL180:
 1526 005c FFF7FEFF 		bl	prvBytesInBuffer
 1527              	.LVL181:
 1528 0060 E368     		ldr	r3, [r4, #12]
 1529 0062 9842     		cmp	r0, r3
 1530 0064 17D3     		bcc	.L117
ARM GAS  /tmp/ccYBDQMR.s 			page 56


 1531              	.LBB128:
 1532              	.LBB129:
 1533              	.LBB130:
 201:FreeRTOS/ARM_CM3/portmacro.h ****         (
 202:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 203:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 204:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 205:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 206:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:FreeRTOS/ARM_CM3/portmacro.h ****         );
 208:FreeRTOS/ARM_CM3/portmacro.h ****     }
 209:FreeRTOS/ARM_CM3/portmacro.h **** 
 210:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 211:FreeRTOS/ARM_CM3/portmacro.h **** 
 212:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 213:FreeRTOS/ARM_CM3/portmacro.h ****     {
 214:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 215:FreeRTOS/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 1534              		.loc 2 216 0
 1535              		.syntax unified
 1536              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1537 0066 EFF31188 			mrs r8, basepri											
 1538 006a 4FF05003 		mov r3, #80												
 1539 006e 83F31188 		msr basepri, r3											
 1540 0072 BFF36F8F 		isb														
 1541 0076 BFF34F8F 		dsb														
 1542              	
 1543              	@ 0 "" 2
 1544              	.LVL182:
 1545              		.thumb
 1546              		.syntax unified
 1547              	.LBE130:
 1548              	.LBE129:
 706:FreeRTOS/stream_buffer.c ****         }
 1549              		.loc 1 706 0
 1550 007a 2369     		ldr	r3, [r4, #16]
 1551 007c 4BB1     		cbz	r3, .L124
 706:FreeRTOS/stream_buffer.c ****         }
 1552              		.loc 1 706 0 is_stmt 0 discriminator 1
 1553 007e 2069     		ldr	r0, [r4, #16]
 1554 0080 0197     		str	r7, [sp, #4]
 1555 0082 0025     		movs	r5, #0
 1556              	.LVL183:
 1557 0084 0095     		str	r5, [sp]
 1558 0086 2B46     		mov	r3, r5
 1559 0088 2A46     		mov	r2, r5
 1560 008a 2946     		mov	r1, r5
 1561 008c FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1562              	.LVL184:
 1563 0090 2561     		str	r5, [r4, #16]
 1564              	.L124:
 1565              	.LVL185:
 1566              	.LBB131:
 1567              	.LBB132:
 217:FreeRTOS/ARM_CM3/portmacro.h ****         (
 218:FreeRTOS/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
ARM GAS  /tmp/ccYBDQMR.s 			page 57


 219:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 220:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 221:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 222:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 223:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:FreeRTOS/ARM_CM3/portmacro.h ****         );
 225:FreeRTOS/ARM_CM3/portmacro.h **** 
 226:FreeRTOS/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:FreeRTOS/ARM_CM3/portmacro.h ****          * warnings. */
 228:FreeRTOS/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 229:FreeRTOS/ARM_CM3/portmacro.h ****     }
 230:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 231:FreeRTOS/ARM_CM3/portmacro.h **** 
 232:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 233:FreeRTOS/ARM_CM3/portmacro.h ****     {
 234:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 1568              		.loc 2 234 0 is_stmt 1 discriminator 3
 1569              		.syntax unified
 1570              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1571 0092 88F31188 			msr basepri, r8	
 1572              	@ 0 "" 2
 1573              	.LVL186:
 1574              		.thumb
 1575              		.syntax unified
 1576              	.L117:
 1577              	.LBE132:
 1578              	.LBE131:
 1579              	.LBE128:
 721:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1580              		.loc 1 721 0
 1581 0096 3046     		mov	r0, r6
 1582 0098 02B0     		add	sp, sp, #8
 1583              	.LCFI31:
 1584              		.cfi_remember_state
 1585              		.cfi_def_cfa_offset 24
 1586              		@ sp needed
 1587 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1588              	.LVL187:
 1589              	.L125:
 1590              	.LCFI32:
 1591              		.cfi_restore_state
 680:FreeRTOS/stream_buffer.c **** 
 1592              		.loc 1 680 0
 1593 009e 9046     		mov	r8, r2
 1594 00a0 CCE7     		b	.L122
 1595              		.cfi_endproc
 1596              	.LFE12:
 1598              		.section	.text.xStreamBufferReceive,"ax",%progbits
 1599              		.align	1
 1600              		.global	xStreamBufferReceive
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu softvfp
 1606              	xStreamBufferReceive:
 1607              	.LFB14:
 771:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
ARM GAS  /tmp/ccYBDQMR.s 			page 58


 1608              		.loc 1 771 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              	.LVL188:
 775:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1613              		.loc 1 775 0
 1614 0000 69B1     		cbz	r1, .L146
 771:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1615              		.loc 1 771 0
 1616 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1617              	.LCFI33:
 1618              		.cfi_def_cfa_offset 28
 1619              		.cfi_offset 4, -28
 1620              		.cfi_offset 5, -24
 1621              		.cfi_offset 6, -20
 1622              		.cfi_offset 7, -16
 1623              		.cfi_offset 8, -12
 1624              		.cfi_offset 9, -8
 1625              		.cfi_offset 14, -4
 1626 0006 83B0     		sub	sp, sp, #12
 1627              	.LCFI34:
 1628              		.cfi_def_cfa_offset 40
 1629 0008 8846     		mov	r8, r1
 776:FreeRTOS/stream_buffer.c **** 
 1630              		.loc 1 776 0
 1631 000a 88B9     		cbnz	r0, .L132
 1632              	.LBB133:
 1633              	.LBB134:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1634              		.loc 2 200 0
 1635              		.syntax unified
 1636              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1637 000c 4FF05003 			mov r3, #80												
 1638 0010 83F31188 		msr basepri, r3											
 1639 0014 BFF36F8F 		isb														
 1640 0018 BFF34F8F 		dsb														
 1641              	
 1642              	@ 0 "" 2
 1643              	.LVL189:
 1644              		.thumb
 1645              		.syntax unified
 1646              	.L133:
 1647 001c FEE7     		b	.L133
 1648              	.LVL190:
 1649              	.L146:
 1650              	.LCFI35:
 1651              		.cfi_def_cfa_offset 0
 1652              		.cfi_restore 4
 1653              		.cfi_restore 5
 1654              		.cfi_restore 6
 1655              		.cfi_restore 7
 1656              		.cfi_restore 8
 1657              		.cfi_restore 9
 1658              		.cfi_restore 14
 1659              	.LBE134:
 1660              	.LBE133:
ARM GAS  /tmp/ccYBDQMR.s 			page 59


 1661              	.LBB135:
 1662              	.LBB136:
 1663              		.syntax unified
 1664              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1665 001e 4FF05003 			mov r3, #80												
 1666 0022 83F31188 		msr basepri, r3											
 1667 0026 BFF36F8F 		isb														
 1668 002a BFF34F8F 		dsb														
 1669              	
 1670              	@ 0 "" 2
 1671              	.LVL191:
 1672              		.thumb
 1673              		.syntax unified
 1674              	.L131:
 1675 002e FEE7     		b	.L131
 1676              	.LVL192:
 1677              	.L132:
 1678              	.LCFI36:
 1679              		.cfi_def_cfa_offset 40
 1680              		.cfi_offset 4, -28
 1681              		.cfi_offset 5, -24
 1682              		.cfi_offset 6, -20
 1683              		.cfi_offset 7, -16
 1684              		.cfi_offset 8, -12
 1685              		.cfi_offset 9, -8
 1686              		.cfi_offset 14, -4
 1687              	.LBE136:
 1688              	.LBE135:
 783:FreeRTOS/stream_buffer.c ****     {
 1689              		.loc 1 783 0
 1690 0030 017F     		ldrb	r1, [r0, #28]	@ zero_extendqisi2
 1691              	.LVL193:
 1692 0032 11F0010F 		tst	r1, #1
 1693 0036 1BD0     		beq	.L142
 785:FreeRTOS/stream_buffer.c ****     }
 1694              		.loc 1 785 0
 1695 0038 0426     		movs	r6, #4
 1696              	.L134:
 1697 003a 1F46     		mov	r7, r3
 1698 003c 9146     		mov	r9, r2
 1699 003e 0446     		mov	r4, r0
 1700              	.LVL194:
 792:FreeRTOS/stream_buffer.c ****     {
 1701              		.loc 1 792 0
 1702 0040 6BB3     		cbz	r3, .L135
 796:FreeRTOS/stream_buffer.c ****         {
 1703              		.loc 1 796 0
 1704 0042 FFF7FEFF 		bl	vPortEnterCritical
 1705              	.LVL195:
 798:FreeRTOS/stream_buffer.c **** 
 1706              		.loc 1 798 0
 1707 0046 2046     		mov	r0, r4
 1708 0048 FFF7FEFF 		bl	prvBytesInBuffer
 1709              	.LVL196:
 1710 004c 0546     		mov	r5, r0
 1711              	.LVL197:
 805:FreeRTOS/stream_buffer.c ****             {
ARM GAS  /tmp/ccYBDQMR.s 			page 60


 1712              		.loc 1 805 0
 1713 004e 8642     		cmp	r6, r0
 1714 0050 13D3     		bcc	.L136
 808:FreeRTOS/stream_buffer.c **** 
 1715              		.loc 1 808 0
 1716 0052 0021     		movs	r1, #0
 1717 0054 0846     		mov	r0, r1
 1718              	.LVL198:
 1719 0056 FFF7FEFF 		bl	xTaskGenericNotifyStateClear
 1720              	.LVL199:
 811:FreeRTOS/stream_buffer.c ****                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1721              		.loc 1 811 0
 1722 005a 2369     		ldr	r3, [r4, #16]
 1723 005c 53B1     		cbz	r3, .L137
 1724              	.LBB137:
 1725              	.LBB138:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1726              		.loc 2 200 0
 1727              		.syntax unified
 1728              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1729 005e 4FF05003 			mov r3, #80												
 1730 0062 83F31188 		msr basepri, r3											
 1731 0066 BFF36F8F 		isb														
 1732 006a BFF34F8F 		dsb														
 1733              	
 1734              	@ 0 "" 2
 1735              	.LVL200:
 1736              		.thumb
 1737              		.syntax unified
 1738              	.L138:
 1739 006e FEE7     		b	.L138
 1740              	.LVL201:
 1741              	.L142:
 1742              	.LBE138:
 1743              	.LBE137:
 789:FreeRTOS/stream_buffer.c ****     }
 1744              		.loc 1 789 0
 1745 0070 0026     		movs	r6, #0
 1746 0072 E2E7     		b	.L134
 1747              	.LVL202:
 1748              	.L137:
 812:FreeRTOS/stream_buffer.c ****             }
 1749              		.loc 1 812 0
 1750 0074 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1751              	.LVL203:
 1752 0078 2061     		str	r0, [r4, #16]
 1753              	.L136:
 819:FreeRTOS/stream_buffer.c **** 
 1754              		.loc 1 819 0
 1755 007a FFF7FEFF 		bl	vPortExitCritical
 1756              	.LVL204:
 821:FreeRTOS/stream_buffer.c ****         {
 1757              		.loc 1 821 0
 1758 007e AE42     		cmp	r6, r5
 1759 0080 10D3     		bcc	.L139
 825:FreeRTOS/stream_buffer.c ****             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1760              		.loc 1 825 0
ARM GAS  /tmp/ccYBDQMR.s 			page 61


 1761 0082 0097     		str	r7, [sp]
 1762 0084 0023     		movs	r3, #0
 1763 0086 1A46     		mov	r2, r3
 1764 0088 1946     		mov	r1, r3
 1765 008a 1846     		mov	r0, r3
 1766 008c FFF7FEFF 		bl	xTaskGenericNotifyWait
 1767              	.LVL205:
 826:FreeRTOS/stream_buffer.c **** 
 1768              		.loc 1 826 0
 1769 0090 0023     		movs	r3, #0
 1770 0092 2361     		str	r3, [r4, #16]
 829:FreeRTOS/stream_buffer.c ****         }
 1771              		.loc 1 829 0
 1772 0094 2046     		mov	r0, r4
 1773 0096 FFF7FEFF 		bl	prvBytesInBuffer
 1774              	.LVL206:
 1775 009a 0546     		mov	r5, r0
 1776              	.LVL207:
 1777 009c 02E0     		b	.L139
 1778              	.LVL208:
 1779              	.L135:
 838:FreeRTOS/stream_buffer.c ****     }
 1780              		.loc 1 838 0
 1781 009e FFF7FEFF 		bl	prvBytesInBuffer
 1782              	.LVL209:
 1783 00a2 0546     		mov	r5, r0
 1784              	.LVL210:
 1785              	.L139:
 846:FreeRTOS/stream_buffer.c ****     {
 1786              		.loc 1 846 0
 1787 00a4 B542     		cmp	r5, r6
 1788 00a6 04D8     		bhi	.L147
 773:FreeRTOS/stream_buffer.c **** 
 1789              		.loc 1 773 0
 1790 00a8 0026     		movs	r6, #0
 1791              	.LVL211:
 1792              	.L129:
 868:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1793              		.loc 1 868 0
 1794 00aa 3046     		mov	r0, r6
 1795 00ac 03B0     		add	sp, sp, #12
 1796              	.LCFI37:
 1797              		.cfi_remember_state
 1798              		.cfi_def_cfa_offset 28
 1799              		@ sp needed
 1800 00ae BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1801              	.LVL212:
 1802              	.L147:
 1803              	.LCFI38:
 1804              		.cfi_restore_state
 848:FreeRTOS/stream_buffer.c **** 
 1805              		.loc 1 848 0
 1806 00b2 2B46     		mov	r3, r5
 1807 00b4 4A46     		mov	r2, r9
 1808 00b6 4146     		mov	r1, r8
 1809 00b8 2046     		mov	r0, r4
 1810 00ba FFF7FEFF 		bl	prvReadMessageFromBuffer
ARM GAS  /tmp/ccYBDQMR.s 			page 62


 1811              	.LVL213:
 851:FreeRTOS/stream_buffer.c ****         {
 1812              		.loc 1 851 0
 1813 00be 0646     		mov	r6, r0
 1814              	.LVL214:
 1815 00c0 0028     		cmp	r0, #0
 1816 00c2 F2D0     		beq	.L129
 854:FreeRTOS/stream_buffer.c ****         }
 1817              		.loc 1 854 0
 1818 00c4 FFF7FEFF 		bl	vTaskSuspendAll
 1819              	.LVL215:
 1820 00c8 6369     		ldr	r3, [r4, #20]
 1821 00ca 43B1     		cbz	r3, .L141
 854:FreeRTOS/stream_buffer.c ****         }
 1822              		.loc 1 854 0 is_stmt 0 discriminator 1
 1823 00cc 6069     		ldr	r0, [r4, #20]
 1824 00ce 0025     		movs	r5, #0
 1825              	.LVL216:
 1826 00d0 0095     		str	r5, [sp]
 1827 00d2 2B46     		mov	r3, r5
 1828 00d4 2A46     		mov	r2, r5
 1829 00d6 2946     		mov	r1, r5
 1830 00d8 FFF7FEFF 		bl	xTaskGenericNotify
 1831              	.LVL217:
 1832 00dc 6561     		str	r5, [r4, #20]
 1833              	.L141:
 854:FreeRTOS/stream_buffer.c ****         }
 1834              		.loc 1 854 0 discriminator 3
 1835 00de FFF7FEFF 		bl	xTaskResumeAll
 1836              	.LVL218:
 1837 00e2 E2E7     		b	.L129
 1838              		.cfi_endproc
 1839              	.LFE14:
 1841              		.section	.text.xStreamBufferNextMessageLengthBytes,"ax",%progbits
 1842              		.align	1
 1843              		.global	xStreamBufferNextMessageLengthBytes
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1847              		.fpu softvfp
 1849              	xStreamBufferNextMessageLengthBytes:
 1850              	.LFB15:
 872:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1851              		.loc 1 872 0 is_stmt 1
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 8
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 1855              	.LVL219:
 877:FreeRTOS/stream_buffer.c **** 
 1856              		.loc 1 877 0
 1857 0000 A0B1     		cbz	r0, .L157
 872:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1858              		.loc 1 872 0
 1859 0002 10B5     		push	{r4, lr}
 1860              	.LCFI39:
 1861              		.cfi_def_cfa_offset 8
 1862              		.cfi_offset 4, -8
ARM GAS  /tmp/ccYBDQMR.s 			page 63


 1863              		.cfi_offset 14, -4
 1864 0004 82B0     		sub	sp, sp, #8
 1865              	.LCFI40:
 1866              		.cfi_def_cfa_offset 16
 1867 0006 0446     		mov	r4, r0
 880:FreeRTOS/stream_buffer.c ****     {
 1868              		.loc 1 880 0
 1869 0008 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1870 000a 13F0010F 		tst	r3, #1
 1871 000e 1FD0     		beq	.L154
 882:FreeRTOS/stream_buffer.c **** 
 1872              		.loc 1 882 0
 1873 0010 FFF7FEFF 		bl	prvBytesInBuffer
 1874              	.LVL220:
 884:FreeRTOS/stream_buffer.c ****         {
 1875              		.loc 1 884 0
 1876 0014 0428     		cmp	r0, #4
 1877 0016 12D8     		bhi	.L158
 898:FreeRTOS/stream_buffer.c ****             xReturn = 0;
 1878              		.loc 1 898 0
 1879 0018 D8B1     		cbz	r0, .L148
 1880              	.LBB139:
 1881              	.LBB140:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1882              		.loc 2 200 0
 1883              		.syntax unified
 1884              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1885 001a 4FF05003 			mov r3, #80												
 1886 001e 83F31188 		msr basepri, r3											
 1887 0022 BFF36F8F 		isb														
 1888 0026 BFF34F8F 		dsb														
 1889              	
 1890              	@ 0 "" 2
 1891              	.LVL221:
 1892              		.thumb
 1893              		.syntax unified
 1894              	.L153:
 1895 002a FEE7     		b	.L153
 1896              	.LVL222:
 1897              	.L157:
 1898              	.LCFI41:
 1899              		.cfi_def_cfa_offset 0
 1900              		.cfi_restore 4
 1901              		.cfi_restore 14
 1902              	.LBE140:
 1903              	.LBE139:
 1904              	.LBB141:
 1905              	.LBB142:
 1906              		.syntax unified
 1907              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1908 002c 4FF05003 			mov r3, #80												
 1909 0030 83F31188 		msr basepri, r3											
 1910 0034 BFF36F8F 		isb														
 1911 0038 BFF34F8F 		dsb														
 1912              	
 1913              	@ 0 "" 2
 1914              	.LVL223:
ARM GAS  /tmp/ccYBDQMR.s 			page 64


 1915              		.thumb
 1916              		.syntax unified
 1917              	.L150:
 1918 003c FEE7     		b	.L150
 1919              	.LVL224:
 1920              	.L158:
 1921              	.LCFI42:
 1922              		.cfi_def_cfa_offset 16
 1923              		.cfi_offset 4, -8
 1924              		.cfi_offset 14, -4
 1925              	.LBE142:
 1926              	.LBE141:
 889:FreeRTOS/stream_buffer.c ****             xReturn = ( size_t ) xTempReturn;
 1927              		.loc 1 889 0
 1928 003e 2368     		ldr	r3, [r4]
 1929 0040 0422     		movs	r2, #4
 1930 0042 0DEB0201 		add	r1, sp, r2
 1931 0046 2046     		mov	r0, r4
 1932              	.LVL225:
 1933 0048 FFF7FEFF 		bl	prvReadBytesFromBuffer
 1934              	.LVL226:
 890:FreeRTOS/stream_buffer.c ****         }
 1935              		.loc 1 890 0
 1936 004c 0198     		ldr	r0, [sp, #4]
 1937              	.LVL227:
 1938 004e 00E0     		b	.L148
 1939              	.LVL228:
 1940              	.L154:
 904:FreeRTOS/stream_buffer.c ****     }
 1941              		.loc 1 904 0
 1942 0050 0020     		movs	r0, #0
 1943              	.LVL229:
 1944              	.L148:
 908:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 1945              		.loc 1 908 0
 1946 0052 02B0     		add	sp, sp, #8
 1947              	.LCFI43:
 1948              		.cfi_def_cfa_offset 8
 1949              		@ sp needed
 1950 0054 10BD     		pop	{r4, pc}
 1951              		.cfi_endproc
 1952              	.LFE15:
 1954              		.section	.text.xStreamBufferReceiveFromISR,"ax",%progbits
 1955              		.align	1
 1956              		.global	xStreamBufferReceiveFromISR
 1957              		.syntax unified
 1958              		.thumb
 1959              		.thumb_func
 1960              		.fpu softvfp
 1962              	xStreamBufferReceiveFromISR:
 1963              	.LFB16:
 915:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1964              		.loc 1 915 0
 1965              		.cfi_startproc
 1966              		@ args = 0, pretend = 0, frame = 0
 1967              		@ frame_needed = 0, uses_anonymous_args = 0
 1968              	.LVL230:
ARM GAS  /tmp/ccYBDQMR.s 			page 65


 919:FreeRTOS/stream_buffer.c ****     configASSERT( pxStreamBuffer );
 1969              		.loc 1 919 0
 1970 0000 69B1     		cbz	r1, .L171
 915:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1971              		.loc 1 915 0
 1972 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1973              	.LCFI44:
 1974              		.cfi_def_cfa_offset 24
 1975              		.cfi_offset 4, -24
 1976              		.cfi_offset 5, -20
 1977              		.cfi_offset 6, -16
 1978              		.cfi_offset 7, -12
 1979              		.cfi_offset 8, -8
 1980              		.cfi_offset 14, -4
 1981 0006 82B0     		sub	sp, sp, #8
 1982              	.LCFI45:
 1983              		.cfi_def_cfa_offset 32
 1984 0008 0D46     		mov	r5, r1
 920:FreeRTOS/stream_buffer.c **** 
 1985              		.loc 1 920 0
 1986 000a 88B9     		cbnz	r0, .L162
 1987              	.LBB143:
 1988              	.LBB144:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1989              		.loc 2 200 0
 1990              		.syntax unified
 1991              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1992 000c 4FF05003 			mov r3, #80												
 1993 0010 83F31188 		msr basepri, r3											
 1994 0014 BFF36F8F 		isb														
 1995 0018 BFF34F8F 		dsb														
 1996              	
 1997              	@ 0 "" 2
 1998              	.LVL231:
 1999              		.thumb
 2000              		.syntax unified
 2001              	.L163:
 2002 001c FEE7     		b	.L163
 2003              	.LVL232:
 2004              	.L171:
 2005              	.LCFI46:
 2006              		.cfi_def_cfa_offset 0
 2007              		.cfi_restore 4
 2008              		.cfi_restore 5
 2009              		.cfi_restore 6
 2010              		.cfi_restore 7
 2011              		.cfi_restore 8
 2012              		.cfi_restore 14
 2013              	.LBE144:
 2014              	.LBE143:
 2015              	.LBB145:
 2016              	.LBB146:
 2017              		.syntax unified
 2018              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2019 001e 4FF05003 			mov r3, #80												
 2020 0022 83F31188 		msr basepri, r3											
 2021 0026 BFF36F8F 		isb														
ARM GAS  /tmp/ccYBDQMR.s 			page 66


 2022 002a BFF34F8F 		dsb														
 2023              	
 2024              	@ 0 "" 2
 2025              	.LVL233:
 2026              		.thumb
 2027              		.syntax unified
 2028              	.L161:
 2029 002e FEE7     		b	.L161
 2030              	.LVL234:
 2031              	.L162:
 2032              	.LCFI47:
 2033              		.cfi_def_cfa_offset 32
 2034              		.cfi_offset 4, -24
 2035              		.cfi_offset 5, -20
 2036              		.cfi_offset 6, -16
 2037              		.cfi_offset 7, -12
 2038              		.cfi_offset 8, -8
 2039              		.cfi_offset 14, -4
 2040              	.LBE146:
 2041              	.LBE145:
 927:FreeRTOS/stream_buffer.c ****     {
 2042              		.loc 1 927 0
 2043 0030 017F     		ldrb	r1, [r0, #28]	@ zero_extendqisi2
 2044              	.LVL235:
 2045 0032 11F0010F 		tst	r1, #1
 2046 0036 29D0     		beq	.L167
 929:FreeRTOS/stream_buffer.c ****     }
 2047              		.loc 1 929 0
 2048 0038 4FF00408 		mov	r8, #4
 2049              	.L164:
 2050 003c 1F46     		mov	r7, r3
 2051 003e 1646     		mov	r6, r2
 2052 0040 0446     		mov	r4, r0
 2053              	.LVL236:
 936:FreeRTOS/stream_buffer.c **** 
 2054              		.loc 1 936 0
 2055 0042 FFF7FEFF 		bl	prvBytesInBuffer
 2056              	.LVL237:
 2057 0046 0346     		mov	r3, r0
 2058              	.LVL238:
 943:FreeRTOS/stream_buffer.c ****     {
 2059              		.loc 1 943 0
 2060 0048 8045     		cmp	r8, r0
 2061 004a 22D2     		bcs	.L168
 945:FreeRTOS/stream_buffer.c **** 
 2062              		.loc 1 945 0
 2063 004c 3246     		mov	r2, r6
 2064 004e 2946     		mov	r1, r5
 2065 0050 2046     		mov	r0, r4
 2066              	.LVL239:
 2067 0052 FFF7FEFF 		bl	prvReadMessageFromBuffer
 2068              	.LVL240:
 948:FreeRTOS/stream_buffer.c ****         {
 2069              		.loc 1 948 0
 2070 0056 0646     		mov	r6, r0
 2071              	.LVL241:
 2072 0058 E0B1     		cbz	r0, .L159
ARM GAS  /tmp/ccYBDQMR.s 			page 67


 2073              	.LBB147:
 2074              	.LBB148:
 2075              	.LBB149:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2076              		.loc 2 216 0
 2077              		.syntax unified
 2078              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2079 005a EFF31188 			mrs r8, basepri											
 2080 005e 4FF05003 		mov r3, #80												
 2081 0062 83F31188 		msr basepri, r3											
 2082 0066 BFF36F8F 		isb														
 2083 006a BFF34F8F 		dsb														
 2084              	
 2085              	@ 0 "" 2
 2086              	.LVL242:
 2087              		.thumb
 2088              		.syntax unified
 2089              	.LBE149:
 2090              	.LBE148:
 950:FreeRTOS/stream_buffer.c ****         }
 2091              		.loc 1 950 0
 2092 006e 6369     		ldr	r3, [r4, #20]
 2093 0070 4BB1     		cbz	r3, .L166
 950:FreeRTOS/stream_buffer.c ****         }
 2094              		.loc 1 950 0 is_stmt 0 discriminator 1
 2095 0072 6069     		ldr	r0, [r4, #20]
 2096              	.LVL243:
 2097 0074 0197     		str	r7, [sp, #4]
 2098 0076 0025     		movs	r5, #0
 2099              	.LVL244:
 2100 0078 0095     		str	r5, [sp]
 2101 007a 2B46     		mov	r3, r5
 2102 007c 2A46     		mov	r2, r5
 2103 007e 2946     		mov	r1, r5
 2104 0080 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 2105              	.LVL245:
 2106 0084 6561     		str	r5, [r4, #20]
 2107              	.L166:
 2108              	.LVL246:
 2109              	.LBB150:
 2110              	.LBB151:
 2111              		.loc 2 234 0 is_stmt 1 discriminator 3
 2112              		.syntax unified
 2113              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2114 0086 88F31188 			msr basepri, r8	
 2115              	@ 0 "" 2
 2116              		.thumb
 2117              		.syntax unified
 2118 008a 03E0     		b	.L159
 2119              	.LVL247:
 2120              	.L167:
 2121              	.LBE151:
 2122              	.LBE150:
 2123              	.LBE147:
 933:FreeRTOS/stream_buffer.c ****     }
 2124              		.loc 1 933 0
 2125 008c 4FF00008 		mov	r8, #0
ARM GAS  /tmp/ccYBDQMR.s 			page 68


 2126 0090 D4E7     		b	.L164
 2127              	.LVL248:
 2128              	.L168:
 917:FreeRTOS/stream_buffer.c **** 
 2129              		.loc 1 917 0
 2130 0092 0026     		movs	r6, #0
 2131              	.LVL249:
 2132              	.L159:
 965:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 2133              		.loc 1 965 0
 2134 0094 3046     		mov	r0, r6
 2135 0096 02B0     		add	sp, sp, #8
 2136              	.LCFI48:
 2137              		.cfi_def_cfa_offset 24
 2138              		@ sp needed
 2139 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2140              		.cfi_endproc
 2141              	.LFE16:
 2143              		.section	.text.xStreamBufferIsEmpty,"ax",%progbits
 2144              		.align	1
 2145              		.global	xStreamBufferIsEmpty
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2149              		.fpu softvfp
 2151              	xStreamBufferIsEmpty:
 2152              	.LFB18:
1021:FreeRTOS/stream_buffer.c ****     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2153              		.loc 1 1021 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
 2158              	.LVL250:
1026:FreeRTOS/stream_buffer.c **** 
 2159              		.loc 1 1026 0
 2160 0000 28B1     		cbz	r0, .L177
1029:FreeRTOS/stream_buffer.c **** 
 2161              		.loc 1 1029 0
 2162 0002 0268     		ldr	r2, [r0]
 2163              	.LVL251:
1031:FreeRTOS/stream_buffer.c ****     {
 2164              		.loc 1 1031 0
 2165 0004 4368     		ldr	r3, [r0, #4]
 2166 0006 9342     		cmp	r3, r2
 2167 0008 0AD1     		bne	.L176
1033:FreeRTOS/stream_buffer.c ****     }
 2168              		.loc 1 1033 0
 2169 000a 0120     		movs	r0, #1
 2170              	.LVL252:
 2171 000c 7047     		bx	lr
 2172              	.LVL253:
 2173              	.L177:
 2174              	.LBB152:
 2175              	.LBB153:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2176              		.loc 2 200 0
ARM GAS  /tmp/ccYBDQMR.s 			page 69


 2177              		.syntax unified
 2178              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2179 000e 4FF05003 			mov r3, #80												
 2180 0012 83F31188 		msr basepri, r3											
 2181 0016 BFF36F8F 		isb														
 2182 001a BFF34F8F 		dsb														
 2183              	
 2184              	@ 0 "" 2
 2185              	.LVL254:
 2186              		.thumb
 2187              		.syntax unified
 2188              	.L174:
 2189 001e FEE7     		b	.L174
 2190              	.LVL255:
 2191              	.L176:
 2192              	.LBE153:
 2193              	.LBE152:
1037:FreeRTOS/stream_buffer.c ****     }
 2194              		.loc 1 1037 0
 2195 0020 0020     		movs	r0, #0
 2196              	.LVL256:
1041:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 2197              		.loc 1 1041 0
 2198 0022 7047     		bx	lr
 2199              		.cfi_endproc
 2200              	.LFE18:
 2202              		.section	.text.xStreamBufferIsFull,"ax",%progbits
 2203              		.align	1
 2204              		.global	xStreamBufferIsFull
 2205              		.syntax unified
 2206              		.thumb
 2207              		.thumb_func
 2208              		.fpu softvfp
 2210              	xStreamBufferIsFull:
 2211              	.LFB19:
1045:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
 2212              		.loc 1 1045 0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 0
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
 2216              	.LVL257:
1050:FreeRTOS/stream_buffer.c **** 
 2217              		.loc 1 1050 0
 2218 0000 68B1     		cbz	r0, .L187
1045:FreeRTOS/stream_buffer.c ****     BaseType_t xReturn;
 2219              		.loc 1 1045 0
 2220 0002 10B5     		push	{r4, lr}
 2221              	.LCFI49:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 4, -8
 2224              		.cfi_offset 14, -4
 2225 0004 0346     		mov	r3, r0
1056:FreeRTOS/stream_buffer.c ****     {
 2226              		.loc 1 1056 0
 2227 0006 027F     		ldrb	r2, [r0, #28]	@ zero_extendqisi2
 2228 0008 12F0010F 		tst	r2, #1
 2229 000c 10D0     		beq	.L183
ARM GAS  /tmp/ccYBDQMR.s 			page 70


1058:FreeRTOS/stream_buffer.c ****     }
 2230              		.loc 1 1058 0
 2231 000e 0424     		movs	r4, #4
 2232              	.L181:
 2233 0010 1846     		mov	r0, r3
 2234              	.LVL258:
1066:FreeRTOS/stream_buffer.c ****     {
 2235              		.loc 1 1066 0
 2236 0012 FFF7FEFF 		bl	xStreamBufferSpacesAvailable
 2237              	.LVL259:
 2238 0016 A042     		cmp	r0, r4
 2239 0018 0CD8     		bhi	.L184
1068:FreeRTOS/stream_buffer.c ****     }
 2240              		.loc 1 1068 0
 2241 001a 0120     		movs	r0, #1
 2242              	.L178:
1076:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 2243              		.loc 1 1076 0
 2244 001c 10BD     		pop	{r4, pc}
 2245              	.LVL260:
 2246              	.L187:
 2247              	.LCFI50:
 2248              		.cfi_def_cfa_offset 0
 2249              		.cfi_restore 4
 2250              		.cfi_restore 14
 2251              	.LBB154:
 2252              	.LBB155:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2253              		.loc 2 200 0
 2254              		.syntax unified
 2255              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2256 001e 4FF05003 			mov r3, #80												
 2257 0022 83F31188 		msr basepri, r3											
 2258 0026 BFF36F8F 		isb														
 2259 002a BFF34F8F 		dsb														
 2260              	
 2261              	@ 0 "" 2
 2262              	.LVL261:
 2263              		.thumb
 2264              		.syntax unified
 2265              	.L180:
 2266 002e FEE7     		b	.L180
 2267              	.L183:
 2268              	.LCFI51:
 2269              		.cfi_def_cfa_offset 8
 2270              		.cfi_offset 4, -8
 2271              		.cfi_offset 14, -4
 2272              	.LBE155:
 2273              	.LBE154:
1062:FreeRTOS/stream_buffer.c ****     }
 2274              		.loc 1 1062 0
 2275 0030 0024     		movs	r4, #0
 2276 0032 EDE7     		b	.L181
 2277              	.LVL262:
 2278              	.L184:
1072:FreeRTOS/stream_buffer.c ****     }
 2279              		.loc 1 1072 0
ARM GAS  /tmp/ccYBDQMR.s 			page 71


 2280 0034 0020     		movs	r0, #0
 2281              	.LVL263:
1075:FreeRTOS/stream_buffer.c **** }
 2282              		.loc 1 1075 0
 2283 0036 F1E7     		b	.L178
 2284              		.cfi_endproc
 2285              	.LFE19:
 2287              		.section	.text.xStreamBufferSendCompletedFromISR,"ax",%progbits
 2288              		.align	1
 2289              		.global	xStreamBufferSendCompletedFromISR
 2290              		.syntax unified
 2291              		.thumb
 2292              		.thumb_func
 2293              		.fpu softvfp
 2295              	xStreamBufferSendCompletedFromISR:
 2296              	.LFB20:
1081:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2297              		.loc 1 1081 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 0, uses_anonymous_args = 0
 2301              	.LVL264:
1086:FreeRTOS/stream_buffer.c **** 
 2302              		.loc 1 1086 0
 2303 0000 E8B1     		cbz	r0, .L195
1081:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2304              		.loc 1 1081 0
 2305 0002 70B5     		push	{r4, r5, r6, lr}
 2306              	.LCFI52:
 2307              		.cfi_def_cfa_offset 16
 2308              		.cfi_offset 4, -16
 2309              		.cfi_offset 5, -12
 2310              		.cfi_offset 6, -8
 2311              		.cfi_offset 14, -4
 2312 0004 82B0     		sub	sp, sp, #8
 2313              	.LCFI53:
 2314              		.cfi_def_cfa_offset 24
 2315 0006 0446     		mov	r4, r0
 2316              	.LBB156:
 2317              	.LBB157:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2318              		.loc 2 216 0
 2319              		.syntax unified
 2320              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2321 0008 EFF31186 			mrs r6, basepri											
 2322 000c 4FF05003 		mov r3, #80												
 2323 0010 83F31188 		msr basepri, r3											
 2324 0014 BFF36F8F 		isb														
 2325 0018 BFF34F8F 		dsb														
 2326              	
 2327              	@ 0 "" 2
 2328              		.thumb
 2329              		.syntax unified
 2330              	.LBE157:
 2331              	.LBE156:
1090:FreeRTOS/stream_buffer.c ****         {
 2332              		.loc 1 1090 0
ARM GAS  /tmp/ccYBDQMR.s 			page 72


 2333 001c 0369     		ldr	r3, [r0, #16]
 2334 001e BBB1     		cbz	r3, .L192
1092:FreeRTOS/stream_buffer.c ****                                          ( uint32_t ) 0,
 2335              		.loc 1 1092 0
 2336 0020 0069     		ldr	r0, [r0, #16]
 2337              	.LVL265:
 2338 0022 0191     		str	r1, [sp, #4]
 2339 0024 0025     		movs	r5, #0
 2340 0026 0095     		str	r5, [sp]
 2341 0028 2B46     		mov	r3, r5
 2342 002a 2A46     		mov	r2, r5
 2343 002c 2946     		mov	r1, r5
 2344              	.LVL266:
 2345 002e FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 2346              	.LVL267:
1096:FreeRTOS/stream_buffer.c ****             xReturn = pdTRUE;
 2347              		.loc 1 1096 0
 2348 0032 2561     		str	r5, [r4, #16]
 2349              	.LVL268:
1097:FreeRTOS/stream_buffer.c ****         }
 2350              		.loc 1 1097 0
 2351 0034 0120     		movs	r0, #1
 2352              	.LVL269:
 2353              	.L191:
 2354              	.LBB158:
 2355              	.LBB159:
 2356              		.loc 2 234 0
 2357              		.syntax unified
 2358              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2359 0036 86F31188 			msr basepri, r6	
 2360              	@ 0 "" 2
 2361              	.LVL270:
 2362              		.thumb
 2363              		.syntax unified
 2364              	.LBE159:
 2365              	.LBE158:
1107:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
 2366              		.loc 1 1107 0
 2367 003a 02B0     		add	sp, sp, #8
 2368              	.LCFI54:
 2369              		.cfi_def_cfa_offset 16
 2370              		@ sp needed
 2371 003c 70BD     		pop	{r4, r5, r6, pc}
 2372              	.LVL271:
 2373              	.L195:
 2374              	.LCFI55:
 2375              		.cfi_def_cfa_offset 0
 2376              		.cfi_restore 4
 2377              		.cfi_restore 5
 2378              		.cfi_restore 6
 2379              		.cfi_restore 14
 2380              	.LBB160:
 2381              	.LBB161:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2382              		.loc 2 200 0
 2383              		.syntax unified
 2384              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/ccYBDQMR.s 			page 73


 2385 003e 4FF05003 			mov r3, #80												
 2386 0042 83F31188 		msr basepri, r3											
 2387 0046 BFF36F8F 		isb														
 2388 004a BFF34F8F 		dsb														
 2389              	
 2390              	@ 0 "" 2
 2391              	.LVL272:
 2392              		.thumb
 2393              		.syntax unified
 2394              	.L190:
 2395 004e FEE7     		b	.L190
 2396              	.L192:
 2397              	.LCFI56:
 2398              		.cfi_def_cfa_offset 24
 2399              		.cfi_offset 4, -16
 2400              		.cfi_offset 5, -12
 2401              		.cfi_offset 6, -8
 2402              		.cfi_offset 14, -4
 2403              	.LBE161:
 2404              	.LBE160:
1101:FreeRTOS/stream_buffer.c ****         }
 2405              		.loc 1 1101 0
 2406 0050 0020     		movs	r0, #0
 2407              	.LVL273:
 2408 0052 F0E7     		b	.L191
 2409              		.cfi_endproc
 2410              	.LFE20:
 2412              		.section	.text.xStreamBufferReceiveCompletedFromISR,"ax",%progbits
 2413              		.align	1
 2414              		.global	xStreamBufferReceiveCompletedFromISR
 2415              		.syntax unified
 2416              		.thumb
 2417              		.thumb_func
 2418              		.fpu softvfp
 2420              	xStreamBufferReceiveCompletedFromISR:
 2421              	.LFB21:
1112:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2422              		.loc 1 1112 0
 2423              		.cfi_startproc
 2424              		@ args = 0, pretend = 0, frame = 0
 2425              		@ frame_needed = 0, uses_anonymous_args = 0
 2426              	.LVL274:
1117:FreeRTOS/stream_buffer.c **** 
 2427              		.loc 1 1117 0
 2428 0000 E8B1     		cbz	r0, .L203
1112:FreeRTOS/stream_buffer.c ****     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 2429              		.loc 1 1112 0
 2430 0002 70B5     		push	{r4, r5, r6, lr}
 2431              	.LCFI57:
 2432              		.cfi_def_cfa_offset 16
 2433              		.cfi_offset 4, -16
 2434              		.cfi_offset 5, -12
 2435              		.cfi_offset 6, -8
 2436              		.cfi_offset 14, -4
 2437 0004 82B0     		sub	sp, sp, #8
 2438              	.LCFI58:
 2439              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccYBDQMR.s 			page 74


 2440 0006 0446     		mov	r4, r0
 2441              	.LBB162:
 2442              	.LBB163:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2443              		.loc 2 216 0
 2444              		.syntax unified
 2445              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2446 0008 EFF31186 			mrs r6, basepri											
 2447 000c 4FF05003 		mov r3, #80												
 2448 0010 83F31188 		msr basepri, r3											
 2449 0014 BFF36F8F 		isb														
 2450 0018 BFF34F8F 		dsb														
 2451              	
 2452              	@ 0 "" 2
 2453              		.thumb
 2454              		.syntax unified
 2455              	.LBE163:
 2456              	.LBE162:
1121:FreeRTOS/stream_buffer.c ****         {
 2457              		.loc 1 1121 0
 2458 001c 4369     		ldr	r3, [r0, #20]
 2459 001e BBB1     		cbz	r3, .L200
1123:FreeRTOS/stream_buffer.c ****                                          ( uint32_t ) 0,
 2460              		.loc 1 1123 0
 2461 0020 4069     		ldr	r0, [r0, #20]
 2462              	.LVL275:
 2463 0022 0191     		str	r1, [sp, #4]
 2464 0024 0025     		movs	r5, #0
 2465 0026 0095     		str	r5, [sp]
 2466 0028 2B46     		mov	r3, r5
 2467 002a 2A46     		mov	r2, r5
 2468 002c 2946     		mov	r1, r5
 2469              	.LVL276:
 2470 002e FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 2471              	.LVL277:
1127:FreeRTOS/stream_buffer.c ****             xReturn = pdTRUE;
 2472              		.loc 1 1127 0
 2473 0032 6561     		str	r5, [r4, #20]
 2474              	.LVL278:
1128:FreeRTOS/stream_buffer.c ****         }
 2475              		.loc 1 1128 0
 2476 0034 0120     		movs	r0, #1
 2477              	.LVL279:
 2478              	.L199:
 2479              	.LBB164:
 2480              	.LBB165:
 2481              		.loc 2 234 0
 2482              		.syntax unified
 2483              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2484 0036 86F31188 			msr basepri, r6	
 2485              	@ 0 "" 2
 2486              	.LVL280:
 2487              		.thumb
 2488              		.syntax unified
 2489              	.LBE165:
 2490              	.LBE164:
1138:FreeRTOS/stream_buffer.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccYBDQMR.s 			page 75


 2491              		.loc 1 1138 0
 2492 003a 02B0     		add	sp, sp, #8
 2493              	.LCFI59:
 2494              		.cfi_def_cfa_offset 16
 2495              		@ sp needed
 2496 003c 70BD     		pop	{r4, r5, r6, pc}
 2497              	.LVL281:
 2498              	.L203:
 2499              	.LCFI60:
 2500              		.cfi_def_cfa_offset 0
 2501              		.cfi_restore 4
 2502              		.cfi_restore 5
 2503              		.cfi_restore 6
 2504              		.cfi_restore 14
 2505              	.LBB166:
 2506              	.LBB167:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2507              		.loc 2 200 0
 2508              		.syntax unified
 2509              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2510 003e 4FF05003 			mov r3, #80												
 2511 0042 83F31188 		msr basepri, r3											
 2512 0046 BFF36F8F 		isb														
 2513 004a BFF34F8F 		dsb														
 2514              	
 2515              	@ 0 "" 2
 2516              	.LVL282:
 2517              		.thumb
 2518              		.syntax unified
 2519              	.L198:
 2520 004e FEE7     		b	.L198
 2521              	.L200:
 2522              	.LCFI61:
 2523              		.cfi_def_cfa_offset 24
 2524              		.cfi_offset 4, -16
 2525              		.cfi_offset 5, -12
 2526              		.cfi_offset 6, -8
 2527              		.cfi_offset 14, -4
 2528              	.LBE167:
 2529              	.LBE166:
1132:FreeRTOS/stream_buffer.c ****         }
 2530              		.loc 1 1132 0
 2531 0050 0020     		movs	r0, #0
 2532              	.LVL283:
 2533 0052 F0E7     		b	.L199
 2534              		.cfi_endproc
 2535              	.LFE21:
 2537              		.text
 2538              	.Letext0:
 2539              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2540              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2541              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2542              		.file 6 "/usr/include/newlib/sys/lock.h"
 2543              		.file 7 "/usr/include/newlib/sys/_types.h"
 2544              		.file 8 "/usr/include/newlib/sys/reent.h"
 2545              		.file 9 "FreeRTOS/ARM_CM3/FreeRTOSConfig.h"
 2546              		.file 10 "FreeRTOS/include/task.h"
ARM GAS  /tmp/ccYBDQMR.s 			page 76


 2547              		.file 11 "FreeRTOS/include/stream_buffer.h"
 2548              		.file 12 "<built-in>"
 2549              		.file 13 "/usr/include/newlib/string.h"
 2550              		.file 14 "FreeRTOS/include/portable.h"
ARM GAS  /tmp/ccYBDQMR.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stream_buffer.c
     /tmp/ccYBDQMR.s:16     .text.prvBytesInBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:22     .text.prvBytesInBuffer:0000000000000000 prvBytesInBuffer
     /tmp/ccYBDQMR.s:54     .text.prvInitialiseNewStreamBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:60     .text.prvInitialiseNewStreamBuffer:0000000000000000 prvInitialiseNewStreamBuffer
     /tmp/ccYBDQMR.s:133    .text.prvWriteBytesToBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:139    .text.prvWriteBytesToBuffer:0000000000000000 prvWriteBytesToBuffer
     /tmp/ccYBDQMR.s:271    .text.prvWriteMessageToBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:277    .text.prvWriteMessageToBuffer:0000000000000000 prvWriteMessageToBuffer
     /tmp/ccYBDQMR.s:367    .text.prvReadBytesFromBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:373    .text.prvReadBytesFromBuffer:0000000000000000 prvReadBytesFromBuffer
     /tmp/ccYBDQMR.s:507    .text.prvReadMessageFromBuffer:0000000000000000 $t
     /tmp/ccYBDQMR.s:513    .text.prvReadMessageFromBuffer:0000000000000000 prvReadMessageFromBuffer
     /tmp/ccYBDQMR.s:608    .text.xStreamBufferGenericCreate:0000000000000000 $t
     /tmp/ccYBDQMR.s:615    .text.xStreamBufferGenericCreate:0000000000000000 xStreamBufferGenericCreate
     /tmp/ccYBDQMR.s:761    .text.vStreamBufferDelete:0000000000000000 $t
     /tmp/ccYBDQMR.s:768    .text.vStreamBufferDelete:0000000000000000 vStreamBufferDelete
     /tmp/ccYBDQMR.s:825    .text.xStreamBufferReset:0000000000000000 $t
     /tmp/ccYBDQMR.s:832    .text.xStreamBufferReset:0000000000000000 xStreamBufferReset
     /tmp/ccYBDQMR.s:921    .text.xStreamBufferSetTriggerLevel:0000000000000000 $t
     /tmp/ccYBDQMR.s:928    .text.xStreamBufferSetTriggerLevel:0000000000000000 xStreamBufferSetTriggerLevel
     /tmp/ccYBDQMR.s:986    .text.xStreamBufferSpacesAvailable:0000000000000000 $t
     /tmp/ccYBDQMR.s:993    .text.xStreamBufferSpacesAvailable:0000000000000000 xStreamBufferSpacesAvailable
     /tmp/ccYBDQMR.s:1067   .text.xStreamBufferBytesAvailable:0000000000000000 $t
     /tmp/ccYBDQMR.s:1074   .text.xStreamBufferBytesAvailable:0000000000000000 xStreamBufferBytesAvailable
     /tmp/ccYBDQMR.s:1117   .text.xStreamBufferSend:0000000000000000 $t
     /tmp/ccYBDQMR.s:1124   .text.xStreamBufferSend:0000000000000000 xStreamBufferSend
     /tmp/ccYBDQMR.s:1408   .text.xStreamBufferSendFromISR:0000000000000000 $t
     /tmp/ccYBDQMR.s:1415   .text.xStreamBufferSendFromISR:0000000000000000 xStreamBufferSendFromISR
     /tmp/ccYBDQMR.s:1599   .text.xStreamBufferReceive:0000000000000000 $t
     /tmp/ccYBDQMR.s:1606   .text.xStreamBufferReceive:0000000000000000 xStreamBufferReceive
     /tmp/ccYBDQMR.s:1842   .text.xStreamBufferNextMessageLengthBytes:0000000000000000 $t
     /tmp/ccYBDQMR.s:1849   .text.xStreamBufferNextMessageLengthBytes:0000000000000000 xStreamBufferNextMessageLengthBytes
     /tmp/ccYBDQMR.s:1955   .text.xStreamBufferReceiveFromISR:0000000000000000 $t
     /tmp/ccYBDQMR.s:1962   .text.xStreamBufferReceiveFromISR:0000000000000000 xStreamBufferReceiveFromISR
     /tmp/ccYBDQMR.s:2144   .text.xStreamBufferIsEmpty:0000000000000000 $t
     /tmp/ccYBDQMR.s:2151   .text.xStreamBufferIsEmpty:0000000000000000 xStreamBufferIsEmpty
     /tmp/ccYBDQMR.s:2203   .text.xStreamBufferIsFull:0000000000000000 $t
     /tmp/ccYBDQMR.s:2210   .text.xStreamBufferIsFull:0000000000000000 xStreamBufferIsFull
     /tmp/ccYBDQMR.s:2288   .text.xStreamBufferSendCompletedFromISR:0000000000000000 $t
     /tmp/ccYBDQMR.s:2295   .text.xStreamBufferSendCompletedFromISR:0000000000000000 xStreamBufferSendCompletedFromISR
     /tmp/ccYBDQMR.s:2413   .text.xStreamBufferReceiveCompletedFromISR:0000000000000000 $t
     /tmp/ccYBDQMR.s:2420   .text.xStreamBufferReceiveCompletedFromISR:0000000000000000 xStreamBufferReceiveCompletedFromISR

UNDEFINED SYMBOLS
memset
memcpy
pvPortMalloc
vPortFree
vPortEnterCritical
vPortExitCritical
vTaskSetTimeOutState
xTaskGenericNotifyStateClear
xTaskGetCurrentTaskHandle
xTaskGenericNotifyWait
xTaskCheckForTimeOut
ARM GAS  /tmp/ccYBDQMR.s 			page 78


vTaskSuspendAll
xTaskGenericNotify
xTaskResumeAll
xTaskGenericNotifyFromISR
