ARM GAS  /tmp/ccCouRNO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTestWaitCondition:
  23              	.LFB14:
  24              		.file 1 "FreeRTOS/event_groups.c"
   1:FreeRTOS/event_groups.c **** /*
   2:FreeRTOS/event_groups.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/event_groups.c ****  *
   5:FreeRTOS/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/event_groups.c ****  *
   7:FreeRTOS/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/event_groups.c ****  * subject to the following conditions:
  13:FreeRTOS/event_groups.c ****  *
  14:FreeRTOS/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/event_groups.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/event_groups.c ****  *
  17:FreeRTOS/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/event_groups.c ****  *
  24:FreeRTOS/event_groups.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/event_groups.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/event_groups.c ****  *
  27:FreeRTOS/event_groups.c ****  */
  28:FreeRTOS/event_groups.c **** 
  29:FreeRTOS/event_groups.c **** /* Standard includes. */
  30:FreeRTOS/event_groups.c **** #include <stdlib.h>
  31:FreeRTOS/event_groups.c **** 
  32:FreeRTOS/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/event_groups.c ****  * task.h is included from an application file. */
ARM GAS  /tmp/ccCouRNO.s 			page 2


  35:FreeRTOS/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/event_groups.c **** 
  37:FreeRTOS/event_groups.c **** /* FreeRTOS includes. */
  38:FreeRTOS/event_groups.c **** #include "FreeRTOS.h"
  39:FreeRTOS/event_groups.c **** #include "task.h"
  40:FreeRTOS/event_groups.c **** #include "timers.h"
  41:FreeRTOS/event_groups.c **** #include "event_groups.h"
  42:FreeRTOS/event_groups.c **** 
  43:FreeRTOS/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  44:FreeRTOS/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  46:FreeRTOS/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  48:FreeRTOS/event_groups.c **** 
  49:FreeRTOS/event_groups.c **** /* The following bit fields convey control information in a task's event list
  50:FreeRTOS/event_groups.c ****  * item value.  It is important they don't clash with the
  51:FreeRTOS/event_groups.c ****  * taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  52:FreeRTOS/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  53:FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x0100U
  54:FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x0200U
  55:FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x0400U
  56:FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff00U
  57:FreeRTOS/event_groups.c **** #else
  58:FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x01000000UL
  59:FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x02000000UL
  60:FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x04000000UL
  61:FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff000000UL
  62:FreeRTOS/event_groups.c **** #endif
  63:FreeRTOS/event_groups.c **** 
  64:FreeRTOS/event_groups.c **** typedef struct EventGroupDef_t
  65:FreeRTOS/event_groups.c **** {
  66:FreeRTOS/event_groups.c ****     EventBits_t uxEventBits;
  67:FreeRTOS/event_groups.c ****     List_t xTasksWaitingForBits; /*< List of tasks waiting for a bit to be set. */
  68:FreeRTOS/event_groups.c **** 
  69:FreeRTOS/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  70:FreeRTOS/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  71:FreeRTOS/event_groups.c ****     #endif
  72:FreeRTOS/event_groups.c **** 
  73:FreeRTOS/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  74:FreeRTOS/event_groups.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated
  75:FreeRTOS/event_groups.c ****     #endif
  76:FreeRTOS/event_groups.c **** } EventGroup_t;
  77:FreeRTOS/event_groups.c **** 
  78:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  79:FreeRTOS/event_groups.c **** 
  80:FreeRTOS/event_groups.c **** /*
  81:FreeRTOS/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  82:FreeRTOS/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  83:FreeRTOS/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  84:FreeRTOS/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  85:FreeRTOS/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  86:FreeRTOS/event_groups.c ****  * in uxCurrentEventBits.
  87:FreeRTOS/event_groups.c ****  */
  88:FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  89:FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
  90:FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  91:FreeRTOS/event_groups.c **** 
ARM GAS  /tmp/ccCouRNO.s 			page 3


  92:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  93:FreeRTOS/event_groups.c **** 
  94:FreeRTOS/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  95:FreeRTOS/event_groups.c **** 
  96:FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  97:FreeRTOS/event_groups.c ****     {
  98:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  99:FreeRTOS/event_groups.c **** 
 100:FreeRTOS/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
 101:FreeRTOS/event_groups.c ****         configASSERT( pxEventGroupBuffer );
 102:FreeRTOS/event_groups.c **** 
 103:FreeRTOS/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
 104:FreeRTOS/event_groups.c ****             {
 105:FreeRTOS/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
 106:FreeRTOS/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
 107:FreeRTOS/event_groups.c ****                  * event group structure. */
 108:FreeRTOS/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 109:FreeRTOS/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 110:FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 111:FreeRTOS/event_groups.c ****         #endif /* configASSERT_DEFINED */
 112:FreeRTOS/event_groups.c **** 
 113:FreeRTOS/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
 114:FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
 115:FreeRTOS/event_groups.c **** 
 116:FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 117:FreeRTOS/event_groups.c ****         {
 118:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 119:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 120:FreeRTOS/event_groups.c **** 
 121:FreeRTOS/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 122:FreeRTOS/event_groups.c ****                 {
 123:FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 124:FreeRTOS/event_groups.c ****                      * this event group was created statically in case the event group
 125:FreeRTOS/event_groups.c ****                      * is later deleted. */
 126:FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 127:FreeRTOS/event_groups.c ****                 }
 128:FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 129:FreeRTOS/event_groups.c **** 
 130:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 131:FreeRTOS/event_groups.c ****         }
 132:FreeRTOS/event_groups.c ****         else
 133:FreeRTOS/event_groups.c ****         {
 134:FreeRTOS/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 135:FreeRTOS/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 136:FreeRTOS/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 137:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 138:FreeRTOS/event_groups.c ****         }
 139:FreeRTOS/event_groups.c **** 
 140:FreeRTOS/event_groups.c ****         return pxEventBits;
 141:FreeRTOS/event_groups.c ****     }
 142:FreeRTOS/event_groups.c **** 
 143:FreeRTOS/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 144:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 145:FreeRTOS/event_groups.c **** 
 146:FreeRTOS/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 147:FreeRTOS/event_groups.c **** 
 148:FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
ARM GAS  /tmp/ccCouRNO.s 			page 4


 149:FreeRTOS/event_groups.c ****     {
 150:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
 151:FreeRTOS/event_groups.c **** 
 152:FreeRTOS/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 153:FreeRTOS/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 154:FreeRTOS/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 155:FreeRTOS/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 156:FreeRTOS/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 157:FreeRTOS/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 158:FreeRTOS/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 159:FreeRTOS/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 160:FreeRTOS/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 161:FreeRTOS/event_groups.c ****          * where the natural word size of the architecture is less than
 162:FreeRTOS/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 163:FreeRTOS/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 164:FreeRTOS/event_groups.c ****          * of each individual read. */
 165:FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 166:FreeRTOS/event_groups.c **** 
 167:FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 168:FreeRTOS/event_groups.c ****         {
 169:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 170:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 171:FreeRTOS/event_groups.c **** 
 172:FreeRTOS/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 173:FreeRTOS/event_groups.c ****                 {
 174:FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 175:FreeRTOS/event_groups.c ****                      * event group was allocated statically in case the event group is
 176:FreeRTOS/event_groups.c ****                      * later deleted. */
 177:FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 178:FreeRTOS/event_groups.c ****                 }
 179:FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 180:FreeRTOS/event_groups.c **** 
 181:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 182:FreeRTOS/event_groups.c ****         }
 183:FreeRTOS/event_groups.c ****         else
 184:FreeRTOS/event_groups.c ****         {
 185:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 186:FreeRTOS/event_groups.c ****         }
 187:FreeRTOS/event_groups.c **** 
 188:FreeRTOS/event_groups.c ****         return pxEventBits;
 189:FreeRTOS/event_groups.c ****     }
 190:FreeRTOS/event_groups.c **** 
 191:FreeRTOS/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 192:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 193:FreeRTOS/event_groups.c **** 
 194:FreeRTOS/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 195:FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToSet,
 196:FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 197:FreeRTOS/event_groups.c ****                              TickType_t xTicksToWait )
 198:FreeRTOS/event_groups.c **** {
 199:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 200:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 201:FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 202:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 203:FreeRTOS/event_groups.c **** 
 204:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 205:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
ARM GAS  /tmp/ccCouRNO.s 			page 5


 206:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 207:FreeRTOS/event_groups.c ****         {
 208:FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 209:FreeRTOS/event_groups.c ****         }
 210:FreeRTOS/event_groups.c ****     #endif
 211:FreeRTOS/event_groups.c **** 
 212:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 213:FreeRTOS/event_groups.c ****     {
 214:FreeRTOS/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 215:FreeRTOS/event_groups.c **** 
 216:FreeRTOS/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 217:FreeRTOS/event_groups.c **** 
 218:FreeRTOS/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 219:FreeRTOS/event_groups.c ****         {
 220:FreeRTOS/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 221:FreeRTOS/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 222:FreeRTOS/event_groups.c **** 
 223:FreeRTOS/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 224:FreeRTOS/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 225:FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 226:FreeRTOS/event_groups.c **** 
 227:FreeRTOS/event_groups.c ****             xTicksToWait = 0;
 228:FreeRTOS/event_groups.c ****         }
 229:FreeRTOS/event_groups.c ****         else
 230:FreeRTOS/event_groups.c ****         {
 231:FreeRTOS/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 232:FreeRTOS/event_groups.c ****             {
 233:FreeRTOS/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 234:FreeRTOS/event_groups.c **** 
 235:FreeRTOS/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 236:FreeRTOS/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 237:FreeRTOS/event_groups.c ****                  * found.  Then enter the blocked state. */
 238:FreeRTOS/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 239:FreeRTOS/event_groups.c **** 
 240:FreeRTOS/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 241:FreeRTOS/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 242:FreeRTOS/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 243:FreeRTOS/event_groups.c ****                  * assignment is omitted. */
 244:FreeRTOS/event_groups.c ****                 uxReturn = 0;
 245:FreeRTOS/event_groups.c ****             }
 246:FreeRTOS/event_groups.c ****             else
 247:FreeRTOS/event_groups.c ****             {
 248:FreeRTOS/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 249:FreeRTOS/event_groups.c ****                  * specified - just return the current event bit value. */
 250:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 251:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 252:FreeRTOS/event_groups.c ****             }
 253:FreeRTOS/event_groups.c ****         }
 254:FreeRTOS/event_groups.c ****     }
 255:FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 256:FreeRTOS/event_groups.c **** 
 257:FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 258:FreeRTOS/event_groups.c ****     {
 259:FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 260:FreeRTOS/event_groups.c ****         {
 261:FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 262:FreeRTOS/event_groups.c ****         }
ARM GAS  /tmp/ccCouRNO.s 			page 6


 263:FreeRTOS/event_groups.c ****         else
 264:FreeRTOS/event_groups.c ****         {
 265:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 266:FreeRTOS/event_groups.c ****         }
 267:FreeRTOS/event_groups.c **** 
 268:FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 269:FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 270:FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 271:FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 272:FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 273:FreeRTOS/event_groups.c **** 
 274:FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 275:FreeRTOS/event_groups.c ****         {
 276:FreeRTOS/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 277:FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 278:FreeRTOS/event_groups.c ****             {
 279:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 280:FreeRTOS/event_groups.c **** 
 281:FreeRTOS/event_groups.c ****                 /* Although the task got here because it timed out before the
 282:FreeRTOS/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 283:FreeRTOS/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 284:FreeRTOS/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 285:FreeRTOS/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 286:FreeRTOS/event_groups.c ****                 {
 287:FreeRTOS/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 288:FreeRTOS/event_groups.c ****                 }
 289:FreeRTOS/event_groups.c ****                 else
 290:FreeRTOS/event_groups.c ****                 {
 291:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 292:FreeRTOS/event_groups.c ****                 }
 293:FreeRTOS/event_groups.c ****             }
 294:FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 295:FreeRTOS/event_groups.c **** 
 296:FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 297:FreeRTOS/event_groups.c ****         }
 298:FreeRTOS/event_groups.c ****         else
 299:FreeRTOS/event_groups.c ****         {
 300:FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 301:FreeRTOS/event_groups.c ****         }
 302:FreeRTOS/event_groups.c **** 
 303:FreeRTOS/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 304:FreeRTOS/event_groups.c ****          * returned. */
 305:FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 306:FreeRTOS/event_groups.c ****     }
 307:FreeRTOS/event_groups.c **** 
 308:FreeRTOS/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 309:FreeRTOS/event_groups.c **** 
 310:FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 311:FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 312:FreeRTOS/event_groups.c **** 
 313:FreeRTOS/event_groups.c ****     return uxReturn;
 314:FreeRTOS/event_groups.c **** }
 315:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 316:FreeRTOS/event_groups.c **** 
 317:FreeRTOS/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 318:FreeRTOS/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 319:FreeRTOS/event_groups.c ****                                  const BaseType_t xClearOnExit,
ARM GAS  /tmp/ccCouRNO.s 			page 7


 320:FreeRTOS/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 321:FreeRTOS/event_groups.c ****                                  TickType_t xTicksToWait )
 322:FreeRTOS/event_groups.c **** {
 323:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 324:FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 325:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 326:FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 327:FreeRTOS/event_groups.c **** 
 328:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 329:FreeRTOS/event_groups.c ****      * itself, and that at least one bit is being requested. */
 330:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 331:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 332:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 333:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 334:FreeRTOS/event_groups.c ****         {
 335:FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 336:FreeRTOS/event_groups.c ****         }
 337:FreeRTOS/event_groups.c ****     #endif
 338:FreeRTOS/event_groups.c **** 
 339:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 340:FreeRTOS/event_groups.c ****     {
 341:FreeRTOS/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 342:FreeRTOS/event_groups.c **** 
 343:FreeRTOS/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 344:FreeRTOS/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 345:FreeRTOS/event_groups.c **** 
 346:FreeRTOS/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 347:FreeRTOS/event_groups.c ****         {
 348:FreeRTOS/event_groups.c ****             /* The wait condition has already been met so there is no need to
 349:FreeRTOS/event_groups.c ****              * block. */
 350:FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 351:FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 352:FreeRTOS/event_groups.c **** 
 353:FreeRTOS/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 354:FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 355:FreeRTOS/event_groups.c ****             {
 356:FreeRTOS/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 357:FreeRTOS/event_groups.c ****             }
 358:FreeRTOS/event_groups.c ****             else
 359:FreeRTOS/event_groups.c ****             {
 360:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 361:FreeRTOS/event_groups.c ****             }
 362:FreeRTOS/event_groups.c ****         }
 363:FreeRTOS/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 364:FreeRTOS/event_groups.c ****         {
 365:FreeRTOS/event_groups.c ****             /* The wait condition has not been met, but no block time was
 366:FreeRTOS/event_groups.c ****              * specified, so just return the current value. */
 367:FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 368:FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 369:FreeRTOS/event_groups.c ****         }
 370:FreeRTOS/event_groups.c ****         else
 371:FreeRTOS/event_groups.c ****         {
 372:FreeRTOS/event_groups.c ****             /* The task is going to block to wait for its required bits to be
 373:FreeRTOS/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 374:FreeRTOS/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
 375:FreeRTOS/event_groups.c ****              * unblock the task. */
 376:FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
ARM GAS  /tmp/ccCouRNO.s 			page 8


 377:FreeRTOS/event_groups.c ****             {
 378:FreeRTOS/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 379:FreeRTOS/event_groups.c ****             }
 380:FreeRTOS/event_groups.c ****             else
 381:FreeRTOS/event_groups.c ****             {
 382:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 383:FreeRTOS/event_groups.c ****             }
 384:FreeRTOS/event_groups.c **** 
 385:FreeRTOS/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 386:FreeRTOS/event_groups.c ****             {
 387:FreeRTOS/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 388:FreeRTOS/event_groups.c ****             }
 389:FreeRTOS/event_groups.c ****             else
 390:FreeRTOS/event_groups.c ****             {
 391:FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 392:FreeRTOS/event_groups.c ****             }
 393:FreeRTOS/event_groups.c **** 
 394:FreeRTOS/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 395:FreeRTOS/event_groups.c ****              * task's event list item so the kernel knows when a match is
 396:FreeRTOS/event_groups.c ****              * found.  Then enter the blocked state. */
 397:FreeRTOS/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 398:FreeRTOS/event_groups.c **** 
 399:FreeRTOS/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 400:FreeRTOS/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 401:FreeRTOS/event_groups.c ****              * being returned without being set if it is not done. */
 402:FreeRTOS/event_groups.c ****             uxReturn = 0;
 403:FreeRTOS/event_groups.c **** 
 404:FreeRTOS/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 405:FreeRTOS/event_groups.c ****         }
 406:FreeRTOS/event_groups.c ****     }
 407:FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 408:FreeRTOS/event_groups.c **** 
 409:FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 410:FreeRTOS/event_groups.c ****     {
 411:FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 412:FreeRTOS/event_groups.c ****         {
 413:FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 414:FreeRTOS/event_groups.c ****         }
 415:FreeRTOS/event_groups.c ****         else
 416:FreeRTOS/event_groups.c ****         {
 417:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 418:FreeRTOS/event_groups.c ****         }
 419:FreeRTOS/event_groups.c **** 
 420:FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 421:FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 422:FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 423:FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 424:FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 425:FreeRTOS/event_groups.c **** 
 426:FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 427:FreeRTOS/event_groups.c ****         {
 428:FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 429:FreeRTOS/event_groups.c ****             {
 430:FreeRTOS/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 431:FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 432:FreeRTOS/event_groups.c **** 
 433:FreeRTOS/event_groups.c ****                 /* It is possible that the event bits were updated between this
ARM GAS  /tmp/ccCouRNO.s 			page 9


 434:FreeRTOS/event_groups.c ****                  * task leaving the Blocked state and running again. */
 435:FreeRTOS/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 436:FreeRTOS/event_groups.c ****                 {
 437:FreeRTOS/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 438:FreeRTOS/event_groups.c ****                     {
 439:FreeRTOS/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 440:FreeRTOS/event_groups.c ****                     }
 441:FreeRTOS/event_groups.c ****                     else
 442:FreeRTOS/event_groups.c ****                     {
 443:FreeRTOS/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 444:FreeRTOS/event_groups.c ****                     }
 445:FreeRTOS/event_groups.c ****                 }
 446:FreeRTOS/event_groups.c ****                 else
 447:FreeRTOS/event_groups.c ****                 {
 448:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 449:FreeRTOS/event_groups.c ****                 }
 450:FreeRTOS/event_groups.c **** 
 451:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 452:FreeRTOS/event_groups.c ****             }
 453:FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 454:FreeRTOS/event_groups.c ****         }
 455:FreeRTOS/event_groups.c ****         else
 456:FreeRTOS/event_groups.c ****         {
 457:FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 458:FreeRTOS/event_groups.c ****         }
 459:FreeRTOS/event_groups.c **** 
 460:FreeRTOS/event_groups.c ****         /* The task blocked so control bits may have been set. */
 461:FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 462:FreeRTOS/event_groups.c ****     }
 463:FreeRTOS/event_groups.c **** 
 464:FreeRTOS/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 465:FreeRTOS/event_groups.c **** 
 466:FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 467:FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 468:FreeRTOS/event_groups.c **** 
 469:FreeRTOS/event_groups.c ****     return uxReturn;
 470:FreeRTOS/event_groups.c **** }
 471:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 472:FreeRTOS/event_groups.c **** 
 473:FreeRTOS/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 474:FreeRTOS/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 475:FreeRTOS/event_groups.c **** {
 476:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 477:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 478:FreeRTOS/event_groups.c **** 
 479:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 480:FreeRTOS/event_groups.c ****      * itself. */
 481:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 482:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 483:FreeRTOS/event_groups.c **** 
 484:FreeRTOS/event_groups.c ****     taskENTER_CRITICAL();
 485:FreeRTOS/event_groups.c ****     {
 486:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 487:FreeRTOS/event_groups.c **** 
 488:FreeRTOS/event_groups.c ****         /* The value returned is the event group value prior to the bits being
 489:FreeRTOS/event_groups.c ****          * cleared. */
 490:FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
ARM GAS  /tmp/ccCouRNO.s 			page 10


 491:FreeRTOS/event_groups.c **** 
 492:FreeRTOS/event_groups.c ****         /* Clear the bits. */
 493:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 494:FreeRTOS/event_groups.c ****     }
 495:FreeRTOS/event_groups.c ****     taskEXIT_CRITICAL();
 496:FreeRTOS/event_groups.c **** 
 497:FreeRTOS/event_groups.c ****     return uxReturn;
 498:FreeRTOS/event_groups.c **** }
 499:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 500:FreeRTOS/event_groups.c **** 
 501:FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 502:FreeRTOS/event_groups.c **** 
 503:FreeRTOS/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 504:FreeRTOS/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 505:FreeRTOS/event_groups.c ****     {
 506:FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 507:FreeRTOS/event_groups.c **** 
 508:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 509:FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 510:FreeRTOS/event_groups.c **** 
 511:FreeRTOS/event_groups.c ****         return xReturn;
 512:FreeRTOS/event_groups.c ****     }
 513:FreeRTOS/event_groups.c **** 
 514:FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 515:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 516:FreeRTOS/event_groups.c **** 
 517:FreeRTOS/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 518:FreeRTOS/event_groups.c **** {
 519:FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 520:FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 521:FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 522:FreeRTOS/event_groups.c **** 
 523:FreeRTOS/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 524:FreeRTOS/event_groups.c ****     {
 525:FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 526:FreeRTOS/event_groups.c ****     }
 527:FreeRTOS/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 528:FreeRTOS/event_groups.c **** 
 529:FreeRTOS/event_groups.c ****     return uxReturn;
 530:FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 531:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 532:FreeRTOS/event_groups.c **** 
 533:FreeRTOS/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 534:FreeRTOS/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 535:FreeRTOS/event_groups.c **** {
 536:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 537:FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 538:FreeRTOS/event_groups.c ****     List_t const * pxList;
 539:FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 540:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 541:FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 542:FreeRTOS/event_groups.c **** 
 543:FreeRTOS/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
 544:FreeRTOS/event_groups.c ****      * itself. */
 545:FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 546:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 547:FreeRTOS/event_groups.c **** 
ARM GAS  /tmp/ccCouRNO.s 			page 11


 548:FreeRTOS/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 549:FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 550:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 551:FreeRTOS/event_groups.c ****     {
 552:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 553:FreeRTOS/event_groups.c **** 
 554:FreeRTOS/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 555:FreeRTOS/event_groups.c **** 
 556:FreeRTOS/event_groups.c ****         /* Set the bits. */
 557:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 558:FreeRTOS/event_groups.c **** 
 559:FreeRTOS/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 560:FreeRTOS/event_groups.c ****         while( pxListItem != pxListEnd )
 561:FreeRTOS/event_groups.c ****         {
 562:FreeRTOS/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 563:FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 564:FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 565:FreeRTOS/event_groups.c **** 
 566:FreeRTOS/event_groups.c ****             /* Split the bits waited for from the control bits. */
 567:FreeRTOS/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 568:FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 569:FreeRTOS/event_groups.c **** 
 570:FreeRTOS/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 571:FreeRTOS/event_groups.c ****             {
 572:FreeRTOS/event_groups.c ****                 /* Just looking for single bit being set. */
 573:FreeRTOS/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 574:FreeRTOS/event_groups.c ****                 {
 575:FreeRTOS/event_groups.c ****                     xMatchFound = pdTRUE;
 576:FreeRTOS/event_groups.c ****                 }
 577:FreeRTOS/event_groups.c ****                 else
 578:FreeRTOS/event_groups.c ****                 {
 579:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 580:FreeRTOS/event_groups.c ****                 }
 581:FreeRTOS/event_groups.c ****             }
 582:FreeRTOS/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 583:FreeRTOS/event_groups.c ****             {
 584:FreeRTOS/event_groups.c ****                 /* All bits are set. */
 585:FreeRTOS/event_groups.c ****                 xMatchFound = pdTRUE;
 586:FreeRTOS/event_groups.c ****             }
 587:FreeRTOS/event_groups.c ****             else
 588:FreeRTOS/event_groups.c ****             {
 589:FreeRTOS/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 590:FreeRTOS/event_groups.c ****             }
 591:FreeRTOS/event_groups.c **** 
 592:FreeRTOS/event_groups.c ****             if( xMatchFound != pdFALSE )
 593:FreeRTOS/event_groups.c ****             {
 594:FreeRTOS/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 595:FreeRTOS/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 596:FreeRTOS/event_groups.c ****                 {
 597:FreeRTOS/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 598:FreeRTOS/event_groups.c ****                 }
 599:FreeRTOS/event_groups.c ****                 else
 600:FreeRTOS/event_groups.c ****                 {
 601:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 602:FreeRTOS/event_groups.c ****                 }
 603:FreeRTOS/event_groups.c **** 
 604:FreeRTOS/event_groups.c ****                 /* Store the actual event flag value in the task's event list
ARM GAS  /tmp/ccCouRNO.s 			page 12


 605:FreeRTOS/event_groups.c ****                  * item before removing the task from the event list.  The
 606:FreeRTOS/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 607:FreeRTOS/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 608:FreeRTOS/event_groups.c ****                  * than because it timed out. */
 609:FreeRTOS/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 610:FreeRTOS/event_groups.c ****             }
 611:FreeRTOS/event_groups.c **** 
 612:FreeRTOS/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 613:FreeRTOS/event_groups.c ****              * used here as the list item may have been removed from the event list
 614:FreeRTOS/event_groups.c ****              * and inserted into the ready/pending reading list. */
 615:FreeRTOS/event_groups.c ****             pxListItem = pxNext;
 616:FreeRTOS/event_groups.c ****         }
 617:FreeRTOS/event_groups.c **** 
 618:FreeRTOS/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 619:FreeRTOS/event_groups.c ****          * bit was set in the control word. */
 620:FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 621:FreeRTOS/event_groups.c ****     }
 622:FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 623:FreeRTOS/event_groups.c **** 
 624:FreeRTOS/event_groups.c ****     return pxEventBits->uxEventBits;
 625:FreeRTOS/event_groups.c **** }
 626:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 627:FreeRTOS/event_groups.c **** 
 628:FreeRTOS/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 629:FreeRTOS/event_groups.c **** {
 630:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 631:FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 632:FreeRTOS/event_groups.c **** 
 633:FreeRTOS/event_groups.c ****     configASSERT( pxEventBits );
 634:FreeRTOS/event_groups.c **** 
 635:FreeRTOS/event_groups.c ****     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 636:FreeRTOS/event_groups.c **** 
 637:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 638:FreeRTOS/event_groups.c ****     {
 639:FreeRTOS/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 640:FreeRTOS/event_groups.c **** 
 641:FreeRTOS/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 642:FreeRTOS/event_groups.c ****         {
 643:FreeRTOS/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 644:FreeRTOS/event_groups.c ****              * and cannot therefore have any bits set. */
 645:FreeRTOS/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 646:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 647:FreeRTOS/event_groups.c ****         }
 648:FreeRTOS/event_groups.c **** 
 649:FreeRTOS/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 650:FreeRTOS/event_groups.c ****             {
 651:FreeRTOS/event_groups.c ****                 /* The event group can only have been allocated dynamically - free
 652:FreeRTOS/event_groups.c ****                  * it again. */
 653:FreeRTOS/event_groups.c ****                 vPortFree( pxEventBits );
 654:FreeRTOS/event_groups.c ****             }
 655:FreeRTOS/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 656:FreeRTOS/event_groups.c ****             {
 657:FreeRTOS/event_groups.c ****                 /* The event group could have been allocated statically or
 658:FreeRTOS/event_groups.c ****                  * dynamically, so check before attempting to free the memory. */
 659:FreeRTOS/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 660:FreeRTOS/event_groups.c ****                 {
 661:FreeRTOS/event_groups.c ****                     vPortFree( pxEventBits );
ARM GAS  /tmp/ccCouRNO.s 			page 13


 662:FreeRTOS/event_groups.c ****                 }
 663:FreeRTOS/event_groups.c ****                 else
 664:FreeRTOS/event_groups.c ****                 {
 665:FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 666:FreeRTOS/event_groups.c ****                 }
 667:FreeRTOS/event_groups.c ****             }
 668:FreeRTOS/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 669:FreeRTOS/event_groups.c ****     }
 670:FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 671:FreeRTOS/event_groups.c **** }
 672:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 673:FreeRTOS/event_groups.c **** 
 674:FreeRTOS/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 675:FreeRTOS/event_groups.c ****  * an interrupt. */
 676:FreeRTOS/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 677:FreeRTOS/event_groups.c ****                                  const uint32_t ulBitsToSet )
 678:FreeRTOS/event_groups.c **** {
 679:FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 680:FreeRTOS/event_groups.c **** }
 681:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 682:FreeRTOS/event_groups.c **** 
 683:FreeRTOS/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 684:FreeRTOS/event_groups.c ****  * an interrupt. */
 685:FreeRTOS/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 686:FreeRTOS/event_groups.c ****                                    const uint32_t ulBitsToClear )
 687:FreeRTOS/event_groups.c **** {
 688:FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 689:FreeRTOS/event_groups.c **** }
 690:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 691:FreeRTOS/event_groups.c **** 
 692:FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 693:FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 694:FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 695:FreeRTOS/event_groups.c **** {
  25              		.loc 1 695 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 696:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
 697:FreeRTOS/event_groups.c **** 
 698:FreeRTOS/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
  31              		.loc 1 698 0
  32 0000 1AB9     		cbnz	r2, .L2
 699:FreeRTOS/event_groups.c ****     {
 700:FreeRTOS/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 701:FreeRTOS/event_groups.c ****          * set.  Is one already set? */
 702:FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  33              		.loc 1 702 0
  34 0002 0842     		tst	r0, r1
  35 0004 06D1     		bne	.L4
 696:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
  36              		.loc 1 696 0
  37 0006 0020     		movs	r0, #0
  38              	.LVL1:
  39 0008 7047     		bx	lr
ARM GAS  /tmp/ccCouRNO.s 			page 14


  40              	.LVL2:
  41              	.L2:
 703:FreeRTOS/event_groups.c ****         {
 704:FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
 705:FreeRTOS/event_groups.c ****         }
 706:FreeRTOS/event_groups.c ****         else
 707:FreeRTOS/event_groups.c ****         {
 708:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 709:FreeRTOS/event_groups.c ****         }
 710:FreeRTOS/event_groups.c ****     }
 711:FreeRTOS/event_groups.c ****     else
 712:FreeRTOS/event_groups.c ****     {
 713:FreeRTOS/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 714:FreeRTOS/event_groups.c ****          * Are they set already? */
 715:FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  42              		.loc 1 715 0
  43 000a 31EA0003 		bics	r3, r1, r0
  44 000e 03D0     		beq	.L5
 696:FreeRTOS/event_groups.c **** 
  45              		.loc 1 696 0
  46 0010 0020     		movs	r0, #0
  47              	.LVL3:
  48 0012 7047     		bx	lr
  49              	.LVL4:
  50              	.L4:
 704:FreeRTOS/event_groups.c ****         }
  51              		.loc 1 704 0
  52 0014 0120     		movs	r0, #1
  53              	.LVL5:
  54 0016 7047     		bx	lr
  55              	.LVL6:
  56              	.L5:
 716:FreeRTOS/event_groups.c ****         {
 717:FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
  57              		.loc 1 717 0
  58 0018 0120     		movs	r0, #1
  59              	.LVL7:
 718:FreeRTOS/event_groups.c ****         }
 719:FreeRTOS/event_groups.c ****         else
 720:FreeRTOS/event_groups.c ****         {
 721:FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 722:FreeRTOS/event_groups.c ****         }
 723:FreeRTOS/event_groups.c ****     }
 724:FreeRTOS/event_groups.c **** 
 725:FreeRTOS/event_groups.c ****     return xWaitConditionMet;
 726:FreeRTOS/event_groups.c **** }
  60              		.loc 1 726 0
  61 001a 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE14:
  65              		.section	.text.xEventGroupCreate,"ax",%progbits
  66              		.align	1
  67              		.global	xEventGroupCreate
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
ARM GAS  /tmp/ccCouRNO.s 			page 15


  73              	xEventGroupCreate:
  74              	.LFB5:
 149:FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  75              		.loc 1 149 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
 165:FreeRTOS/event_groups.c **** 
  84              		.loc 1 165 0
  85 0002 1820     		movs	r0, #24
  86 0004 FFF7FEFF 		bl	pvPortMalloc
  87              	.LVL8:
 167:FreeRTOS/event_groups.c ****         {
  88              		.loc 1 167 0
  89 0008 0446     		mov	r4, r0
  90 000a 20B1     		cbz	r0, .L6
 169:FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  91              		.loc 1 169 0
  92 000c 0023     		movs	r3, #0
  93 000e 40F8043B 		str	r3, [r0], #4
  94              	.LVL9:
 170:FreeRTOS/event_groups.c **** 
  95              		.loc 1 170 0
  96 0012 FFF7FEFF 		bl	vListInitialise
  97              	.LVL10:
  98              	.L6:
 189:FreeRTOS/event_groups.c **** 
  99              		.loc 1 189 0
 100 0016 2046     		mov	r0, r4
 101 0018 10BD     		pop	{r4, pc}
 102              		.cfi_endproc
 103              	.LFE5:
 105              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 106              		.align	1
 107              		.global	xEventGroupWaitBits
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu softvfp
 113              	xEventGroupWaitBits:
 114              	.LFB7:
 322:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 115              		.loc 1 322 0
 116              		.cfi_startproc
 117              		@ args = 4, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL11:
 120 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 32
 123              		.cfi_offset 4, -32
 124              		.cfi_offset 5, -28
ARM GAS  /tmp/ccCouRNO.s 			page 16


 125              		.cfi_offset 6, -24
 126              		.cfi_offset 7, -20
 127              		.cfi_offset 8, -16
 128              		.cfi_offset 9, -12
 129              		.cfi_offset 10, -8
 130              		.cfi_offset 14, -4
 131 0004 DDF82090 		ldr	r9, [sp, #32]
 132              	.LVL12:
 330:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 133              		.loc 1 330 0
 134 0008 60B1     		cbz	r0, .L29
 135 000a 0646     		mov	r6, r0
 331:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 136              		.loc 1 331 0
 137 000c 11F07F4A 		ands	r10, r1, #-16777216
 138 0010 11D0     		beq	.L12
 139              	.LBB33:
 140              	.LBB34:
 141              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** 
  30:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/ARM_CM3/portmacro.h **** 
  33:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/ARM_CM3/portmacro.h ****         extern "C" {
  35:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  36:FreeRTOS/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
ARM GAS  /tmp/ccCouRNO.s 			page 17


  39:FreeRTOS/ARM_CM3/portmacro.h ****  *
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/ARM_CM3/portmacro.h ****  *
  43:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/ARM_CM3/portmacro.h ****  */
  46:FreeRTOS/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/ARM_CM3/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/ARM_CM3/portmacro.h ****     #else
  64:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  71:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/ARM_CM3/portmacro.h **** 
  73:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/ARM_CM3/portmacro.h **** 
  80:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/ARM_CM3/portmacro.h ****     {                                                   \
  83:FreeRTOS/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/ARM_CM3/portmacro.h ****                                                         \
  86:FreeRTOS/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/ARM_CM3/portmacro.h ****     }
  91:FreeRTOS/ARM_CM3/portmacro.h **** 
  92:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
ARM GAS  /tmp/ccCouRNO.s 			page 18


  96:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/ARM_CM3/portmacro.h **** 
  98:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 122:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/ARM_CM3/portmacro.h **** 
 124:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/ARM_CM3/portmacro.h **** 
 131:FreeRTOS/ARM_CM3/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/ARM_CM3/portmacro.h ****         {
 134:FreeRTOS/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/ARM_CM3/portmacro.h **** 
 136:FreeRTOS/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h ****             return ucReturn;
 139:FreeRTOS/ARM_CM3/portmacro.h ****         }
 140:FreeRTOS/ARM_CM3/portmacro.h **** 
 141:FreeRTOS/ARM_CM3/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/ARM_CM3/portmacro.h ****         #endif
 145:FreeRTOS/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/ARM_CM3/portmacro.h **** 
 152:FreeRTOS/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
ARM GAS  /tmp/ccCouRNO.s 			page 19


 153:FreeRTOS/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNOP()
 165:FreeRTOS/ARM_CM3/portmacro.h **** 
 166:FreeRTOS/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/ARM_CM3/portmacro.h **** 
 168:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 171:FreeRTOS/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:FreeRTOS/ARM_CM3/portmacro.h ****     {
 176:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:FreeRTOS/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 178:FreeRTOS/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:FreeRTOS/ARM_CM3/portmacro.h **** 
 182:FreeRTOS/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:FreeRTOS/ARM_CM3/portmacro.h ****         {
 184:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 185:FreeRTOS/ARM_CM3/portmacro.h ****         }
 186:FreeRTOS/ARM_CM3/portmacro.h ****         else
 187:FreeRTOS/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 189:FreeRTOS/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h ****         return xReturn;
 192:FreeRTOS/ARM_CM3/portmacro.h ****     }
 193:FreeRTOS/ARM_CM3/portmacro.h **** 
 194:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 195:FreeRTOS/ARM_CM3/portmacro.h **** 
 196:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:FreeRTOS/ARM_CM3/portmacro.h ****     {
 198:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:FreeRTOS/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 142              		.loc 2 200 0
 143              		.syntax unified
 144              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 145 0012 4FF05003 			mov r3, #80												
 146 0016 83F31188 		msr basepri, r3											
 147 001a BFF36F8F 		isb														
 148 001e BFF34F8F 		dsb														
 149              	
 150              	@ 0 "" 2
ARM GAS  /tmp/ccCouRNO.s 			page 20


 151              	.LVL13:
 152              		.thumb
 153              		.syntax unified
 154              	.L13:
 155 0022 FEE7     		b	.L13
 156              	.LVL14:
 157              	.L29:
 158              	.LBE34:
 159              	.LBE33:
 160              	.LBB35:
 161              	.LBB36:
 162              		.syntax unified
 163              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 164 0024 4FF05003 			mov r3, #80												
 165 0028 83F31188 		msr basepri, r3											
 166 002c BFF36F8F 		isb														
 167 0030 BFF34F8F 		dsb														
 168              	
 169              	@ 0 "" 2
 170              	.LVL15:
 171              		.thumb
 172              		.syntax unified
 173              	.L11:
 174 0034 FEE7     		b	.L11
 175              	.LVL16:
 176              	.L12:
 177              	.LBE36:
 178              	.LBE35:
 332:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 179              		.loc 1 332 0
 180 0036 41B9     		cbnz	r1, .L14
 181              	.LBB37:
 182              	.LBB38:
 183              		.loc 2 200 0
 184              		.syntax unified
 185              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 186 0038 4FF05003 			mov r3, #80												
 187 003c 83F31188 		msr basepri, r3											
 188 0040 BFF36F8F 		isb														
 189 0044 BFF34F8F 		dsb														
 190              	
 191              	@ 0 "" 2
 192              	.LVL17:
 193              		.thumb
 194              		.syntax unified
 195              	.L15:
 196 0048 FEE7     		b	.L15
 197              	.LVL18:
 198              	.L14:
 199 004a 9846     		mov	r8, r3
 200 004c 1746     		mov	r7, r2
 201 004e 0C46     		mov	r4, r1
 202              	.LBE38:
 203              	.LBE37:
 335:FreeRTOS/event_groups.c ****         }
 204              		.loc 1 335 0
 205 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
ARM GAS  /tmp/ccCouRNO.s 			page 21


 206              	.LVL19:
 207 0054 58B9     		cbnz	r0, .L16
 335:FreeRTOS/event_groups.c ****         }
 208              		.loc 1 335 0 is_stmt 0 discriminator 2
 209 0056 B9F1000F 		cmp	r9, #0
 210 005a 08D0     		beq	.L16
 211              	.LBB39:
 212              	.LBB40:
 213              		.loc 2 200 0 is_stmt 1
 214              		.syntax unified
 215              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 216 005c 4FF05003 			mov r3, #80												
 217 0060 83F31188 		msr basepri, r3											
 218 0064 BFF36F8F 		isb														
 219 0068 BFF34F8F 		dsb														
 220              	
 221              	@ 0 "" 2
 222              	.LVL20:
 223              		.thumb
 224              		.syntax unified
 225              	.L17:
 226 006c FEE7     		b	.L17
 227              	.L16:
 228              	.LBE40:
 229              	.LBE39:
 339:FreeRTOS/event_groups.c ****     {
 230              		.loc 1 339 0
 231 006e FFF7FEFF 		bl	vTaskSuspendAll
 232              	.LVL21:
 233              	.LBB41:
 341:FreeRTOS/event_groups.c **** 
 234              		.loc 1 341 0
 235 0072 3568     		ldr	r5, [r6]
 236              	.LVL22:
 344:FreeRTOS/event_groups.c **** 
 237              		.loc 1 344 0
 238 0074 4246     		mov	r2, r8
 239 0076 2146     		mov	r1, r4
 240 0078 2846     		mov	r0, r5
 241 007a FFF7FEFF 		bl	prvTestWaitCondition
 242              	.LVL23:
 346:FreeRTOS/event_groups.c ****         {
 243              		.loc 1 346 0
 244 007e 58B3     		cbz	r0, .L18
 245              	.LVL24:
 354:FreeRTOS/event_groups.c ****             {
 246              		.loc 1 354 0
 247 0080 17B1     		cbz	r7, .L19
 356:FreeRTOS/event_groups.c ****             }
 248              		.loc 1 356 0
 249 0082 25EA0403 		bic	r3, r5, r4
 250 0086 3360     		str	r3, [r6]
 251              	.LVL25:
 252              	.L19:
 253              	.LBE41:
 407:FreeRTOS/event_groups.c **** 
 254              		.loc 1 407 0
ARM GAS  /tmp/ccCouRNO.s 			page 22


 255 0088 FFF7FEFF 		bl	xTaskResumeAll
 256              	.LVL26:
 409:FreeRTOS/event_groups.c ****     {
 257              		.loc 1 409 0
 258 008c BAF1000F 		cmp	r10, #0
 259 0090 1FD0     		beq	.L9
 411:FreeRTOS/event_groups.c ****         {
 260              		.loc 1 411 0
 261 0092 38B9     		cbnz	r0, .L23
 413:FreeRTOS/event_groups.c ****         }
 262              		.loc 1 413 0
 263 0094 1C4B     		ldr	r3, .L30
 264 0096 4FF08052 		mov	r2, #268435456
 265 009a 1A60     		str	r2, [r3]
 266              		.syntax unified
 267              	@ 413 "FreeRTOS/event_groups.c" 1
 268 009c BFF34F8F 		dsb
 269              	@ 0 "" 2
 270              	@ 413 "FreeRTOS/event_groups.c" 1
 271 00a0 BFF36F8F 		isb
 272              	@ 0 "" 2
 273              		.thumb
 274              		.syntax unified
 275              	.L23:
 424:FreeRTOS/event_groups.c **** 
 276              		.loc 1 424 0
 277 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 278              	.LVL27:
 279 00a8 0546     		mov	r5, r0
 280              	.LVL28:
 426:FreeRTOS/event_groups.c ****         {
 281              		.loc 1 426 0
 282 00aa 10F0007F 		tst	r0, #33554432
 283 00ae 0ED1     		bne	.L24
 428:FreeRTOS/event_groups.c ****             {
 284              		.loc 1 428 0
 285 00b0 FFF7FEFF 		bl	vPortEnterCritical
 286              	.LVL29:
 431:FreeRTOS/event_groups.c **** 
 287              		.loc 1 431 0
 288 00b4 3568     		ldr	r5, [r6]
 289              	.LVL30:
 435:FreeRTOS/event_groups.c ****                 {
 290              		.loc 1 435 0
 291 00b6 4246     		mov	r2, r8
 292 00b8 2146     		mov	r1, r4
 293 00ba 2846     		mov	r0, r5
 294 00bc FFF7FEFF 		bl	prvTestWaitCondition
 295              	.LVL31:
 296 00c0 18B1     		cbz	r0, .L25
 437:FreeRTOS/event_groups.c ****                     {
 297              		.loc 1 437 0
 298 00c2 17B1     		cbz	r7, .L25
 439:FreeRTOS/event_groups.c ****                     }
 299              		.loc 1 439 0
 300 00c4 25EA0404 		bic	r4, r5, r4
 301              	.LVL32:
ARM GAS  /tmp/ccCouRNO.s 			page 23


 302 00c8 3460     		str	r4, [r6]
 303              	.L25:
 304              	.LVL33:
 453:FreeRTOS/event_groups.c ****         }
 305              		.loc 1 453 0
 306 00ca FFF7FEFF 		bl	vPortExitCritical
 307              	.LVL34:
 308              	.L24:
 461:FreeRTOS/event_groups.c ****     }
 309              		.loc 1 461 0
 310 00ce 25F07F45 		bic	r5, r5, #-16777216
 311              	.LVL35:
 312              	.L9:
 470:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 470 0
 314 00d2 2846     		mov	r0, r5
 315 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 316              	.LVL36:
 317              	.L18:
 318              	.LBB42:
 363:FreeRTOS/event_groups.c ****         {
 319              		.loc 1 363 0
 320 00d8 B9F1000F 		cmp	r9, #0
 321 00dc 11D0     		beq	.L26
 376:FreeRTOS/event_groups.c ****             {
 322              		.loc 1 376 0
 323 00de 6FB9     		cbnz	r7, .L27
 324              	.LBE42:
 324:FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 325              		.loc 1 324 0
 326 00e0 0021     		movs	r1, #0
 327              	.L20:
 328              	.LVL37:
 329              	.LBB43:
 385:FreeRTOS/event_groups.c ****             {
 330              		.loc 1 385 0
 331 00e2 B8F1000F 		cmp	r8, #0
 332 00e6 01D0     		beq	.L21
 387:FreeRTOS/event_groups.c ****             }
 333              		.loc 1 387 0
 334 00e8 41F08061 		orr	r1, r1, #67108864
 335              	.LVL38:
 336              	.L21:
 397:FreeRTOS/event_groups.c **** 
 337              		.loc 1 397 0
 338 00ec 4A46     		mov	r2, r9
 339 00ee 2143     		orrs	r1, r1, r4
 340              	.LVL39:
 341 00f0 301D     		adds	r0, r6, #4
 342              	.LVL40:
 343 00f2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 344              	.LVL41:
 345 00f6 CA46     		mov	r10, r9
 402:FreeRTOS/event_groups.c **** 
 346              		.loc 1 402 0
 347 00f8 0025     		movs	r5, #0
 348              	.LVL42:
ARM GAS  /tmp/ccCouRNO.s 			page 24


 349 00fa C5E7     		b	.L19
 350              	.LVL43:
 351              	.L27:
 378:FreeRTOS/event_groups.c ****             }
 352              		.loc 1 378 0
 353 00fc 4FF08071 		mov	r1, #16777216
 354 0100 EFE7     		b	.L20
 355              	.L26:
 356 0102 CA46     		mov	r10, r9
 357 0104 C0E7     		b	.L19
 358              	.L31:
 359 0106 00BF     		.align	2
 360              	.L30:
 361 0108 04ED00E0 		.word	-536810236
 362              	.LBE43:
 363              		.cfi_endproc
 364              	.LFE7:
 366              		.section	.text.xEventGroupClearBits,"ax",%progbits
 367              		.align	1
 368              		.global	xEventGroupClearBits
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu softvfp
 374              	xEventGroupClearBits:
 375              	.LFB8:
 475:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 376              		.loc 1 475 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              	.LVL44:
 481:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 381              		.loc 1 481 0
 382 0000 40B9     		cbnz	r0, .L33
 383              	.LBB44:
 384              	.LBB45:
 385              		.loc 2 200 0
 386              		.syntax unified
 387              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 388 0002 4FF05003 			mov r3, #80												
 389 0006 83F31188 		msr basepri, r3											
 390 000a BFF36F8F 		isb														
 391 000e BFF34F8F 		dsb														
 392              	
 393              	@ 0 "" 2
 394              	.LVL45:
 395              		.thumb
 396              		.syntax unified
 397              	.L34:
 398 0012 FEE7     		b	.L34
 399              	.L33:
 400              	.LBE45:
 401              	.LBE44:
 475:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 402              		.loc 1 475 0
 403 0014 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccCouRNO.s 			page 25


 404              	.LCFI2:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 4, -16
 407              		.cfi_offset 5, -12
 408              		.cfi_offset 6, -8
 409              		.cfi_offset 14, -4
 410 0016 0546     		mov	r5, r0
 482:FreeRTOS/event_groups.c **** 
 411              		.loc 1 482 0
 412 0018 11F07F4F 		tst	r1, #-16777216
 413 001c 08D0     		beq	.L35
 414              	.LBB46:
 415              	.LBB47:
 416              		.loc 2 200 0
 417              		.syntax unified
 418              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 419 001e 4FF05003 			mov r3, #80												
 420 0022 83F31188 		msr basepri, r3											
 421 0026 BFF36F8F 		isb														
 422 002a BFF34F8F 		dsb														
 423              	
 424              	@ 0 "" 2
 425              	.LVL46:
 426              		.thumb
 427              		.syntax unified
 428              	.L36:
 429 002e FEE7     		b	.L36
 430              	.L35:
 431 0030 0C46     		mov	r4, r1
 432              	.LBE47:
 433              	.LBE46:
 484:FreeRTOS/event_groups.c ****     {
 434              		.loc 1 484 0
 435 0032 FFF7FEFF 		bl	vPortEnterCritical
 436              	.LVL47:
 490:FreeRTOS/event_groups.c **** 
 437              		.loc 1 490 0
 438 0036 2E68     		ldr	r6, [r5]
 439              	.LVL48:
 493:FreeRTOS/event_groups.c ****     }
 440              		.loc 1 493 0
 441 0038 26EA0404 		bic	r4, r6, r4
 442              	.LVL49:
 443 003c 2C60     		str	r4, [r5]
 495:FreeRTOS/event_groups.c **** 
 444              		.loc 1 495 0
 445 003e FFF7FEFF 		bl	vPortExitCritical
 446              	.LVL50:
 498:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 447              		.loc 1 498 0
 448 0042 3046     		mov	r0, r6
 449 0044 70BD     		pop	{r4, r5, r6, pc}
 450              		.cfi_endproc
 451              	.LFE8:
 453              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 454              		.align	1
 455              		.global	xEventGroupGetBitsFromISR
ARM GAS  /tmp/ccCouRNO.s 			page 26


 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu softvfp
 461              	xEventGroupGetBitsFromISR:
 462              	.LFB9:
 518:FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 463              		.loc 1 518 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468              	.LVL51:
 469              	.LBB48:
 470              	.LBB49:
 201:FreeRTOS/ARM_CM3/portmacro.h ****         (
 202:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 203:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 204:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 205:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 206:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:FreeRTOS/ARM_CM3/portmacro.h ****         );
 208:FreeRTOS/ARM_CM3/portmacro.h ****     }
 209:FreeRTOS/ARM_CM3/portmacro.h **** 
 210:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 211:FreeRTOS/ARM_CM3/portmacro.h **** 
 212:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 213:FreeRTOS/ARM_CM3/portmacro.h ****     {
 214:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 215:FreeRTOS/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 471              		.loc 2 216 0
 472              		.syntax unified
 473              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 474 0000 EFF31183 			mrs r3, basepri											
 475 0004 4FF05002 		mov r2, #80												
 476 0008 82F31188 		msr basepri, r2											
 477 000c BFF36F8F 		isb														
 478 0010 BFF34F8F 		dsb														
 479              	
 480              	@ 0 "" 2
 481              		.thumb
 482              		.syntax unified
 483              	.LBE49:
 484              	.LBE48:
 525:FreeRTOS/event_groups.c ****     }
 485              		.loc 1 525 0
 486 0014 0068     		ldr	r0, [r0]
 487              	.LVL52:
 488              	.LBB50:
 489              	.LBB51:
 217:FreeRTOS/ARM_CM3/portmacro.h ****         (
 218:FreeRTOS/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 220:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 221:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 222:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
ARM GAS  /tmp/ccCouRNO.s 			page 27


 223:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:FreeRTOS/ARM_CM3/portmacro.h ****         );
 225:FreeRTOS/ARM_CM3/portmacro.h **** 
 226:FreeRTOS/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:FreeRTOS/ARM_CM3/portmacro.h ****          * warnings. */
 228:FreeRTOS/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 229:FreeRTOS/ARM_CM3/portmacro.h ****     }
 230:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 231:FreeRTOS/ARM_CM3/portmacro.h **** 
 232:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 233:FreeRTOS/ARM_CM3/portmacro.h ****     {
 234:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 490              		.loc 2 234 0
 491              		.syntax unified
 492              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 493 0016 83F31188 			msr basepri, r3	
 494              	@ 0 "" 2
 495              		.thumb
 496              		.syntax unified
 497              	.LBE51:
 498              	.LBE50:
 530:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 499              		.loc 1 530 0
 500 001a 7047     		bx	lr
 501              		.cfi_endproc
 502              	.LFE9:
 504              		.section	.text.xEventGroupSetBits,"ax",%progbits
 505              		.align	1
 506              		.global	xEventGroupSetBits
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu softvfp
 512              	xEventGroupSetBits:
 513              	.LFB10:
 535:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 514              		.loc 1 535 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              	.LVL53:
 519 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 520              	.LCFI3:
 521              		.cfi_def_cfa_offset 24
 522              		.cfi_offset 3, -24
 523              		.cfi_offset 4, -20
 524              		.cfi_offset 5, -16
 525              		.cfi_offset 6, -12
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528              	.LVL54:
 545:FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 529              		.loc 1 545 0
 530 0002 40B9     		cbnz	r0, .L41
 531              	.LBB52:
 532              	.LBB53:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
ARM GAS  /tmp/ccCouRNO.s 			page 28


 533              		.loc 2 200 0
 534              		.syntax unified
 535              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 536 0004 4FF05003 			mov r3, #80												
 537 0008 83F31188 		msr basepri, r3											
 538 000c BFF36F8F 		isb														
 539 0010 BFF34F8F 		dsb														
 540              	
 541              	@ 0 "" 2
 542              	.LVL55:
 543              		.thumb
 544              		.syntax unified
 545              	.L42:
 546 0014 FEE7     		b	.L42
 547              	.L41:
 548 0016 0446     		mov	r4, r0
 549              	.LBE53:
 550              	.LBE52:
 546:FreeRTOS/event_groups.c **** 
 551              		.loc 1 546 0
 552 0018 11F07F4F 		tst	r1, #-16777216
 553 001c 08D0     		beq	.L43
 554              	.LBB54:
 555              	.LBB55:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 556              		.loc 2 200 0
 557              		.syntax unified
 558              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 559 001e 4FF05003 			mov r3, #80												
 560 0022 83F31188 		msr basepri, r3											
 561 0026 BFF36F8F 		isb														
 562 002a BFF34F8F 		dsb														
 563              	
 564              	@ 0 "" 2
 565              	.LVL56:
 566              		.thumb
 567              		.syntax unified
 568              	.L44:
 569 002e FEE7     		b	.L44
 570              	.L43:
 571 0030 0D46     		mov	r5, r1
 572              	.LVL57:
 573              	.LBE55:
 574              	.LBE54:
 549:FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 575              		.loc 1 549 0
 576 0032 00F10C06 		add	r6, r0, #12
 577              	.LVL58:
 550:FreeRTOS/event_groups.c ****     {
 578              		.loc 1 550 0
 579 0036 FFF7FEFF 		bl	vTaskSuspendAll
 580              	.LVL59:
 554:FreeRTOS/event_groups.c **** 
 581              		.loc 1 554 0
 582 003a 2069     		ldr	r0, [r4, #16]
 583              	.LVL60:
 557:FreeRTOS/event_groups.c **** 
ARM GAS  /tmp/ccCouRNO.s 			page 29


 584              		.loc 1 557 0
 585 003c 2368     		ldr	r3, [r4]
 586 003e 2B43     		orrs	r3, r3, r5
 587 0040 2360     		str	r3, [r4]
 539:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 588              		.loc 1 539 0
 589 0042 0025     		movs	r5, #0
 590              	.LVL61:
 560:FreeRTOS/event_groups.c ****         {
 591              		.loc 1 560 0
 592 0044 04E0     		b	.L45
 593              	.LVL62:
 594              	.L46:
 582:FreeRTOS/event_groups.c ****             {
 595              		.loc 1 582 0
 596 0046 2168     		ldr	r1, [r4]
 597 0048 33EA0101 		bics	r1, r3, r1
 598 004c 0CD0     		beq	.L47
 599              	.LVL63:
 600              	.L48:
 535:FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 601              		.loc 1 535 0
 602 004e 3846     		mov	r0, r7
 603              	.LVL64:
 604              	.L45:
 560:FreeRTOS/event_groups.c ****         {
 605              		.loc 1 560 0
 606 0050 B042     		cmp	r0, r6
 607 0052 13D0     		beq	.L52
 562:FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 608              		.loc 1 562 0
 609 0054 4768     		ldr	r7, [r0, #4]
 610              	.LVL65:
 563:FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 611              		.loc 1 563 0
 612 0056 0268     		ldr	r2, [r0]
 613              	.LVL66:
 568:FreeRTOS/event_groups.c **** 
 614              		.loc 1 568 0
 615 0058 22F07F43 		bic	r3, r2, #-16777216
 616              	.LVL67:
 570:FreeRTOS/event_groups.c ****             {
 617              		.loc 1 570 0
 618 005c 12F0806F 		tst	r2, #67108864
 619 0060 F1D1     		bne	.L46
 573:FreeRTOS/event_groups.c ****                 {
 620              		.loc 1 573 0
 621 0062 2168     		ldr	r1, [r4]
 622 0064 1942     		tst	r1, r3
 623 0066 F2D0     		beq	.L48
 624              	.L47:
 595:FreeRTOS/event_groups.c ****                 {
 625              		.loc 1 595 0
 626 0068 12F0807F 		tst	r2, #16777216
 627 006c 00D0     		beq	.L49
 597:FreeRTOS/event_groups.c ****                 }
 628              		.loc 1 597 0
ARM GAS  /tmp/ccCouRNO.s 			page 30


 629 006e 1D43     		orrs	r5, r5, r3
 630              	.LVL68:
 631              	.L49:
 609:FreeRTOS/event_groups.c ****             }
 632              		.loc 1 609 0
 633 0070 2168     		ldr	r1, [r4]
 634 0072 41F00071 		orr	r1, r1, #33554432
 635 0076 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 636              	.LVL69:
 637 007a E8E7     		b	.L48
 638              	.LVL70:
 639              	.L52:
 620:FreeRTOS/event_groups.c ****     }
 640              		.loc 1 620 0
 641 007c 2368     		ldr	r3, [r4]
 642 007e 23EA0503 		bic	r3, r3, r5
 643 0082 2360     		str	r3, [r4]
 622:FreeRTOS/event_groups.c **** 
 644              		.loc 1 622 0
 645 0084 FFF7FEFF 		bl	xTaskResumeAll
 646              	.LVL71:
 625:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 647              		.loc 1 625 0
 648 0088 2068     		ldr	r0, [r4]
 649 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 650              		.cfi_endproc
 651              	.LFE10:
 653              		.section	.text.xEventGroupSync,"ax",%progbits
 654              		.align	1
 655              		.global	xEventGroupSync
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu softvfp
 661              	xEventGroupSync:
 662              	.LFB6:
 198:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 663              		.loc 1 198 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL72:
 204:FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 668              		.loc 1 204 0
 669 0000 12F07F4F 		tst	r2, #-16777216
 670 0004 08D0     		beq	.L54
 671              	.LBB56:
 672              	.LBB57:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 673              		.loc 2 200 0
 674              		.syntax unified
 675              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 676 0006 4FF05003 			mov r3, #80												
 677 000a 83F31188 		msr basepri, r3											
 678 000e BFF36F8F 		isb														
 679 0012 BFF34F8F 		dsb														
 680              	
ARM GAS  /tmp/ccCouRNO.s 			page 31


 681              	@ 0 "" 2
 682              	.LVL73:
 683              		.thumb
 684              		.syntax unified
 685              	.L55:
 686 0016 FEE7     		b	.L55
 687              	.LVL74:
 688              	.L54:
 689              	.LBE57:
 690              	.LBE56:
 198:FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 691              		.loc 1 198 0
 692 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 693              	.LCFI4:
 694              		.cfi_def_cfa_offset 24
 695              		.cfi_offset 4, -24
 696              		.cfi_offset 5, -20
 697              		.cfi_offset 6, -16
 698              		.cfi_offset 7, -12
 699              		.cfi_offset 8, -8
 700              		.cfi_offset 14, -4
 701 001c 0646     		mov	r6, r0
 702 001e 8846     		mov	r8, r1
 703 0020 1546     		mov	r5, r2
 704 0022 1F46     		mov	r7, r3
 205:FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 705              		.loc 1 205 0
 706 0024 42B9     		cbnz	r2, .L56
 707              	.LBB58:
 708              	.LBB59:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 709              		.loc 2 200 0
 710              		.syntax unified
 711              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 712 0026 4FF05003 			mov r3, #80												
 713 002a 83F31188 		msr basepri, r3											
 714 002e BFF36F8F 		isb														
 715 0032 BFF34F8F 		dsb														
 716              	
 717              	@ 0 "" 2
 718              	.LVL75:
 719              		.thumb
 720              		.syntax unified
 721              	.L57:
 722 0036 FEE7     		b	.L57
 723              	.LVL76:
 724              	.L56:
 725              	.LBE59:
 726              	.LBE58:
 208:FreeRTOS/event_groups.c ****         }
 727              		.loc 1 208 0
 728 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 729              	.LVL77:
 730 003c 48B9     		cbnz	r0, .L58
 208:FreeRTOS/event_groups.c ****         }
 731              		.loc 1 208 0 is_stmt 0 discriminator 2
 732 003e 47B1     		cbz	r7, .L58
ARM GAS  /tmp/ccCouRNO.s 			page 32


 733              	.LBB60:
 734              	.LBB61:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 735              		.loc 2 200 0 is_stmt 1
 736              		.syntax unified
 737              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 738 0040 4FF05003 			mov r3, #80												
 739 0044 83F31188 		msr basepri, r3											
 740 0048 BFF36F8F 		isb														
 741 004c BFF34F8F 		dsb														
 742              	
 743              	@ 0 "" 2
 744              	.LVL78:
 745              		.thumb
 746              		.syntax unified
 747              	.L59:
 748 0050 FEE7     		b	.L59
 749              	.L58:
 750              	.LBE61:
 751              	.LBE60:
 212:FreeRTOS/event_groups.c ****     {
 752              		.loc 1 212 0
 753 0052 FFF7FEFF 		bl	vTaskSuspendAll
 754              	.LVL79:
 214:FreeRTOS/event_groups.c **** 
 755              		.loc 1 214 0
 756 0056 3468     		ldr	r4, [r6]
 757              	.LVL80:
 216:FreeRTOS/event_groups.c **** 
 758              		.loc 1 216 0
 759 0058 4146     		mov	r1, r8
 760 005a 3046     		mov	r0, r6
 761 005c FFF7FEFF 		bl	xEventGroupSetBits
 762              	.LVL81:
 218:FreeRTOS/event_groups.c ****         {
 763              		.loc 1 218 0
 764 0060 44EA0804 		orr	r4, r4, r8
 765              	.LVL82:
 766 0064 35EA0403 		bics	r3, r5, r4
 767 0068 26D1     		bne	.L60
 768              	.LVL83:
 225:FreeRTOS/event_groups.c **** 
 769              		.loc 1 225 0
 770 006a 3368     		ldr	r3, [r6]
 771 006c 23EA0503 		bic	r3, r3, r5
 772 0070 3360     		str	r3, [r6]
 773              	.LVL84:
 227:FreeRTOS/event_groups.c ****         }
 774              		.loc 1 227 0
 775 0072 0027     		movs	r7, #0
 776              	.LVL85:
 777              	.L61:
 255:FreeRTOS/event_groups.c **** 
 778              		.loc 1 255 0
 779 0074 FFF7FEFF 		bl	xTaskResumeAll
 780              	.LVL86:
 257:FreeRTOS/event_groups.c ****     {
ARM GAS  /tmp/ccCouRNO.s 			page 33


 781              		.loc 1 257 0
 782 0078 DFB1     		cbz	r7, .L53
 259:FreeRTOS/event_groups.c ****         {
 783              		.loc 1 259 0
 784 007a 38B9     		cbnz	r0, .L64
 261:FreeRTOS/event_groups.c ****         }
 785              		.loc 1 261 0
 786 007c 144B     		ldr	r3, .L69
 787 007e 4FF08052 		mov	r2, #268435456
 788 0082 1A60     		str	r2, [r3]
 789              		.syntax unified
 790              	@ 261 "FreeRTOS/event_groups.c" 1
 791 0084 BFF34F8F 		dsb
 792              	@ 0 "" 2
 793              	@ 261 "FreeRTOS/event_groups.c" 1
 794 0088 BFF36F8F 		isb
 795              	@ 0 "" 2
 796              		.thumb
 797              		.syntax unified
 798              	.L64:
 272:FreeRTOS/event_groups.c **** 
 799              		.loc 1 272 0
 800 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 801              	.LVL87:
 802 0090 0446     		mov	r4, r0
 803              	.LVL88:
 274:FreeRTOS/event_groups.c ****         {
 804              		.loc 1 274 0
 805 0092 10F0007F 		tst	r0, #33554432
 806 0096 0AD1     		bne	.L65
 277:FreeRTOS/event_groups.c ****             {
 807              		.loc 1 277 0
 808 0098 FFF7FEFF 		bl	vPortEnterCritical
 809              	.LVL89:
 279:FreeRTOS/event_groups.c **** 
 810              		.loc 1 279 0
 811 009c 3468     		ldr	r4, [r6]
 812              	.LVL90:
 285:FreeRTOS/event_groups.c ****                 {
 813              		.loc 1 285 0
 814 009e 35EA0403 		bics	r3, r5, r4
 815 00a2 02D1     		bne	.L66
 287:FreeRTOS/event_groups.c ****                 }
 816              		.loc 1 287 0
 817 00a4 24EA0505 		bic	r5, r4, r5
 818              	.LVL91:
 819 00a8 3560     		str	r5, [r6]
 820              	.L66:
 294:FreeRTOS/event_groups.c **** 
 821              		.loc 1 294 0
 822 00aa FFF7FEFF 		bl	vPortExitCritical
 823              	.LVL92:
 824              	.L65:
 305:FreeRTOS/event_groups.c ****     }
 825              		.loc 1 305 0
 826 00ae 24F07F44 		bic	r4, r4, #-16777216
 827              	.LVL93:
ARM GAS  /tmp/ccCouRNO.s 			page 34


 828              	.L53:
 314:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 829              		.loc 1 314 0
 830 00b2 2046     		mov	r0, r4
 831 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 832              	.LVL94:
 833              	.L60:
 231:FreeRTOS/event_groups.c ****             {
 834              		.loc 1 231 0
 835 00b8 3FB1     		cbz	r7, .L62
 238:FreeRTOS/event_groups.c **** 
 836              		.loc 1 238 0
 837 00ba 3A46     		mov	r2, r7
 838 00bc 45F0A061 		orr	r1, r5, #83886080
 839 00c0 301D     		adds	r0, r6, #4
 840 00c2 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 841              	.LVL95:
 244:FreeRTOS/event_groups.c ****             }
 842              		.loc 1 244 0
 843 00c6 0024     		movs	r4, #0
 844 00c8 D4E7     		b	.L61
 845              	.LVL96:
 846              	.L62:
 250:FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 847              		.loc 1 250 0
 848 00ca 3468     		ldr	r4, [r6]
 849              	.LVL97:
 850 00cc D2E7     		b	.L61
 851              	.L70:
 852 00ce 00BF     		.align	2
 853              	.L69:
 854 00d0 04ED00E0 		.word	-536810236
 855              		.cfi_endproc
 856              	.LFE6:
 858              		.section	.text.vEventGroupDelete,"ax",%progbits
 859              		.align	1
 860              		.global	vEventGroupDelete
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu softvfp
 866              	vEventGroupDelete:
 867              	.LFB11:
 629:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 868              		.loc 1 629 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL98:
 633:FreeRTOS/event_groups.c **** 
 873              		.loc 1 633 0
 874 0000 40B9     		cbnz	r0, .L72
 875              	.LBB62:
 876              	.LBB63:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 877              		.loc 2 200 0
 878              		.syntax unified
ARM GAS  /tmp/ccCouRNO.s 			page 35


 879              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 880 0002 4FF05003 			mov r3, #80												
 881 0006 83F31188 		msr basepri, r3											
 882 000a BFF36F8F 		isb														
 883 000e BFF34F8F 		dsb														
 884              	
 885              	@ 0 "" 2
 886              	.LVL99:
 887              		.thumb
 888              		.syntax unified
 889              	.L73:
 890 0012 FEE7     		b	.L73
 891              	.L72:
 892              	.LBE63:
 893              	.LBE62:
 629:FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 894              		.loc 1 629 0
 895 0014 10B5     		push	{r4, lr}
 896              	.LCFI5:
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 4, -8
 899              		.cfi_offset 14, -4
 900 0016 0446     		mov	r4, r0
 901              	.LVL100:
 637:FreeRTOS/event_groups.c ****     {
 902              		.loc 1 637 0
 903 0018 FFF7FEFF 		bl	vTaskSuspendAll
 904              	.LVL101:
 641:FreeRTOS/event_groups.c ****         {
 905              		.loc 1 641 0
 906 001c 03E0     		b	.L74
 907              	.L75:
 646:FreeRTOS/event_groups.c ****         }
 908              		.loc 1 646 0
 909 001e 4FF00071 		mov	r1, #33554432
 910 0022 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 911              	.LVL102:
 912              	.L74:
 641:FreeRTOS/event_groups.c ****         {
 913              		.loc 1 641 0
 914 0026 6368     		ldr	r3, [r4, #4]
 915 0028 6BB1     		cbz	r3, .L80
 645:FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 916              		.loc 1 645 0
 917 002a 2069     		ldr	r0, [r4, #16]
 918 002c 04F10C03 		add	r3, r4, #12
 919 0030 9842     		cmp	r0, r3
 920 0032 F4D1     		bne	.L75
 921              	.LBB64:
 922              	.LBB65:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 923              		.loc 2 200 0
 924              		.syntax unified
 925              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 926 0034 4FF05003 			mov r3, #80												
 927 0038 83F31188 		msr basepri, r3											
 928 003c BFF36F8F 		isb														
ARM GAS  /tmp/ccCouRNO.s 			page 36


 929 0040 BFF34F8F 		dsb														
 930              	
 931              	@ 0 "" 2
 932              	.LVL103:
 933              		.thumb
 934              		.syntax unified
 935              	.L76:
 936 0044 FEE7     		b	.L76
 937              	.L80:
 938              	.LBE65:
 939              	.LBE64:
 653:FreeRTOS/event_groups.c ****             }
 940              		.loc 1 653 0
 941 0046 2046     		mov	r0, r4
 942 0048 FFF7FEFF 		bl	vPortFree
 943              	.LVL104:
 670:FreeRTOS/event_groups.c **** }
 944              		.loc 1 670 0
 945 004c FFF7FEFF 		bl	xTaskResumeAll
 946              	.LVL105:
 671:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 947              		.loc 1 671 0
 948 0050 10BD     		pop	{r4, pc}
 949              		.cfi_endproc
 950              	.LFE11:
 952              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 953              		.align	1
 954              		.global	vEventGroupSetBitsCallback
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 958              		.fpu softvfp
 960              	vEventGroupSetBitsCallback:
 961              	.LFB12:
 678:FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 962              		.loc 1 678 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              	.LVL106:
 967 0000 08B5     		push	{r3, lr}
 968              	.LCFI6:
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 3, -8
 971              		.cfi_offset 14, -4
 679:FreeRTOS/event_groups.c **** }
 972              		.loc 1 679 0
 973 0002 FFF7FEFF 		bl	xEventGroupSetBits
 974              	.LVL107:
 680:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 975              		.loc 1 680 0
 976 0006 08BD     		pop	{r3, pc}
 977              		.cfi_endproc
 978              	.LFE12:
 980              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 981              		.align	1
 982              		.global	vEventGroupClearBitsCallback
ARM GAS  /tmp/ccCouRNO.s 			page 37


 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu softvfp
 988              	vEventGroupClearBitsCallback:
 989              	.LFB13:
 687:FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 990              		.loc 1 687 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              	.LVL108:
 995 0000 08B5     		push	{r3, lr}
 996              	.LCFI7:
 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 3, -8
 999              		.cfi_offset 14, -4
 688:FreeRTOS/event_groups.c **** }
 1000              		.loc 1 688 0
 1001 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1002              	.LVL109:
 689:FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1003              		.loc 1 689 0
 1004 0006 08BD     		pop	{r3, pc}
 1005              		.cfi_endproc
 1006              	.LFE13:
 1008              		.text
 1009              	.Letext0:
 1010              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1011              		.file 4 "/usr/include/newlib/sys/lock.h"
 1012              		.file 5 "/usr/include/newlib/sys/_types.h"
 1013              		.file 6 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1014              		.file 7 "/usr/include/newlib/sys/reent.h"
 1015              		.file 8 "/usr/include/newlib/stdlib.h"
 1016              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1017              		.file 10 "FreeRTOS/ARM_CM3/FreeRTOSConfig.h"
 1018              		.file 11 "FreeRTOS/include/list.h"
 1019              		.file 12 "FreeRTOS/include/event_groups.h"
 1020              		.file 13 "FreeRTOS/include/task.h"
 1021              		.file 14 "FreeRTOS/include/portable.h"
ARM GAS  /tmp/ccCouRNO.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccCouRNO.s:16     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccCouRNO.s:22     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccCouRNO.s:66     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccCouRNO.s:73     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccCouRNO.s:106    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccCouRNO.s:113    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccCouRNO.s:361    .text.xEventGroupWaitBits:0000000000000108 $d
     /tmp/ccCouRNO.s:367    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccCouRNO.s:374    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccCouRNO.s:454    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccCouRNO.s:461    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccCouRNO.s:505    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccCouRNO.s:512    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccCouRNO.s:654    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccCouRNO.s:661    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccCouRNO.s:854    .text.xEventGroupSync:00000000000000d0 $d
     /tmp/ccCouRNO.s:859    .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccCouRNO.s:866    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccCouRNO.s:953    .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccCouRNO.s:960    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccCouRNO.s:981    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccCouRNO.s:988    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
vTaskRemoveFromUnorderedEventList
vPortFree
