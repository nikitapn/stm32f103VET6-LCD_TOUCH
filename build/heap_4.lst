ARM GAS  /tmp/ccGbUZIN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"heap_4.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvHeapInit,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvHeapInit:
  23              	.LFB10:
  24              		.file 1 "FreeRTOS/MemMang/heap_4.c"
   1:FreeRTOS/MemMang/heap_4.c **** /*
   2:FreeRTOS/MemMang/heap_4.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/MemMang/heap_4.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/MemMang/heap_4.c ****  *
   5:FreeRTOS/MemMang/heap_4.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/MemMang/heap_4.c ****  *
   7:FreeRTOS/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/MemMang/heap_4.c ****  * subject to the following conditions:
  13:FreeRTOS/MemMang/heap_4.c ****  *
  14:FreeRTOS/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/MemMang/heap_4.c ****  *
  17:FreeRTOS/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/MemMang/heap_4.c ****  *
  24:FreeRTOS/MemMang/heap_4.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/MemMang/heap_4.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/MemMang/heap_4.c ****  *
  27:FreeRTOS/MemMang/heap_4.c ****  */
  28:FreeRTOS/MemMang/heap_4.c **** 
  29:FreeRTOS/MemMang/heap_4.c **** /*
  30:FreeRTOS/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  31:FreeRTOS/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  32:FreeRTOS/MemMang/heap_4.c ****  * limits memory fragmentation.
  33:FreeRTOS/MemMang/heap_4.c ****  *
  34:FreeRTOS/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
ARM GAS  /tmp/ccGbUZIN.s 			page 2


  35:FreeRTOS/MemMang/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  36:FreeRTOS/MemMang/heap_4.c ****  */
  37:FreeRTOS/MemMang/heap_4.c **** #include <stdlib.h>
  38:FreeRTOS/MemMang/heap_4.c **** 
  39:FreeRTOS/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  40:FreeRTOS/MemMang/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  41:FreeRTOS/MemMang/heap_4.c ****  * task.h is included from an application file. */
  42:FreeRTOS/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  43:FreeRTOS/MemMang/heap_4.c **** 
  44:FreeRTOS/MemMang/heap_4.c **** #include "FreeRTOS.h"
  45:FreeRTOS/MemMang/heap_4.c **** #include "task.h"
  46:FreeRTOS/MemMang/heap_4.c **** 
  47:FreeRTOS/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:FreeRTOS/MemMang/heap_4.c **** 
  49:FreeRTOS/MemMang/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  50:FreeRTOS/MemMang/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  51:FreeRTOS/MemMang/heap_4.c **** #endif
  52:FreeRTOS/MemMang/heap_4.c **** 
  53:FreeRTOS/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  54:FreeRTOS/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  55:FreeRTOS/MemMang/heap_4.c **** 
  56:FreeRTOS/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  57:FreeRTOS/MemMang/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  58:FreeRTOS/MemMang/heap_4.c **** 
  59:FreeRTOS/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  60:FreeRTOS/MemMang/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  61:FreeRTOS/MemMang/heap_4.c **** 
  62:FreeRTOS/MemMang/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  63:FreeRTOS/MemMang/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  64:FreeRTOS/MemMang/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  65:FreeRTOS/MemMang/heap_4.c **** #else
  66:FreeRTOS/MemMang/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  67:FreeRTOS/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  68:FreeRTOS/MemMang/heap_4.c **** 
  69:FreeRTOS/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  70:FreeRTOS/MemMang/heap_4.c ****  * of their memory address. */
  71:FreeRTOS/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
  72:FreeRTOS/MemMang/heap_4.c **** {
  73:FreeRTOS/MemMang/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */
  74:FreeRTOS/MemMang/heap_4.c ****     size_t xBlockSize;                     /*<< The size of the free block. */
  75:FreeRTOS/MemMang/heap_4.c **** } BlockLink_t;
  76:FreeRTOS/MemMang/heap_4.c **** 
  77:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  78:FreeRTOS/MemMang/heap_4.c **** 
  79:FreeRTOS/MemMang/heap_4.c **** /*
  80:FreeRTOS/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
  81:FreeRTOS/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
  82:FreeRTOS/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
  83:FreeRTOS/MemMang/heap_4.c ****  * adjacent to each other.
  84:FreeRTOS/MemMang/heap_4.c ****  */
  85:FreeRTOS/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
  86:FreeRTOS/MemMang/heap_4.c **** 
  87:FreeRTOS/MemMang/heap_4.c **** /*
  88:FreeRTOS/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
  89:FreeRTOS/MemMang/heap_4.c ****  * pvPortMalloc() is called.
  90:FreeRTOS/MemMang/heap_4.c ****  */
  91:FreeRTOS/MemMang/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccGbUZIN.s 			page 3


  92:FreeRTOS/MemMang/heap_4.c **** 
  93:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  94:FreeRTOS/MemMang/heap_4.c **** 
  95:FreeRTOS/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
  96:FreeRTOS/MemMang/heap_4.c ****  * block must by correctly byte aligned. */
  97:FreeRTOS/MemMang/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
  98:FreeRTOS/MemMang/heap_4.c **** 
  99:FreeRTOS/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 100:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;
 101:FreeRTOS/MemMang/heap_4.c **** 
 102:FreeRTOS/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 103:FreeRTOS/MemMang/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 104:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;
 105:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;
 106:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;
 107:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;
 108:FreeRTOS/MemMang/heap_4.c **** 
 109:FreeRTOS/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 110:FreeRTOS/MemMang/heap_4.c ****  * member of an BlockLink_t structure is set then the block belongs to the
 111:FreeRTOS/MemMang/heap_4.c ****  * application.  When the bit is free the block is still part of the free heap
 112:FreeRTOS/MemMang/heap_4.c ****  * space. */
 113:FreeRTOS/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;
 114:FreeRTOS/MemMang/heap_4.c **** 
 115:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 116:FreeRTOS/MemMang/heap_4.c **** 
 117:FreeRTOS/MemMang/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 118:FreeRTOS/MemMang/heap_4.c **** {
 119:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 120:FreeRTOS/MemMang/heap_4.c ****     void * pvReturn = NULL;
 121:FreeRTOS/MemMang/heap_4.c **** 
 122:FreeRTOS/MemMang/heap_4.c ****     vTaskSuspendAll();
 123:FreeRTOS/MemMang/heap_4.c ****     {
 124:FreeRTOS/MemMang/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 125:FreeRTOS/MemMang/heap_4.c ****          * initialisation to setup the list of free blocks. */
 126:FreeRTOS/MemMang/heap_4.c ****         if( pxEnd == NULL )
 127:FreeRTOS/MemMang/heap_4.c ****         {
 128:FreeRTOS/MemMang/heap_4.c ****             prvHeapInit();
 129:FreeRTOS/MemMang/heap_4.c ****         }
 130:FreeRTOS/MemMang/heap_4.c ****         else
 131:FreeRTOS/MemMang/heap_4.c ****         {
 132:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 133:FreeRTOS/MemMang/heap_4.c ****         }
 134:FreeRTOS/MemMang/heap_4.c **** 
 135:FreeRTOS/MemMang/heap_4.c ****         /* Check the requested block size is not so large that the top bit is
 136:FreeRTOS/MemMang/heap_4.c ****          * set.  The top bit of the block size member of the BlockLink_t structure
 137:FreeRTOS/MemMang/heap_4.c ****          * is used to determine who owns the block - the application or the
 138:FreeRTOS/MemMang/heap_4.c ****          * kernel, so it must be free. */
 139:FreeRTOS/MemMang/heap_4.c ****         if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 140:FreeRTOS/MemMang/heap_4.c ****         {
 141:FreeRTOS/MemMang/heap_4.c ****             /* The wanted size must be increased so it can contain a BlockLink_t
 142:FreeRTOS/MemMang/heap_4.c ****              * structure in addition to the requested amount of bytes. */
 143:FreeRTOS/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) &&
 144:FreeRTOS/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 145:FreeRTOS/MemMang/heap_4.c ****             {
 146:FreeRTOS/MemMang/heap_4.c ****                 xWantedSize += xHeapStructSize;
 147:FreeRTOS/MemMang/heap_4.c **** 
 148:FreeRTOS/MemMang/heap_4.c ****                 /* Ensure that blocks are always aligned. */
ARM GAS  /tmp/ccGbUZIN.s 			page 4


 149:FreeRTOS/MemMang/heap_4.c ****                 if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 150:FreeRTOS/MemMang/heap_4.c ****                 {
 151:FreeRTOS/MemMang/heap_4.c ****                     /* Byte alignment required. Check for overflow. */
 152:FreeRTOS/MemMang/heap_4.c ****                     if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_M
 153:FreeRTOS/MemMang/heap_4.c ****                             > xWantedSize )
 154:FreeRTOS/MemMang/heap_4.c ****                     {
 155:FreeRTOS/MemMang/heap_4.c ****                         xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MA
 156:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 157:FreeRTOS/MemMang/heap_4.c ****                     }
 158:FreeRTOS/MemMang/heap_4.c ****                     else
 159:FreeRTOS/MemMang/heap_4.c ****                     {
 160:FreeRTOS/MemMang/heap_4.c ****                         xWantedSize = 0;
 161:FreeRTOS/MemMang/heap_4.c ****                     }
 162:FreeRTOS/MemMang/heap_4.c ****                 }
 163:FreeRTOS/MemMang/heap_4.c ****                 else
 164:FreeRTOS/MemMang/heap_4.c ****                 {
 165:FreeRTOS/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 166:FreeRTOS/MemMang/heap_4.c ****                 }
 167:FreeRTOS/MemMang/heap_4.c ****             }
 168:FreeRTOS/MemMang/heap_4.c ****             else
 169:FreeRTOS/MemMang/heap_4.c ****             {
 170:FreeRTOS/MemMang/heap_4.c ****                 xWantedSize = 0;
 171:FreeRTOS/MemMang/heap_4.c ****             }
 172:FreeRTOS/MemMang/heap_4.c **** 
 173:FreeRTOS/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 174:FreeRTOS/MemMang/heap_4.c ****             {
 175:FreeRTOS/MemMang/heap_4.c ****                 /* Traverse the list from the start (lowest address) block until
 176:FreeRTOS/MemMang/heap_4.c ****                  * one of adequate size is found. */
 177:FreeRTOS/MemMang/heap_4.c ****                 pxPreviousBlock = &xStart;
 178:FreeRTOS/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 179:FreeRTOS/MemMang/heap_4.c **** 
 180:FreeRTOS/MemMang/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL 
 181:FreeRTOS/MemMang/heap_4.c ****                 {
 182:FreeRTOS/MemMang/heap_4.c ****                     pxPreviousBlock = pxBlock;
 183:FreeRTOS/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 184:FreeRTOS/MemMang/heap_4.c ****                 }
 185:FreeRTOS/MemMang/heap_4.c **** 
 186:FreeRTOS/MemMang/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 187:FreeRTOS/MemMang/heap_4.c ****                  * was not found. */
 188:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock != pxEnd )
 189:FreeRTOS/MemMang/heap_4.c ****                 {
 190:FreeRTOS/MemMang/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 191:FreeRTOS/MemMang/heap_4.c ****                      * BlockLink_t structure at its start. */
 192:FreeRTOS/MemMang/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xH
 193:FreeRTOS/MemMang/heap_4.c **** 
 194:FreeRTOS/MemMang/heap_4.c ****                     /* This block is being returned for use so must be taken out
 195:FreeRTOS/MemMang/heap_4.c ****                      * of the list of free blocks. */
 196:FreeRTOS/MemMang/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 197:FreeRTOS/MemMang/heap_4.c **** 
 198:FreeRTOS/MemMang/heap_4.c ****                     /* If the block is larger than required it can be split into
 199:FreeRTOS/MemMang/heap_4.c ****                      * two. */
 200:FreeRTOS/MemMang/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 201:FreeRTOS/MemMang/heap_4.c ****                     {
 202:FreeRTOS/MemMang/heap_4.c ****                         /* This block is to be split into two.  Create a new
 203:FreeRTOS/MemMang/heap_4.c ****                          * block following the number of bytes requested. The void
 204:FreeRTOS/MemMang/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
 205:FreeRTOS/MemMang/heap_4.c ****                          * compiler. */
ARM GAS  /tmp/ccGbUZIN.s 			page 5


 206:FreeRTOS/MemMang/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 207:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 208:FreeRTOS/MemMang/heap_4.c **** 
 209:FreeRTOS/MemMang/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 210:FreeRTOS/MemMang/heap_4.c ****                          * single block. */
 211:FreeRTOS/MemMang/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 212:FreeRTOS/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 213:FreeRTOS/MemMang/heap_4.c **** 
 214:FreeRTOS/MemMang/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 215:FreeRTOS/MemMang/heap_4.c ****                         prvInsertBlockIntoFreeList( pxNewBlockLink );
 216:FreeRTOS/MemMang/heap_4.c ****                     }
 217:FreeRTOS/MemMang/heap_4.c ****                     else
 218:FreeRTOS/MemMang/heap_4.c ****                     {
 219:FreeRTOS/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 220:FreeRTOS/MemMang/heap_4.c ****                     }
 221:FreeRTOS/MemMang/heap_4.c **** 
 222:FreeRTOS/MemMang/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 223:FreeRTOS/MemMang/heap_4.c **** 
 224:FreeRTOS/MemMang/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 225:FreeRTOS/MemMang/heap_4.c ****                     {
 226:FreeRTOS/MemMang/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 227:FreeRTOS/MemMang/heap_4.c ****                     }
 228:FreeRTOS/MemMang/heap_4.c ****                     else
 229:FreeRTOS/MemMang/heap_4.c ****                     {
 230:FreeRTOS/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 231:FreeRTOS/MemMang/heap_4.c ****                     }
 232:FreeRTOS/MemMang/heap_4.c **** 
 233:FreeRTOS/MemMang/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 234:FreeRTOS/MemMang/heap_4.c ****                      * by the application and has no "next" block. */
 235:FreeRTOS/MemMang/heap_4.c ****                     pxBlock->xBlockSize |= xBlockAllocatedBit;
 236:FreeRTOS/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 237:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 238:FreeRTOS/MemMang/heap_4.c ****                 }
 239:FreeRTOS/MemMang/heap_4.c ****                 else
 240:FreeRTOS/MemMang/heap_4.c ****                 {
 241:FreeRTOS/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 242:FreeRTOS/MemMang/heap_4.c ****                 }
 243:FreeRTOS/MemMang/heap_4.c ****             }
 244:FreeRTOS/MemMang/heap_4.c ****             else
 245:FreeRTOS/MemMang/heap_4.c ****             {
 246:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 247:FreeRTOS/MemMang/heap_4.c ****             }
 248:FreeRTOS/MemMang/heap_4.c ****         }
 249:FreeRTOS/MemMang/heap_4.c ****         else
 250:FreeRTOS/MemMang/heap_4.c ****         {
 251:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 252:FreeRTOS/MemMang/heap_4.c ****         }
 253:FreeRTOS/MemMang/heap_4.c **** 
 254:FreeRTOS/MemMang/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 255:FreeRTOS/MemMang/heap_4.c ****     }
 256:FreeRTOS/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 257:FreeRTOS/MemMang/heap_4.c **** 
 258:FreeRTOS/MemMang/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 259:FreeRTOS/MemMang/heap_4.c ****         {
 260:FreeRTOS/MemMang/heap_4.c ****             if( pvReturn == NULL )
 261:FreeRTOS/MemMang/heap_4.c ****             {
 262:FreeRTOS/MemMang/heap_4.c ****                 extern void vApplicationMallocFailedHook( void );
ARM GAS  /tmp/ccGbUZIN.s 			page 6


 263:FreeRTOS/MemMang/heap_4.c ****                 vApplicationMallocFailedHook();
 264:FreeRTOS/MemMang/heap_4.c ****             }
 265:FreeRTOS/MemMang/heap_4.c ****             else
 266:FreeRTOS/MemMang/heap_4.c ****             {
 267:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 268:FreeRTOS/MemMang/heap_4.c ****             }
 269:FreeRTOS/MemMang/heap_4.c ****         }
 270:FreeRTOS/MemMang/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 271:FreeRTOS/MemMang/heap_4.c **** 
 272:FreeRTOS/MemMang/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 273:FreeRTOS/MemMang/heap_4.c ****     return pvReturn;
 274:FreeRTOS/MemMang/heap_4.c **** }
 275:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 276:FreeRTOS/MemMang/heap_4.c **** 
 277:FreeRTOS/MemMang/heap_4.c **** void vPortFree( void * pv )
 278:FreeRTOS/MemMang/heap_4.c **** {
 279:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 280:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 281:FreeRTOS/MemMang/heap_4.c **** 
 282:FreeRTOS/MemMang/heap_4.c ****     if( pv != NULL )
 283:FreeRTOS/MemMang/heap_4.c ****     {
 284:FreeRTOS/MemMang/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 285:FreeRTOS/MemMang/heap_4.c ****          * before it. */
 286:FreeRTOS/MemMang/heap_4.c ****         puc -= xHeapStructSize;
 287:FreeRTOS/MemMang/heap_4.c **** 
 288:FreeRTOS/MemMang/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 289:FreeRTOS/MemMang/heap_4.c ****         pxLink = ( void * ) puc;
 290:FreeRTOS/MemMang/heap_4.c **** 
 291:FreeRTOS/MemMang/heap_4.c ****         /* Check the block is actually allocated. */
 292:FreeRTOS/MemMang/heap_4.c ****         configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 293:FreeRTOS/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 294:FreeRTOS/MemMang/heap_4.c **** 
 295:FreeRTOS/MemMang/heap_4.c ****         if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 296:FreeRTOS/MemMang/heap_4.c ****         {
 297:FreeRTOS/MemMang/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 298:FreeRTOS/MemMang/heap_4.c ****             {
 299:FreeRTOS/MemMang/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 300:FreeRTOS/MemMang/heap_4.c ****                  * allocated. */
 301:FreeRTOS/MemMang/heap_4.c ****                 pxLink->xBlockSize &= ~xBlockAllocatedBit;
 302:FreeRTOS/MemMang/heap_4.c **** 
 303:FreeRTOS/MemMang/heap_4.c ****                 vTaskSuspendAll();
 304:FreeRTOS/MemMang/heap_4.c ****                 {
 305:FreeRTOS/MemMang/heap_4.c ****                     /* Add this block to the list of free blocks. */
 306:FreeRTOS/MemMang/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 307:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 308:FreeRTOS/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 309:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 310:FreeRTOS/MemMang/heap_4.c ****                 }
 311:FreeRTOS/MemMang/heap_4.c ****                 ( void ) xTaskResumeAll();
 312:FreeRTOS/MemMang/heap_4.c ****             }
 313:FreeRTOS/MemMang/heap_4.c ****             else
 314:FreeRTOS/MemMang/heap_4.c ****             {
 315:FreeRTOS/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 316:FreeRTOS/MemMang/heap_4.c ****             }
 317:FreeRTOS/MemMang/heap_4.c ****         }
 318:FreeRTOS/MemMang/heap_4.c ****         else
 319:FreeRTOS/MemMang/heap_4.c ****         {
ARM GAS  /tmp/ccGbUZIN.s 			page 7


 320:FreeRTOS/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 321:FreeRTOS/MemMang/heap_4.c ****         }
 322:FreeRTOS/MemMang/heap_4.c ****     }
 323:FreeRTOS/MemMang/heap_4.c **** }
 324:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 325:FreeRTOS/MemMang/heap_4.c **** 
 326:FreeRTOS/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 327:FreeRTOS/MemMang/heap_4.c **** {
 328:FreeRTOS/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 329:FreeRTOS/MemMang/heap_4.c **** }
 330:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 331:FreeRTOS/MemMang/heap_4.c **** 
 332:FreeRTOS/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 333:FreeRTOS/MemMang/heap_4.c **** {
 334:FreeRTOS/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 335:FreeRTOS/MemMang/heap_4.c **** }
 336:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 337:FreeRTOS/MemMang/heap_4.c **** 
 338:FreeRTOS/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 339:FreeRTOS/MemMang/heap_4.c **** {
 340:FreeRTOS/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 341:FreeRTOS/MemMang/heap_4.c **** }
 342:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 343:FreeRTOS/MemMang/heap_4.c **** 
 344:FreeRTOS/MemMang/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 345:FreeRTOS/MemMang/heap_4.c **** {
  25              		.loc 1 345 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 346:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
 347:FreeRTOS/MemMang/heap_4.c ****     uint8_t * pucAlignedHeap;
 348:FreeRTOS/MemMang/heap_4.c ****     size_t uxAddress;
 349:FreeRTOS/MemMang/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 350:FreeRTOS/MemMang/heap_4.c **** 
 351:FreeRTOS/MemMang/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 352:FreeRTOS/MemMang/heap_4.c ****     uxAddress = ( size_t ) ucHeap;
  31              		.loc 1 352 0
  32 0000 124A     		ldr	r2, .L4
  33              	.LVL1:
 353:FreeRTOS/MemMang/heap_4.c **** 
 354:FreeRTOS/MemMang/heap_4.c ****     if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  34              		.loc 1 354 0
  35 0002 12F0070F 		tst	r2, #7
  36 0006 1ED0     		beq	.L3
 355:FreeRTOS/MemMang/heap_4.c ****     {
 356:FreeRTOS/MemMang/heap_4.c ****         uxAddress += ( portBYTE_ALIGNMENT - 1 );
  37              		.loc 1 356 0
  38 0008 D11D     		adds	r1, r2, #7
  39              	.LVL2:
 357:FreeRTOS/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  40              		.loc 1 357 0
  41 000a 21F00701 		bic	r1, r1, #7
  42              	.LVL3:
 358:FreeRTOS/MemMang/heap_4.c ****         xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
ARM GAS  /tmp/ccGbUZIN.s 			page 8


  43              		.loc 1 358 0
  44 000e C1F54063 		rsb	r3, r1, #3072
  45 0012 1344     		add	r3, r3, r2
  46              	.LVL4:
 357:FreeRTOS/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  47              		.loc 1 357 0
  48 0014 0A46     		mov	r2, r1
  49              	.LVL5:
  50              	.L2:
 359:FreeRTOS/MemMang/heap_4.c ****     }
 360:FreeRTOS/MemMang/heap_4.c **** 
 361:FreeRTOS/MemMang/heap_4.c ****     pucAlignedHeap = ( uint8_t * ) uxAddress;
 362:FreeRTOS/MemMang/heap_4.c **** 
 363:FreeRTOS/MemMang/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 364:FreeRTOS/MemMang/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
 365:FreeRTOS/MemMang/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  51              		.loc 1 365 0
  52 0016 0E48     		ldr	r0, .L4+4
  53 0018 0260     		str	r2, [r0]
 366:FreeRTOS/MemMang/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
  54              		.loc 1 366 0
  55 001a 0021     		movs	r1, #0
  56 001c 4160     		str	r1, [r0, #4]
 367:FreeRTOS/MemMang/heap_4.c **** 
 368:FreeRTOS/MemMang/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 369:FreeRTOS/MemMang/heap_4.c ****      * at the end of the heap space. */
 370:FreeRTOS/MemMang/heap_4.c ****     uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  57              		.loc 1 370 0
  58 001e 1344     		add	r3, r3, r2
  59              	.LVL6:
 371:FreeRTOS/MemMang/heap_4.c ****     uxAddress -= xHeapStructSize;
  60              		.loc 1 371 0
  61 0020 083B     		subs	r3, r3, #8
  62              	.LVL7:
 372:FreeRTOS/MemMang/heap_4.c ****     uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  63              		.loc 1 372 0
  64 0022 23F00703 		bic	r3, r3, #7
  65              	.LVL8:
 373:FreeRTOS/MemMang/heap_4.c ****     pxEnd = ( void * ) uxAddress;
  66              		.loc 1 373 0
  67 0026 0B48     		ldr	r0, .L4+8
  68 0028 0360     		str	r3, [r0]
 374:FreeRTOS/MemMang/heap_4.c ****     pxEnd->xBlockSize = 0;
  69              		.loc 1 374 0
  70 002a 5960     		str	r1, [r3, #4]
 375:FreeRTOS/MemMang/heap_4.c ****     pxEnd->pxNextFreeBlock = NULL;
  71              		.loc 1 375 0
  72 002c 1960     		str	r1, [r3]
  73              	.LVL9:
 376:FreeRTOS/MemMang/heap_4.c **** 
 377:FreeRTOS/MemMang/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 378:FreeRTOS/MemMang/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
 379:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 380:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  74              		.loc 1 380 0
  75 002e 991A     		subs	r1, r3, r2
  76 0030 5160     		str	r1, [r2, #4]
ARM GAS  /tmp/ccGbUZIN.s 			page 9


 381:FreeRTOS/MemMang/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  77              		.loc 1 381 0
  78 0032 1360     		str	r3, [r2]
 382:FreeRTOS/MemMang/heap_4.c **** 
 383:FreeRTOS/MemMang/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 384:FreeRTOS/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  79              		.loc 1 384 0
  80 0034 084B     		ldr	r3, .L4+12
  81              	.LVL10:
  82 0036 1960     		str	r1, [r3]
 385:FreeRTOS/MemMang/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  83              		.loc 1 385 0
  84 0038 084B     		ldr	r3, .L4+16
  85 003a 1960     		str	r1, [r3]
 386:FreeRTOS/MemMang/heap_4.c **** 
 387:FreeRTOS/MemMang/heap_4.c ****     /* Work out the position of the top bit in a size_t variable. */
 388:FreeRTOS/MemMang/heap_4.c ****     xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  86              		.loc 1 388 0
  87 003c 084B     		ldr	r3, .L4+20
  88 003e 4FF00042 		mov	r2, #-2147483648
  89              	.LVL11:
  90 0042 1A60     		str	r2, [r3]
 389:FreeRTOS/MemMang/heap_4.c **** }
  91              		.loc 1 389 0
  92 0044 7047     		bx	lr
  93              	.LVL12:
  94              	.L3:
 349:FreeRTOS/MemMang/heap_4.c **** 
  95              		.loc 1 349 0
  96 0046 4FF44063 		mov	r3, #3072
  97 004a E4E7     		b	.L2
  98              	.L5:
  99              		.align	2
 100              	.L4:
 101 004c 00000000 		.word	.LANCHOR0
 102 0050 00000000 		.word	.LANCHOR1
 103 0054 00000000 		.word	.LANCHOR2
 104 0058 00000000 		.word	.LANCHOR3
 105 005c 00000000 		.word	.LANCHOR4
 106 0060 00000000 		.word	.LANCHOR5
 107              		.cfi_endproc
 108              	.LFE10:
 110              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	prvInsertBlockIntoFreeList:
 118              	.LFB11:
 390:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 391:FreeRTOS/MemMang/heap_4.c **** 
 392:FreeRTOS/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
 393:FreeRTOS/MemMang/heap_4.c **** {
 119              		.loc 1 393 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGbUZIN.s 			page 10


 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL13:
 125 0000 10B4     		push	{r4}
 126              	.LCFI0:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 4, -4
 129              	.LVL14:
 394:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 395:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc;
 396:FreeRTOS/MemMang/heap_4.c **** 
 397:FreeRTOS/MemMang/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 398:FreeRTOS/MemMang/heap_4.c ****      * than the block being inserted. */
 399:FreeRTOS/MemMang/heap_4.c ****     for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterat
 130              		.loc 1 399 0
 131 0002 124B     		ldr	r3, .L15
 132              	.LVL15:
 133              	.L7:
 134              		.loc 1 399 0 is_stmt 0 discriminator 1
 135 0004 1A68     		ldr	r2, [r3]
 136 0006 8242     		cmp	r2, r0
 137 0008 1AD3     		bcc	.L13
 138              	.LVL16:
 400:FreeRTOS/MemMang/heap_4.c ****     {
 401:FreeRTOS/MemMang/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 402:FreeRTOS/MemMang/heap_4.c ****     }
 403:FreeRTOS/MemMang/heap_4.c **** 
 404:FreeRTOS/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 405:FreeRTOS/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 406:FreeRTOS/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 407:FreeRTOS/MemMang/heap_4.c **** 
 408:FreeRTOS/MemMang/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 139              		.loc 1 408 0 is_stmt 1
 140 000a 5968     		ldr	r1, [r3, #4]
 141 000c 5C18     		adds	r4, r3, r1
 142 000e 8442     		cmp	r4, r0
 143 0010 03D1     		bne	.L8
 409:FreeRTOS/MemMang/heap_4.c ****     {
 410:FreeRTOS/MemMang/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 144              		.loc 1 410 0
 145 0012 4068     		ldr	r0, [r0, #4]
 146              	.LVL17:
 147 0014 0144     		add	r1, r1, r0
 148 0016 5960     		str	r1, [r3, #4]
 149              	.LVL18:
 411:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 150              		.loc 1 411 0
 151 0018 1846     		mov	r0, r3
 152              	.LVL19:
 153              	.L8:
 412:FreeRTOS/MemMang/heap_4.c ****     }
 413:FreeRTOS/MemMang/heap_4.c ****     else
 414:FreeRTOS/MemMang/heap_4.c ****     {
 415:FreeRTOS/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 416:FreeRTOS/MemMang/heap_4.c ****     }
 417:FreeRTOS/MemMang/heap_4.c **** 
 418:FreeRTOS/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
ARM GAS  /tmp/ccGbUZIN.s 			page 11


 419:FreeRTOS/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 420:FreeRTOS/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 421:FreeRTOS/MemMang/heap_4.c **** 
 422:FreeRTOS/MemMang/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 154              		.loc 1 422 0
 155 001a 4168     		ldr	r1, [r0, #4]
 156 001c 4418     		adds	r4, r0, r1
 157 001e A242     		cmp	r2, r4
 158 0020 12D1     		bne	.L9
 423:FreeRTOS/MemMang/heap_4.c ****     {
 424:FreeRTOS/MemMang/heap_4.c ****         if( pxIterator->pxNextFreeBlock != pxEnd )
 159              		.loc 1 424 0
 160 0022 0B4C     		ldr	r4, .L15+4
 161 0024 2468     		ldr	r4, [r4]
 162 0026 A242     		cmp	r2, r4
 163 0028 0CD0     		beq	.L10
 425:FreeRTOS/MemMang/heap_4.c ****         {
 426:FreeRTOS/MemMang/heap_4.c ****             /* Form one big block from the two blocks. */
 427:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 164              		.loc 1 427 0
 165 002a 5268     		ldr	r2, [r2, #4]
 166 002c 1144     		add	r1, r1, r2
 167 002e 4160     		str	r1, [r0, #4]
 428:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 168              		.loc 1 428 0
 169 0030 1A68     		ldr	r2, [r3]
 170 0032 1268     		ldr	r2, [r2]
 171 0034 0260     		str	r2, [r0]
 172              	.L11:
 429:FreeRTOS/MemMang/heap_4.c ****         }
 430:FreeRTOS/MemMang/heap_4.c ****         else
 431:FreeRTOS/MemMang/heap_4.c ****         {
 432:FreeRTOS/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxEnd;
 433:FreeRTOS/MemMang/heap_4.c ****         }
 434:FreeRTOS/MemMang/heap_4.c ****     }
 435:FreeRTOS/MemMang/heap_4.c ****     else
 436:FreeRTOS/MemMang/heap_4.c ****     {
 437:FreeRTOS/MemMang/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 438:FreeRTOS/MemMang/heap_4.c ****     }
 439:FreeRTOS/MemMang/heap_4.c **** 
 440:FreeRTOS/MemMang/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 441:FreeRTOS/MemMang/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 442:FreeRTOS/MemMang/heap_4.c ****      * already been set, and should not be set here as that would make it point
 443:FreeRTOS/MemMang/heap_4.c ****      * to itself. */
 444:FreeRTOS/MemMang/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 173              		.loc 1 444 0
 174 0036 9842     		cmp	r0, r3
 175 0038 00D0     		beq	.L6
 445:FreeRTOS/MemMang/heap_4.c ****     {
 446:FreeRTOS/MemMang/heap_4.c ****         pxIterator->pxNextFreeBlock = pxBlockToInsert;
 176              		.loc 1 446 0
 177 003a 1860     		str	r0, [r3]
 178              	.L6:
 447:FreeRTOS/MemMang/heap_4.c ****     }
 448:FreeRTOS/MemMang/heap_4.c ****     else
 449:FreeRTOS/MemMang/heap_4.c ****     {
 450:FreeRTOS/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccGbUZIN.s 			page 12


 451:FreeRTOS/MemMang/heap_4.c ****     }
 452:FreeRTOS/MemMang/heap_4.c **** }
 179              		.loc 1 452 0
 180 003c 10BC     		pop	{r4}
 181              	.LCFI1:
 182              		.cfi_remember_state
 183              		.cfi_restore 4
 184              		.cfi_def_cfa_offset 0
 185 003e 7047     		bx	lr
 186              	.LVL20:
 187              	.L13:
 188              	.LCFI2:
 189              		.cfi_restore_state
 399:FreeRTOS/MemMang/heap_4.c ****     {
 190              		.loc 1 399 0
 191 0040 1346     		mov	r3, r2
 192              	.LVL21:
 193 0042 DFE7     		b	.L7
 194              	.LVL22:
 195              	.L10:
 432:FreeRTOS/MemMang/heap_4.c ****         }
 196              		.loc 1 432 0
 197 0044 0460     		str	r4, [r0]
 198 0046 F6E7     		b	.L11
 199              	.L9:
 437:FreeRTOS/MemMang/heap_4.c ****     }
 200              		.loc 1 437 0
 201 0048 0260     		str	r2, [r0]
 202 004a F4E7     		b	.L11
 203              	.L16:
 204              		.align	2
 205              	.L15:
 206 004c 00000000 		.word	.LANCHOR1
 207 0050 00000000 		.word	.LANCHOR2
 208              		.cfi_endproc
 209              	.LFE11:
 211              		.section	.text.pvPortMalloc,"ax",%progbits
 212              		.align	1
 213              		.global	pvPortMalloc
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu softvfp
 219              	pvPortMalloc:
 220              	.LFB5:
 118:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 221              		.loc 1 118 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL23:
 226 0000 38B5     		push	{r3, r4, r5, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 16
 229              		.cfi_offset 3, -16
 230              		.cfi_offset 4, -12
 231              		.cfi_offset 5, -8
ARM GAS  /tmp/ccGbUZIN.s 			page 13


 232              		.cfi_offset 14, -4
 233 0002 0446     		mov	r4, r0
 234              	.LVL24:
 122:FreeRTOS/MemMang/heap_4.c ****     {
 235              		.loc 1 122 0
 236 0004 FFF7FEFF 		bl	vTaskSuspendAll
 237              	.LVL25:
 126:FreeRTOS/MemMang/heap_4.c ****         {
 238              		.loc 1 126 0
 239 0008 414B     		ldr	r3, .L40
 240 000a 1B68     		ldr	r3, [r3]
 241 000c EBB1     		cbz	r3, .L39
 242              	.L18:
 139:FreeRTOS/MemMang/heap_4.c ****         {
 243              		.loc 1 139 0
 244 000e 414B     		ldr	r3, .L40+4
 245 0010 1B68     		ldr	r3, [r3]
 246 0012 1C42     		tst	r4, r3
 247 0014 6ED1     		bne	.L30
 143:FreeRTOS/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 248              		.loc 1 143 0
 249 0016 631E     		subs	r3, r4, #1
 250 0018 13F10A0F 		cmn	r3, #10
 251 001c 6CD8     		bhi	.L31
 146:FreeRTOS/MemMang/heap_4.c **** 
 252              		.loc 1 146 0
 253 001e 04F10803 		add	r3, r4, #8
 254              	.LVL26:
 149:FreeRTOS/MemMang/heap_4.c ****                 {
 255              		.loc 1 149 0
 256 0022 13F0070F 		tst	r3, #7
 257 0026 14D0     		beq	.L20
 152:FreeRTOS/MemMang/heap_4.c ****                             > xWantedSize )
 258              		.loc 1 152 0
 259 0028 23F00702 		bic	r2, r3, #7
 260 002c 0832     		adds	r2, r2, #8
 261 002e 9A42     		cmp	r2, r3
 262 0030 64D9     		bls	.L32
 263              	.LVL27:
 156:FreeRTOS/MemMang/heap_4.c ****                     }
 264              		.loc 1 156 0
 265 0032 02F00703 		and	r3, r2, #7
 266 0036 5BB1     		cbz	r3, .L33
 267              	.LBB12:
 268              	.LBB13:
 269              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
ARM GAS  /tmp/ccGbUZIN.s 			page 14


  12:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** 
  30:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/ARM_CM3/portmacro.h **** 
  33:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/ARM_CM3/portmacro.h ****         extern "C" {
  35:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  36:FreeRTOS/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/ARM_CM3/portmacro.h ****  *
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/ARM_CM3/portmacro.h ****  *
  43:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/ARM_CM3/portmacro.h ****  */
  46:FreeRTOS/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/ARM_CM3/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/ARM_CM3/portmacro.h ****     #else
  64:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:FreeRTOS/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
ARM GAS  /tmp/ccGbUZIN.s 			page 15


  69:FreeRTOS/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  71:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/ARM_CM3/portmacro.h **** 
  73:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/ARM_CM3/portmacro.h **** 
  80:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/ARM_CM3/portmacro.h ****     {                                                   \
  83:FreeRTOS/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/ARM_CM3/portmacro.h ****                                                         \
  86:FreeRTOS/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/ARM_CM3/portmacro.h ****     }
  91:FreeRTOS/ARM_CM3/portmacro.h **** 
  92:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/ARM_CM3/portmacro.h **** 
  98:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 122:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 123:FreeRTOS/ARM_CM3/portmacro.h **** 
 124:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
ARM GAS  /tmp/ccGbUZIN.s 			page 16


 126:FreeRTOS/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/ARM_CM3/portmacro.h **** 
 131:FreeRTOS/ARM_CM3/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/ARM_CM3/portmacro.h ****         {
 134:FreeRTOS/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/ARM_CM3/portmacro.h **** 
 136:FreeRTOS/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h ****             return ucReturn;
 139:FreeRTOS/ARM_CM3/portmacro.h ****         }
 140:FreeRTOS/ARM_CM3/portmacro.h **** 
 141:FreeRTOS/ARM_CM3/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/ARM_CM3/portmacro.h ****         #endif
 145:FreeRTOS/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/ARM_CM3/portmacro.h **** 
 152:FreeRTOS/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNOP()
 165:FreeRTOS/ARM_CM3/portmacro.h **** 
 166:FreeRTOS/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/ARM_CM3/portmacro.h **** 
 168:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 171:FreeRTOS/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:FreeRTOS/ARM_CM3/portmacro.h ****     {
 176:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:FreeRTOS/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 178:FreeRTOS/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:FreeRTOS/ARM_CM3/portmacro.h **** 
 182:FreeRTOS/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
ARM GAS  /tmp/ccGbUZIN.s 			page 17


 183:FreeRTOS/ARM_CM3/portmacro.h ****         {
 184:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 185:FreeRTOS/ARM_CM3/portmacro.h ****         }
 186:FreeRTOS/ARM_CM3/portmacro.h ****         else
 187:FreeRTOS/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 189:FreeRTOS/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h ****         return xReturn;
 192:FreeRTOS/ARM_CM3/portmacro.h ****     }
 193:FreeRTOS/ARM_CM3/portmacro.h **** 
 194:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 195:FreeRTOS/ARM_CM3/portmacro.h **** 
 196:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:FreeRTOS/ARM_CM3/portmacro.h ****     {
 198:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:FreeRTOS/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 270              		.loc 2 200 0
 271              		.syntax unified
 272              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 273 0038 4FF05003 			mov r3, #80												
 274 003c 83F31188 		msr basepri, r3											
 275 0040 BFF36F8F 		isb														
 276 0044 BFF34F8F 		dsb														
 277              	
 278              	@ 0 "" 2
 279              	.LVL28:
 280              		.thumb
 281              		.syntax unified
 282              	.L21:
 283 0048 FEE7     		b	.L21
 284              	.LVL29:
 285              	.L39:
 286              	.LBE13:
 287              	.LBE12:
 128:FreeRTOS/MemMang/heap_4.c ****         }
 288              		.loc 1 128 0
 289 004a FFF7FEFF 		bl	prvHeapInit
 290              	.LVL30:
 291 004e DEE7     		b	.L18
 292              	.LVL31:
 293              	.L33:
 155:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 294              		.loc 1 155 0
 295 0050 1346     		mov	r3, r2
 296              	.LVL32:
 297              	.L20:
 173:FreeRTOS/MemMang/heap_4.c ****             {
 298              		.loc 1 173 0
 299 0052 002B     		cmp	r3, #0
 300 0054 54D0     		beq	.L34
 173:FreeRTOS/MemMang/heap_4.c ****             {
 301              		.loc 1 173 0 is_stmt 0 discriminator 1
 302 0056 304A     		ldr	r2, .L40+8
 303 0058 1268     		ldr	r2, [r2]
 304 005a 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccGbUZIN.s 			page 18


 305 005c 52D3     		bcc	.L35
 306              	.LVL33:
 178:FreeRTOS/MemMang/heap_4.c **** 
 307              		.loc 1 178 0 is_stmt 1
 308 005e 2F4A     		ldr	r2, .L40+12
 309 0060 1468     		ldr	r4, [r2]
 310              	.LVL34:
 180:FreeRTOS/MemMang/heap_4.c ****                 {
 311              		.loc 1 180 0
 312 0062 01E0     		b	.L23
 313              	.LVL35:
 314              	.L36:
 182:FreeRTOS/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 315              		.loc 1 182 0
 316 0064 2246     		mov	r2, r4
 317              	.LVL36:
 183:FreeRTOS/MemMang/heap_4.c ****                 }
 318              		.loc 1 183 0
 319 0066 0C46     		mov	r4, r1
 320              	.LVL37:
 321              	.L23:
 180:FreeRTOS/MemMang/heap_4.c ****                 {
 322              		.loc 1 180 0
 323 0068 6168     		ldr	r1, [r4, #4]
 324 006a 9942     		cmp	r1, r3
 325 006c 02D2     		bcs	.L22
 180:FreeRTOS/MemMang/heap_4.c ****                 {
 326              		.loc 1 180 0 is_stmt 0 discriminator 1
 327 006e 2168     		ldr	r1, [r4]
 328 0070 0029     		cmp	r1, #0
 329 0072 F7D1     		bne	.L36
 330              	.L22:
 188:FreeRTOS/MemMang/heap_4.c ****                 {
 331              		.loc 1 188 0 is_stmt 1
 332 0074 2649     		ldr	r1, .L40
 333 0076 0968     		ldr	r1, [r1]
 334 0078 A142     		cmp	r1, r4
 335 007a 45D0     		beq	.L37
 192:FreeRTOS/MemMang/heap_4.c **** 
 336              		.loc 1 192 0
 337 007c 1568     		ldr	r5, [r2]
 338 007e 0835     		adds	r5, r5, #8
 339              	.LVL38:
 196:FreeRTOS/MemMang/heap_4.c **** 
 340              		.loc 1 196 0
 341 0080 2168     		ldr	r1, [r4]
 342 0082 1160     		str	r1, [r2]
 200:FreeRTOS/MemMang/heap_4.c ****                     {
 343              		.loc 1 200 0
 344 0084 6268     		ldr	r2, [r4, #4]
 345              	.LVL39:
 346 0086 D21A     		subs	r2, r2, r3
 347 0088 102A     		cmp	r2, #16
 348 008a 10D9     		bls	.L24
 206:FreeRTOS/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 349              		.loc 1 206 0
 350 008c E018     		adds	r0, r4, r3
ARM GAS  /tmp/ccGbUZIN.s 			page 19


 351              	.LVL40:
 207:FreeRTOS/MemMang/heap_4.c **** 
 352              		.loc 1 207 0
 353 008e 10F0070F 		tst	r0, #7
 354 0092 08D0     		beq	.L25
 355              	.LBB14:
 356              	.LBB15:
 357              		.loc 2 200 0
 358              		.syntax unified
 359              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 360 0094 4FF05003 			mov r3, #80												
 361 0098 83F31188 		msr basepri, r3											
 362 009c BFF36F8F 		isb														
 363 00a0 BFF34F8F 		dsb														
 364              	
 365              	@ 0 "" 2
 366              	.LVL41:
 367              		.thumb
 368              		.syntax unified
 369              	.L26:
 370 00a4 FEE7     		b	.L26
 371              	.LVL42:
 372              	.L25:
 373              	.LBE15:
 374              	.LBE14:
 211:FreeRTOS/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 375              		.loc 1 211 0
 376 00a6 4260     		str	r2, [r0, #4]
 212:FreeRTOS/MemMang/heap_4.c **** 
 377              		.loc 1 212 0
 378 00a8 6360     		str	r3, [r4, #4]
 215:FreeRTOS/MemMang/heap_4.c ****                     }
 379              		.loc 1 215 0
 380 00aa FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 381              	.LVL43:
 382              	.L24:
 222:FreeRTOS/MemMang/heap_4.c **** 
 383              		.loc 1 222 0
 384 00ae 6268     		ldr	r2, [r4, #4]
 385 00b0 1949     		ldr	r1, .L40+8
 386 00b2 0B68     		ldr	r3, [r1]
 387 00b4 9B1A     		subs	r3, r3, r2
 388 00b6 0B60     		str	r3, [r1]
 224:FreeRTOS/MemMang/heap_4.c ****                     {
 389              		.loc 1 224 0
 390 00b8 1949     		ldr	r1, .L40+16
 391 00ba 0968     		ldr	r1, [r1]
 392 00bc 8B42     		cmp	r3, r1
 393 00be 01D2     		bcs	.L27
 226:FreeRTOS/MemMang/heap_4.c ****                     }
 394              		.loc 1 226 0
 395 00c0 1749     		ldr	r1, .L40+16
 396 00c2 0B60     		str	r3, [r1]
 397              	.L27:
 235:FreeRTOS/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 398              		.loc 1 235 0
 399 00c4 134B     		ldr	r3, .L40+4
ARM GAS  /tmp/ccGbUZIN.s 			page 20


 400 00c6 1B68     		ldr	r3, [r3]
 401 00c8 1343     		orrs	r3, r3, r2
 402 00ca 6360     		str	r3, [r4, #4]
 236:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 403              		.loc 1 236 0
 404 00cc 0023     		movs	r3, #0
 405 00ce 2360     		str	r3, [r4]
 237:FreeRTOS/MemMang/heap_4.c ****                 }
 406              		.loc 1 237 0
 407 00d0 144A     		ldr	r2, .L40+20
 408 00d2 1368     		ldr	r3, [r2]
 409 00d4 0133     		adds	r3, r3, #1
 410 00d6 1360     		str	r3, [r2]
 411              	.LVL44:
 412              	.L19:
 256:FreeRTOS/MemMang/heap_4.c **** 
 413              		.loc 1 256 0
 414 00d8 FFF7FEFF 		bl	xTaskResumeAll
 415              	.LVL45:
 272:FreeRTOS/MemMang/heap_4.c ****     return pvReturn;
 416              		.loc 1 272 0
 417 00dc 15F0070F 		tst	r5, #7
 418 00e0 14D0     		beq	.L17
 419              	.LBB16:
 420              	.LBB17:
 421              		.loc 2 200 0
 422              		.syntax unified
 423              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 424 00e2 4FF05003 			mov r3, #80												
 425 00e6 83F31188 		msr basepri, r3											
 426 00ea BFF36F8F 		isb														
 427 00ee BFF34F8F 		dsb														
 428              	
 429              	@ 0 "" 2
 430              	.LVL46:
 431              		.thumb
 432              		.syntax unified
 433              	.L29:
 434 00f2 FEE7     		b	.L29
 435              	.LVL47:
 436              	.L30:
 437              	.LBE17:
 438              	.LBE16:
 120:FreeRTOS/MemMang/heap_4.c **** 
 439              		.loc 1 120 0
 440 00f4 0025     		movs	r5, #0
 441 00f6 EFE7     		b	.L19
 442              	.L31:
 443 00f8 0025     		movs	r5, #0
 444 00fa EDE7     		b	.L19
 445              	.LVL48:
 446              	.L32:
 447 00fc 0025     		movs	r5, #0
 448 00fe EBE7     		b	.L19
 449              	.L34:
 450 0100 0025     		movs	r5, #0
 451 0102 E9E7     		b	.L19
ARM GAS  /tmp/ccGbUZIN.s 			page 21


 452              	.L35:
 453 0104 0025     		movs	r5, #0
 454 0106 E7E7     		b	.L19
 455              	.LVL49:
 456              	.L37:
 457 0108 0025     		movs	r5, #0
 458 010a E5E7     		b	.L19
 459              	.LVL50:
 460              	.L17:
 274:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 461              		.loc 1 274 0
 462 010c 2846     		mov	r0, r5
 463 010e 38BD     		pop	{r3, r4, r5, pc}
 464              	.LVL51:
 465              	.L41:
 466              		.align	2
 467              	.L40:
 468 0110 00000000 		.word	.LANCHOR2
 469 0114 00000000 		.word	.LANCHOR5
 470 0118 00000000 		.word	.LANCHOR4
 471 011c 00000000 		.word	.LANCHOR1
 472 0120 00000000 		.word	.LANCHOR3
 473 0124 00000000 		.word	.LANCHOR6
 474              		.cfi_endproc
 475              	.LFE5:
 477              		.section	.text.vPortFree,"ax",%progbits
 478              		.align	1
 479              		.global	vPortFree
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
 485              	vPortFree:
 486              	.LFB6:
 278:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 487              		.loc 1 278 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL52:
 282:FreeRTOS/MemMang/heap_4.c ****     {
 492              		.loc 1 282 0
 493 0000 0028     		cmp	r0, #0
 494 0002 34D0     		beq	.L49
 278:FreeRTOS/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 495              		.loc 1 278 0
 496 0004 38B5     		push	{r3, r4, r5, lr}
 497              	.LCFI4:
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 3, -16
 500              		.cfi_offset 4, -12
 501              		.cfi_offset 5, -8
 502              		.cfi_offset 14, -4
 503 0006 0446     		mov	r4, r0
 286:FreeRTOS/MemMang/heap_4.c **** 
 504              		.loc 1 286 0
 505 0008 A0F10805 		sub	r5, r0, #8
ARM GAS  /tmp/ccGbUZIN.s 			page 22


 506              	.LVL53:
 292:FreeRTOS/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 507              		.loc 1 292 0
 508 000c 50F8042C 		ldr	r2, [r0, #-4]
 509 0010 1749     		ldr	r1, .L52
 510 0012 0968     		ldr	r1, [r1]
 511 0014 0A42     		tst	r2, r1
 512 0016 08D1     		bne	.L44
 513              	.LBB18:
 514              	.LBB19:
 515              		.loc 2 200 0
 516              		.syntax unified
 517              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 518 0018 4FF05003 			mov r3, #80												
 519 001c 83F31188 		msr basepri, r3											
 520 0020 BFF36F8F 		isb														
 521 0024 BFF34F8F 		dsb														
 522              	
 523              	@ 0 "" 2
 524              	.LVL54:
 525              		.thumb
 526              		.syntax unified
 527              	.L45:
 528 0028 FEE7     		b	.L45
 529              	.L44:
 530              	.LBE19:
 531              	.LBE18:
 293:FreeRTOS/MemMang/heap_4.c **** 
 532              		.loc 1 293 0
 533 002a 50F8080C 		ldr	r0, [r0, #-8]
 534              	.LVL55:
 535 002e 40B1     		cbz	r0, .L46
 536              	.LBB20:
 537              	.LBB21:
 538              		.loc 2 200 0
 539              		.syntax unified
 540              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 541 0030 4FF05003 			mov r3, #80												
 542 0034 83F31188 		msr basepri, r3											
 543 0038 BFF36F8F 		isb														
 544 003c BFF34F8F 		dsb														
 545              	
 546              	@ 0 "" 2
 547              	.LVL56:
 548              		.thumb
 549              		.syntax unified
 550              	.L47:
 551 0040 FEE7     		b	.L47
 552              	.L46:
 553              	.LBE21:
 554              	.LBE20:
 301:FreeRTOS/MemMang/heap_4.c **** 
 555              		.loc 1 301 0
 556 0042 22EA0102 		bic	r2, r2, r1
 557 0046 44F8042C 		str	r2, [r4, #-4]
 303:FreeRTOS/MemMang/heap_4.c ****                 {
 558              		.loc 1 303 0
ARM GAS  /tmp/ccGbUZIN.s 			page 23


 559 004a FFF7FEFF 		bl	vTaskSuspendAll
 560              	.LVL57:
 306:FreeRTOS/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 561              		.loc 1 306 0
 562 004e 54F8041C 		ldr	r1, [r4, #-4]
 563 0052 084A     		ldr	r2, .L52+4
 564 0054 1368     		ldr	r3, [r2]
 565 0056 0B44     		add	r3, r3, r1
 566 0058 1360     		str	r3, [r2]
 308:FreeRTOS/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 567              		.loc 1 308 0
 568 005a 2846     		mov	r0, r5
 569 005c FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 570              	.LVL58:
 309:FreeRTOS/MemMang/heap_4.c ****                 }
 571              		.loc 1 309 0
 572 0060 054A     		ldr	r2, .L52+8
 573 0062 1368     		ldr	r3, [r2]
 574 0064 0133     		adds	r3, r3, #1
 575 0066 1360     		str	r3, [r2]
 311:FreeRTOS/MemMang/heap_4.c ****             }
 576              		.loc 1 311 0
 577 0068 FFF7FEFF 		bl	xTaskResumeAll
 578              	.LVL59:
 323:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 579              		.loc 1 323 0
 580 006c 38BD     		pop	{r3, r4, r5, pc}
 581              	.LVL60:
 582              	.L49:
 583              	.LCFI5:
 584              		.cfi_def_cfa_offset 0
 585              		.cfi_restore 3
 586              		.cfi_restore 4
 587              		.cfi_restore 5
 588              		.cfi_restore 14
 589 006e 7047     		bx	lr
 590              	.L53:
 591              		.align	2
 592              	.L52:
 593 0070 00000000 		.word	.LANCHOR5
 594 0074 00000000 		.word	.LANCHOR4
 595 0078 00000000 		.word	.LANCHOR7
 596              		.cfi_endproc
 597              	.LFE6:
 599              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 600              		.align	1
 601              		.global	xPortGetFreeHeapSize
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	xPortGetFreeHeapSize:
 608              	.LFB7:
 327:FreeRTOS/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 609              		.loc 1 327 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGbUZIN.s 			page 24


 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 329:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 614              		.loc 1 329 0
 615 0000 014B     		ldr	r3, .L55
 616 0002 1868     		ldr	r0, [r3]
 617 0004 7047     		bx	lr
 618              	.L56:
 619 0006 00BF     		.align	2
 620              	.L55:
 621 0008 00000000 		.word	.LANCHOR4
 622              		.cfi_endproc
 623              	.LFE7:
 625              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 626              		.align	1
 627              		.global	xPortGetMinimumEverFreeHeapSize
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu softvfp
 633              	xPortGetMinimumEverFreeHeapSize:
 634              	.LFB8:
 333:FreeRTOS/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 635              		.loc 1 333 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 335:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 640              		.loc 1 335 0
 641 0000 014B     		ldr	r3, .L58
 642 0002 1868     		ldr	r0, [r3]
 643 0004 7047     		bx	lr
 644              	.L59:
 645 0006 00BF     		.align	2
 646              	.L58:
 647 0008 00000000 		.word	.LANCHOR3
 648              		.cfi_endproc
 649              	.LFE8:
 651              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 652              		.align	1
 653              		.global	vPortInitialiseBlocks
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu softvfp
 659              	vPortInitialiseBlocks:
 660              	.LFB9:
 339:FreeRTOS/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 661              		.loc 1 339 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		@ link register save eliminated.
 341:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 666              		.loc 1 341 0
 667 0000 7047     		bx	lr
ARM GAS  /tmp/ccGbUZIN.s 			page 25


 668              		.cfi_endproc
 669              	.LFE9:
 671              		.section	.text.vPortGetHeapStats,"ax",%progbits
 672              		.align	1
 673              		.global	vPortGetHeapStats
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu softvfp
 679              	vPortGetHeapStats:
 680              	.LFB12:
 453:FreeRTOS/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 454:FreeRTOS/MemMang/heap_4.c **** 
 455:FreeRTOS/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 456:FreeRTOS/MemMang/heap_4.c **** {
 681              		.loc 1 456 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL61:
 686 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 687              	.LCFI6:
 688              		.cfi_def_cfa_offset 24
 689              		.cfi_offset 3, -24
 690              		.cfi_offset 4, -20
 691              		.cfi_offset 5, -16
 692              		.cfi_offset 6, -12
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695 0002 0746     		mov	r7, r0
 696              	.LVL62:
 457:FreeRTOS/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 458:FreeRTOS/MemMang/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 459:FreeRTOS/MemMang/heap_4.c **** 
 460:FreeRTOS/MemMang/heap_4.c ****     vTaskSuspendAll();
 697              		.loc 1 460 0
 698 0004 FFF7FEFF 		bl	vTaskSuspendAll
 699              	.LVL63:
 461:FreeRTOS/MemMang/heap_4.c ****     {
 462:FreeRTOS/MemMang/heap_4.c ****         pxBlock = xStart.pxNextFreeBlock;
 700              		.loc 1 462 0
 701 0008 174B     		ldr	r3, .L70
 702 000a 1B68     		ldr	r3, [r3]
 703              	.LVL64:
 463:FreeRTOS/MemMang/heap_4.c **** 
 464:FreeRTOS/MemMang/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 465:FreeRTOS/MemMang/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 466:FreeRTOS/MemMang/heap_4.c ****         if( pxBlock != NULL )
 704              		.loc 1 466 0
 705 000c 93B1     		cbz	r3, .L66
 458:FreeRTOS/MemMang/heap_4.c **** 
 706              		.loc 1 458 0
 707 000e 4FF0FF36 		mov	r6, #-1
 708 0012 0025     		movs	r5, #0
 709 0014 2C46     		mov	r4, r5
 710 0016 04E0     		b	.L65
 711              	.LVL65:
ARM GAS  /tmp/ccGbUZIN.s 			page 26


 712              	.L64:
 467:FreeRTOS/MemMang/heap_4.c ****         {
 468:FreeRTOS/MemMang/heap_4.c ****             do
 469:FreeRTOS/MemMang/heap_4.c ****             {
 470:FreeRTOS/MemMang/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
 471:FreeRTOS/MemMang/heap_4.c ****                  * so far. */
 472:FreeRTOS/MemMang/heap_4.c ****                 xBlocks++;
 473:FreeRTOS/MemMang/heap_4.c **** 
 474:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 475:FreeRTOS/MemMang/heap_4.c ****                 {
 476:FreeRTOS/MemMang/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 477:FreeRTOS/MemMang/heap_4.c ****                 }
 478:FreeRTOS/MemMang/heap_4.c **** 
 479:FreeRTOS/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 480:FreeRTOS/MemMang/heap_4.c ****                 {
 481:FreeRTOS/MemMang/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 482:FreeRTOS/MemMang/heap_4.c ****                 }
 483:FreeRTOS/MemMang/heap_4.c **** 
 484:FreeRTOS/MemMang/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 485:FreeRTOS/MemMang/heap_4.c ****                  * reached. */
 486:FreeRTOS/MemMang/heap_4.c ****                 pxBlock = pxBlock->pxNextFreeBlock;
 713              		.loc 1 486 0
 714 0018 1B68     		ldr	r3, [r3]
 715              	.LVL66:
 487:FreeRTOS/MemMang/heap_4.c ****             } while( pxBlock != pxEnd );
 716              		.loc 1 487 0
 717 001a 144A     		ldr	r2, .L70+4
 718 001c 1268     		ldr	r2, [r2]
 719 001e 9A42     		cmp	r2, r3
 720 0020 0CD0     		beq	.L62
 721              	.LVL67:
 722              	.L65:
 472:FreeRTOS/MemMang/heap_4.c **** 
 723              		.loc 1 472 0
 724 0022 0134     		adds	r4, r4, #1
 725              	.LVL68:
 474:FreeRTOS/MemMang/heap_4.c ****                 {
 726              		.loc 1 474 0
 727 0024 5A68     		ldr	r2, [r3, #4]
 728 0026 AA42     		cmp	r2, r5
 729 0028 00D9     		bls	.L63
 476:FreeRTOS/MemMang/heap_4.c ****                 }
 730              		.loc 1 476 0
 731 002a 1546     		mov	r5, r2
 732              	.LVL69:
 733              	.L63:
 479:FreeRTOS/MemMang/heap_4.c ****                 {
 734              		.loc 1 479 0
 735 002c B242     		cmp	r2, r6
 736 002e F3D2     		bcs	.L64
 481:FreeRTOS/MemMang/heap_4.c ****                 }
 737              		.loc 1 481 0
 738 0030 1646     		mov	r6, r2
 739              	.LVL70:
 740 0032 F1E7     		b	.L64
 741              	.LVL71:
 742              	.L66:
ARM GAS  /tmp/ccGbUZIN.s 			page 27


 458:FreeRTOS/MemMang/heap_4.c **** 
 743              		.loc 1 458 0
 744 0034 4FF0FF36 		mov	r6, #-1
 745 0038 0025     		movs	r5, #0
 746 003a 2C46     		mov	r4, r5
 747              	.LVL72:
 748              	.L62:
 488:FreeRTOS/MemMang/heap_4.c ****         }
 489:FreeRTOS/MemMang/heap_4.c ****     }
 490:FreeRTOS/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 749              		.loc 1 490 0
 750 003c FFF7FEFF 		bl	xTaskResumeAll
 751              	.LVL73:
 491:FreeRTOS/MemMang/heap_4.c **** 
 492:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 752              		.loc 1 492 0
 753 0040 7D60     		str	r5, [r7, #4]
 493:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 754              		.loc 1 493 0
 755 0042 BE60     		str	r6, [r7, #8]
 494:FreeRTOS/MemMang/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 756              		.loc 1 494 0
 757 0044 FC60     		str	r4, [r7, #12]
 495:FreeRTOS/MemMang/heap_4.c **** 
 496:FreeRTOS/MemMang/heap_4.c ****     taskENTER_CRITICAL();
 758              		.loc 1 496 0
 759 0046 FFF7FEFF 		bl	vPortEnterCritical
 760              	.LVL74:
 497:FreeRTOS/MemMang/heap_4.c ****     {
 498:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 761              		.loc 1 498 0
 762 004a 094B     		ldr	r3, .L70+8
 763 004c 1B68     		ldr	r3, [r3]
 764 004e 3B60     		str	r3, [r7]
 499:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 765              		.loc 1 499 0
 766 0050 084B     		ldr	r3, .L70+12
 767 0052 1B68     		ldr	r3, [r3]
 768 0054 7B61     		str	r3, [r7, #20]
 500:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 769              		.loc 1 500 0
 770 0056 084B     		ldr	r3, .L70+16
 771 0058 1B68     		ldr	r3, [r3]
 772 005a BB61     		str	r3, [r7, #24]
 501:FreeRTOS/MemMang/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 773              		.loc 1 501 0
 774 005c 074B     		ldr	r3, .L70+20
 775 005e 1B68     		ldr	r3, [r3]
 776 0060 3B61     		str	r3, [r7, #16]
 502:FreeRTOS/MemMang/heap_4.c ****     }
 503:FreeRTOS/MemMang/heap_4.c ****     taskEXIT_CRITICAL();
 777              		.loc 1 503 0
 778 0062 FFF7FEFF 		bl	vPortExitCritical
 779              	.LVL75:
 504:FreeRTOS/MemMang/heap_4.c **** }
 780              		.loc 1 504 0
 781 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccGbUZIN.s 			page 28


 782              	.LVL76:
 783              	.L71:
 784              		.align	2
 785              	.L70:
 786 0068 00000000 		.word	.LANCHOR1
 787 006c 00000000 		.word	.LANCHOR2
 788 0070 00000000 		.word	.LANCHOR4
 789 0074 00000000 		.word	.LANCHOR6
 790 0078 00000000 		.word	.LANCHOR7
 791 007c 00000000 		.word	.LANCHOR3
 792              		.cfi_endproc
 793              	.LFE12:
 795              		.section	.bss.pxEnd,"aw",%nobits
 796              		.align	2
 797              		.set	.LANCHOR2,. + 0
 800              	pxEnd:
 801 0000 00000000 		.space	4
 802              		.section	.bss.ucHeap,"aw",%nobits
 803              		.align	2
 804              		.set	.LANCHOR0,. + 0
 807              	ucHeap:
 808 0000 00000000 		.space	3072
 808      00000000 
 808      00000000 
 808      00000000 
 808      00000000 
 809              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 810              		.align	2
 811              		.set	.LANCHOR5,. + 0
 814              	xBlockAllocatedBit:
 815 0000 00000000 		.space	4
 816              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 817              		.align	2
 818              		.set	.LANCHOR4,. + 0
 821              	xFreeBytesRemaining:
 822 0000 00000000 		.space	4
 823              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 824              		.align	2
 825              		.set	.LANCHOR3,. + 0
 828              	xMinimumEverFreeBytesRemaining:
 829 0000 00000000 		.space	4
 830              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
 831              		.align	2
 832              		.set	.LANCHOR6,. + 0
 835              	xNumberOfSuccessfulAllocations:
 836 0000 00000000 		.space	4
 837              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
 838              		.align	2
 839              		.set	.LANCHOR7,. + 0
 842              	xNumberOfSuccessfulFrees:
 843 0000 00000000 		.space	4
 844              		.section	.bss.xStart,"aw",%nobits
 845              		.align	2
 846              		.set	.LANCHOR1,. + 0
 849              	xStart:
 850 0000 00000000 		.space	8
 850      00000000 
ARM GAS  /tmp/ccGbUZIN.s 			page 29


 851              		.text
 852              	.Letext0:
 853              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 854              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 855              		.file 5 "/usr/include/newlib/sys/lock.h"
 856              		.file 6 "/usr/include/newlib/sys/_types.h"
 857              		.file 7 "/usr/include/newlib/sys/reent.h"
 858              		.file 8 "/usr/include/newlib/stdlib.h"
 859              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 860              		.file 10 "FreeRTOS/ARM_CM3/FreeRTOSConfig.h"
 861              		.file 11 "FreeRTOS/include/portable.h"
 862              		.file 12 "FreeRTOS/include/task.h"
ARM GAS  /tmp/ccGbUZIN.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_4.c
     /tmp/ccGbUZIN.s:16     .text.prvHeapInit:0000000000000000 $t
     /tmp/ccGbUZIN.s:22     .text.prvHeapInit:0000000000000000 prvHeapInit
     /tmp/ccGbUZIN.s:101    .text.prvHeapInit:000000000000004c $d
     /tmp/ccGbUZIN.s:111    .text.prvInsertBlockIntoFreeList:0000000000000000 $t
     /tmp/ccGbUZIN.s:117    .text.prvInsertBlockIntoFreeList:0000000000000000 prvInsertBlockIntoFreeList
     /tmp/ccGbUZIN.s:206    .text.prvInsertBlockIntoFreeList:000000000000004c $d
     /tmp/ccGbUZIN.s:212    .text.pvPortMalloc:0000000000000000 $t
     /tmp/ccGbUZIN.s:219    .text.pvPortMalloc:0000000000000000 pvPortMalloc
     /tmp/ccGbUZIN.s:468    .text.pvPortMalloc:0000000000000110 $d
     /tmp/ccGbUZIN.s:478    .text.vPortFree:0000000000000000 $t
     /tmp/ccGbUZIN.s:485    .text.vPortFree:0000000000000000 vPortFree
     /tmp/ccGbUZIN.s:593    .text.vPortFree:0000000000000070 $d
     /tmp/ccGbUZIN.s:600    .text.xPortGetFreeHeapSize:0000000000000000 $t
     /tmp/ccGbUZIN.s:607    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
     /tmp/ccGbUZIN.s:621    .text.xPortGetFreeHeapSize:0000000000000008 $d
     /tmp/ccGbUZIN.s:626    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 $t
     /tmp/ccGbUZIN.s:633    .text.xPortGetMinimumEverFreeHeapSize:0000000000000000 xPortGetMinimumEverFreeHeapSize
     /tmp/ccGbUZIN.s:647    .text.xPortGetMinimumEverFreeHeapSize:0000000000000008 $d
     /tmp/ccGbUZIN.s:652    .text.vPortInitialiseBlocks:0000000000000000 $t
     /tmp/ccGbUZIN.s:659    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
     /tmp/ccGbUZIN.s:672    .text.vPortGetHeapStats:0000000000000000 $t
     /tmp/ccGbUZIN.s:679    .text.vPortGetHeapStats:0000000000000000 vPortGetHeapStats
     /tmp/ccGbUZIN.s:786    .text.vPortGetHeapStats:0000000000000068 $d
     /tmp/ccGbUZIN.s:796    .bss.pxEnd:0000000000000000 $d
     /tmp/ccGbUZIN.s:800    .bss.pxEnd:0000000000000000 pxEnd
     /tmp/ccGbUZIN.s:803    .bss.ucHeap:0000000000000000 $d
     /tmp/ccGbUZIN.s:807    .bss.ucHeap:0000000000000000 ucHeap
     /tmp/ccGbUZIN.s:810    .bss.xBlockAllocatedBit:0000000000000000 $d
     /tmp/ccGbUZIN.s:814    .bss.xBlockAllocatedBit:0000000000000000 xBlockAllocatedBit
     /tmp/ccGbUZIN.s:817    .bss.xFreeBytesRemaining:0000000000000000 $d
     /tmp/ccGbUZIN.s:821    .bss.xFreeBytesRemaining:0000000000000000 xFreeBytesRemaining
     /tmp/ccGbUZIN.s:824    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 $d
     /tmp/ccGbUZIN.s:828    .bss.xMinimumEverFreeBytesRemaining:0000000000000000 xMinimumEverFreeBytesRemaining
     /tmp/ccGbUZIN.s:831    .bss.xNumberOfSuccessfulAllocations:0000000000000000 $d
     /tmp/ccGbUZIN.s:835    .bss.xNumberOfSuccessfulAllocations:0000000000000000 xNumberOfSuccessfulAllocations
     /tmp/ccGbUZIN.s:838    .bss.xNumberOfSuccessfulFrees:0000000000000000 $d
     /tmp/ccGbUZIN.s:842    .bss.xNumberOfSuccessfulFrees:0000000000000000 xNumberOfSuccessfulFrees
     /tmp/ccGbUZIN.s:845    .bss.xStart:0000000000000000 $d
     /tmp/ccGbUZIN.s:849    .bss.xStart:0000000000000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
