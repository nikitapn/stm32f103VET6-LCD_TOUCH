ARM GAS  /tmp/cc6LrBXE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvGetDisinheritPriorityAfterTimeout:
  23              	.LFB22:
  24              		.file 1 "FreeRTOS/queue.c"
   1:FreeRTOS/queue.c **** /*
   2:FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/queue.c ****  *
   5:FreeRTOS/queue.c ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/queue.c ****  *
   7:FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/queue.c ****  * subject to the following conditions:
  13:FreeRTOS/queue.c ****  *
  14:FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  16:FreeRTOS/queue.c ****  *
  17:FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/queue.c ****  *
  24:FreeRTOS/queue.c ****  * https://www.FreeRTOS.org
  25:FreeRTOS/queue.c ****  * https://github.com/FreeRTOS
  26:FreeRTOS/queue.c ****  *
  27:FreeRTOS/queue.c ****  */
  28:FreeRTOS/queue.c **** 
  29:FreeRTOS/queue.c **** #include <stdlib.h>
  30:FreeRTOS/queue.c **** #include <string.h>
  31:FreeRTOS/queue.c **** 
  32:FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/queue.c ****  * task.h is included from an application file. */
ARM GAS  /tmp/cc6LrBXE.s 			page 2


  35:FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/queue.c **** 
  37:FreeRTOS/queue.c **** #include "FreeRTOS.h"
  38:FreeRTOS/queue.c **** #include "task.h"
  39:FreeRTOS/queue.c **** #include "queue.h"
  40:FreeRTOS/queue.c **** 
  41:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:FreeRTOS/queue.c ****     #include "croutine.h"
  43:FreeRTOS/queue.c **** #endif
  44:FreeRTOS/queue.c **** 
  45:FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:FreeRTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:FreeRTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:FreeRTOS/queue.c **** 
  51:FreeRTOS/queue.c **** 
  52:FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:FreeRTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:FreeRTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:FreeRTOS/queue.c **** 
  57:FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:FreeRTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:FreeRTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:FreeRTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:FreeRTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:FreeRTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:FreeRTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:FreeRTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:FreeRTOS/queue.c ****  * being used for. */
  66:FreeRTOS/queue.c **** #define uxQueueType               pcHead
  67:FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:FreeRTOS/queue.c **** 
  69:FreeRTOS/queue.c **** typedef struct QueuePointers
  70:FreeRTOS/queue.c **** {
  71:FreeRTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:FreeRTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:FreeRTOS/queue.c **** } QueuePointers_t;
  74:FreeRTOS/queue.c **** 
  75:FreeRTOS/queue.c **** typedef struct SemaphoreData
  76:FreeRTOS/queue.c **** {
  77:FreeRTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:FreeRTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  79:FreeRTOS/queue.c **** } SemaphoreData_t;
  80:FreeRTOS/queue.c **** 
  81:FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:FreeRTOS/queue.c ****  * zero. */
  83:FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:FreeRTOS/queue.c **** 
  86:FreeRTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:FreeRTOS/queue.c **** 
  88:FreeRTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  89:FreeRTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  90:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:FreeRTOS/queue.c **** #else
ARM GAS  /tmp/cc6LrBXE.s 			page 3


  92:FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:FreeRTOS/queue.c **** #endif
  94:FreeRTOS/queue.c **** 
  95:FreeRTOS/queue.c **** /*
  96:FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  97:FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:FreeRTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:FreeRTOS/queue.c ****  */
 100:FreeRTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:FreeRTOS/queue.c **** {
 102:FreeRTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:FreeRTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:FreeRTOS/queue.c **** 
 105:FreeRTOS/queue.c ****     union
 106:FreeRTOS/queue.c ****     {
 107:FreeRTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:FreeRTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:FreeRTOS/queue.c ****     } u;
 110:FreeRTOS/queue.c **** 
 111:FreeRTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:FreeRTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:FreeRTOS/queue.c **** 
 114:FreeRTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:FreeRTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:FreeRTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:FreeRTOS/queue.c **** 
 118:FreeRTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:FreeRTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:FreeRTOS/queue.c **** 
 121:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:FreeRTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:FreeRTOS/queue.c ****     #endif
 124:FreeRTOS/queue.c **** 
 125:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:FreeRTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:FreeRTOS/queue.c ****     #endif
 128:FreeRTOS/queue.c **** 
 129:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:FreeRTOS/queue.c ****         UBaseType_t uxQueueNumber;
 131:FreeRTOS/queue.c ****         uint8_t ucQueueType;
 132:FreeRTOS/queue.c ****     #endif
 133:FreeRTOS/queue.c **** } xQUEUE;
 134:FreeRTOS/queue.c **** 
 135:FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 136:FreeRTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 138:FreeRTOS/queue.c **** 
 139:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 140:FreeRTOS/queue.c **** 
 141:FreeRTOS/queue.c **** /*
 142:FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:FreeRTOS/queue.c ****  */
 145:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 146:FreeRTOS/queue.c **** 
 147:FreeRTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:FreeRTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
ARM GAS  /tmp/cc6LrBXE.s 			page 4


 149:FreeRTOS/queue.c ****  * more user friendly. */
 150:FreeRTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:FreeRTOS/queue.c ****     {
 152:FreeRTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 154:FreeRTOS/queue.c ****     } xQueueRegistryItem;
 155:FreeRTOS/queue.c **** 
 156:FreeRTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:FreeRTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:FreeRTOS/queue.c ****  * debuggers. */
 159:FreeRTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:FreeRTOS/queue.c **** 
 161:FreeRTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:FreeRTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:FreeRTOS/queue.c ****  * array position being vacant. */
 164:FreeRTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:FreeRTOS/queue.c **** 
 166:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:FreeRTOS/queue.c **** 
 168:FreeRTOS/queue.c **** /*
 169:FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:FreeRTOS/queue.c ****  */
 176:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:FreeRTOS/queue.c **** 
 178:FreeRTOS/queue.c **** /*
 179:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:FreeRTOS/queue.c ****  *
 181:FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:FreeRTOS/queue.c ****  */
 183:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:FreeRTOS/queue.c **** 
 185:FreeRTOS/queue.c **** /*
 186:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:FreeRTOS/queue.c ****  *
 188:FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:FreeRTOS/queue.c ****  */
 190:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:FreeRTOS/queue.c **** 
 192:FreeRTOS/queue.c **** /*
 193:FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:FreeRTOS/queue.c ****  * back of the queue.
 195:FreeRTOS/queue.c ****  */
 196:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
 198:FreeRTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:FreeRTOS/queue.c **** 
 200:FreeRTOS/queue.c **** /*
 201:FreeRTOS/queue.c ****  * Copies an item out of a queue.
 202:FreeRTOS/queue.c ****  */
 203:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:FreeRTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cc6LrBXE.s 			page 5


 206:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:FreeRTOS/queue.c **** 
 208:FreeRTOS/queue.c **** /*
 209:FreeRTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:FreeRTOS/queue.c ****  * the queue set that the queue contains data.
 211:FreeRTOS/queue.c ****  */
 212:FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:FreeRTOS/queue.c **** #endif
 214:FreeRTOS/queue.c **** 
 215:FreeRTOS/queue.c **** /*
 216:FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 218:FreeRTOS/queue.c ****  */
 219:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 221:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 222:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 223:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:FreeRTOS/queue.c **** 
 225:FreeRTOS/queue.c **** /*
 226:FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:FreeRTOS/queue.c ****  * as a mutex.
 229:FreeRTOS/queue.c ****  */
 230:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:FreeRTOS/queue.c **** #endif
 233:FreeRTOS/queue.c **** 
 234:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:FreeRTOS/queue.c **** 
 236:FreeRTOS/queue.c **** /*
 237:FreeRTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:FreeRTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:FreeRTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:FreeRTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:FreeRTOS/queue.c ****  * that priority.
 242:FreeRTOS/queue.c ****  */
 243:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:FreeRTOS/queue.c **** #endif
 245:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 246:FreeRTOS/queue.c **** 
 247:FreeRTOS/queue.c **** /*
 248:FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:FreeRTOS/queue.c ****  * accessing the queue event lists.
 250:FreeRTOS/queue.c ****  */
 251:FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:FreeRTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 253:FreeRTOS/queue.c ****     {                                                      \
 254:FreeRTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:FreeRTOS/queue.c ****         {                                                  \
 256:FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:FreeRTOS/queue.c ****         }                                                  \
 258:FreeRTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:FreeRTOS/queue.c ****         {                                                  \
 260:FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:FreeRTOS/queue.c ****         }                                                  \
 262:FreeRTOS/queue.c ****     }                                                      \
ARM GAS  /tmp/cc6LrBXE.s 			page 6


 263:FreeRTOS/queue.c ****     taskEXIT_CRITICAL()
 264:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/queue.c **** 
 266:FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 267:FreeRTOS/queue.c ****                                BaseType_t xNewQueue )
 268:FreeRTOS/queue.c **** {
 269:FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
 270:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 271:FreeRTOS/queue.c **** 
 272:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 273:FreeRTOS/queue.c **** 
 274:FreeRTOS/queue.c ****     if( ( pxQueue != NULL ) &&
 275:FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 276:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 277:FreeRTOS/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 278:FreeRTOS/queue.c ****     {
 279:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 280:FreeRTOS/queue.c ****         {
 281:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 282:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 283:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 284:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 285:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 286:FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 287:FreeRTOS/queue.c **** 
 288:FreeRTOS/queue.c ****             if( xNewQueue == pdFALSE )
 289:FreeRTOS/queue.c ****             {
 290:FreeRTOS/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 291:FreeRTOS/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 292:FreeRTOS/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 293:FreeRTOS/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 294:FreeRTOS/queue.c ****                  * it will be possible to write to it. */
 295:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 296:FreeRTOS/queue.c ****                 {
 297:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 298:FreeRTOS/queue.c ****                     {
 299:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 300:FreeRTOS/queue.c ****                     }
 301:FreeRTOS/queue.c ****                     else
 302:FreeRTOS/queue.c ****                     {
 303:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 304:FreeRTOS/queue.c ****                     }
 305:FreeRTOS/queue.c ****                 }
 306:FreeRTOS/queue.c ****                 else
 307:FreeRTOS/queue.c ****                 {
 308:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 309:FreeRTOS/queue.c ****                 }
 310:FreeRTOS/queue.c ****             }
 311:FreeRTOS/queue.c ****             else
 312:FreeRTOS/queue.c ****             {
 313:FreeRTOS/queue.c ****                 /* Ensure the event queues start in the correct state. */
 314:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 315:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 316:FreeRTOS/queue.c ****             }
 317:FreeRTOS/queue.c ****         }
 318:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 319:FreeRTOS/queue.c ****     }
ARM GAS  /tmp/cc6LrBXE.s 			page 7


 320:FreeRTOS/queue.c ****     else
 321:FreeRTOS/queue.c ****     {
 322:FreeRTOS/queue.c ****         xReturn = pdFAIL;
 323:FreeRTOS/queue.c ****     }
 324:FreeRTOS/queue.c **** 
 325:FreeRTOS/queue.c ****     configASSERT( xReturn != pdFAIL );
 326:FreeRTOS/queue.c **** 
 327:FreeRTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 328:FreeRTOS/queue.c ****      * versions. */
 329:FreeRTOS/queue.c ****     return xReturn;
 330:FreeRTOS/queue.c **** }
 331:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 332:FreeRTOS/queue.c **** 
 333:FreeRTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 334:FreeRTOS/queue.c **** 
 335:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 336:FreeRTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 337:FreeRTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 338:FreeRTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 339:FreeRTOS/queue.c ****                                              const uint8_t ucQueueType )
 340:FreeRTOS/queue.c ****     {
 341:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 342:FreeRTOS/queue.c **** 
 343:FreeRTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 344:FreeRTOS/queue.c ****          * supplied. */
 345:FreeRTOS/queue.c ****         configASSERT( pxStaticQueue );
 346:FreeRTOS/queue.c **** 
 347:FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 348:FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 349:FreeRTOS/queue.c **** 
 350:FreeRTOS/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 351:FreeRTOS/queue.c ****              * should not be provided if the item size is 0. */
 352:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 353:FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 354:FreeRTOS/queue.c ****         {
 355:FreeRTOS/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 356:FreeRTOS/queue.c ****                 {
 357:FreeRTOS/queue.c ****                     /* Sanity check that the size of the structure used to declare a
 358:FreeRTOS/queue.c ****                      * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 359:FreeRTOS/queue.c ****                      * the real queue and semaphore structures. */
 360:FreeRTOS/queue.c ****                     volatile size_t xSize = sizeof( StaticQueue_t );
 361:FreeRTOS/queue.c **** 
 362:FreeRTOS/queue.c ****                     /* This assertion cannot be branch covered in unit tests */
 363:FreeRTOS/queue.c ****                     configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 364:FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 365:FreeRTOS/queue.c ****                 }
 366:FreeRTOS/queue.c ****             #endif /* configASSERT_DEFINED */
 367:FreeRTOS/queue.c **** 
 368:FreeRTOS/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 369:FreeRTOS/queue.c ****              * The address of a statically allocated storage area was also passed in
 370:FreeRTOS/queue.c ****              * but is already set. */
 371:FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 372:FreeRTOS/queue.c **** 
 373:FreeRTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:FreeRTOS/queue.c ****                 {
 375:FreeRTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 376:FreeRTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
ARM GAS  /tmp/cc6LrBXE.s 			page 8


 377:FreeRTOS/queue.c ****                      * later deleted. */
 378:FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 379:FreeRTOS/queue.c ****                 }
 380:FreeRTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 381:FreeRTOS/queue.c **** 
 382:FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 383:FreeRTOS/queue.c ****         }
 384:FreeRTOS/queue.c ****         else
 385:FreeRTOS/queue.c ****         {
 386:FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 387:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 388:FreeRTOS/queue.c ****         }
 389:FreeRTOS/queue.c **** 
 390:FreeRTOS/queue.c ****         return pxNewQueue;
 391:FreeRTOS/queue.c ****     }
 392:FreeRTOS/queue.c **** 
 393:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 394:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 395:FreeRTOS/queue.c **** 
 396:FreeRTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 397:FreeRTOS/queue.c **** 
 398:FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 399:FreeRTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 400:FreeRTOS/queue.c ****                                        const uint8_t ucQueueType )
 401:FreeRTOS/queue.c ****     {
 402:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 403:FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 404:FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 405:FreeRTOS/queue.c **** 
 406:FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 407:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 408:FreeRTOS/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 409:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 410:FreeRTOS/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 411:FreeRTOS/queue.c ****         {
 412:FreeRTOS/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 413:FreeRTOS/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 414:FreeRTOS/queue.c ****              * zero in the case the queue is used as a semaphore. */
 415:FreeRTOS/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 416:FreeRTOS/queue.c **** 
 417:FreeRTOS/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 418:FreeRTOS/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 419:FreeRTOS/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 420:FreeRTOS/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 421:FreeRTOS/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 422:FreeRTOS/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 423:FreeRTOS/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 424:FreeRTOS/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 425:FreeRTOS/queue.c ****              * two bytes). */
 426:FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 427:FreeRTOS/queue.c **** 
 428:FreeRTOS/queue.c ****             if( pxNewQueue != NULL )
 429:FreeRTOS/queue.c ****             {
 430:FreeRTOS/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 431:FreeRTOS/queue.c ****                  * storage area. */
 432:FreeRTOS/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 433:FreeRTOS/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
ARM GAS  /tmp/cc6LrBXE.s 			page 9


 434:FreeRTOS/queue.c **** 
 435:FreeRTOS/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 436:FreeRTOS/queue.c ****                     {
 437:FreeRTOS/queue.c ****                         /* Queues can be created either statically or dynamically, so
 438:FreeRTOS/queue.c ****                          * note this task was created dynamically in case it is later
 439:FreeRTOS/queue.c ****                          * deleted. */
 440:FreeRTOS/queue.c ****                         pxNewQueue->ucStaticallyAllocated = pdFALSE;
 441:FreeRTOS/queue.c ****                     }
 442:FreeRTOS/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 443:FreeRTOS/queue.c **** 
 444:FreeRTOS/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 445:FreeRTOS/queue.c ****             }
 446:FreeRTOS/queue.c ****             else
 447:FreeRTOS/queue.c ****             {
 448:FreeRTOS/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 449:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 450:FreeRTOS/queue.c ****             }
 451:FreeRTOS/queue.c ****         }
 452:FreeRTOS/queue.c ****         else
 453:FreeRTOS/queue.c ****         {
 454:FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 455:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 456:FreeRTOS/queue.c ****         }
 457:FreeRTOS/queue.c **** 
 458:FreeRTOS/queue.c ****         return pxNewQueue;
 459:FreeRTOS/queue.c ****     }
 460:FreeRTOS/queue.c **** 
 461:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 462:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 463:FreeRTOS/queue.c **** 
 464:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 465:FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 466:FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 467:FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 468:FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue )
 469:FreeRTOS/queue.c **** {
 470:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 471:FreeRTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 472:FreeRTOS/queue.c ****     ( void ) ucQueueType;
 473:FreeRTOS/queue.c **** 
 474:FreeRTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 475:FreeRTOS/queue.c ****     {
 476:FreeRTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 477:FreeRTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 478:FreeRTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 479:FreeRTOS/queue.c ****          * value that is known to be within the memory map. */
 480:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 481:FreeRTOS/queue.c ****     }
 482:FreeRTOS/queue.c ****     else
 483:FreeRTOS/queue.c ****     {
 484:FreeRTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 485:FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 486:FreeRTOS/queue.c ****     }
 487:FreeRTOS/queue.c **** 
 488:FreeRTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 489:FreeRTOS/queue.c ****      * defined. */
 490:FreeRTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
ARM GAS  /tmp/cc6LrBXE.s 			page 10


 491:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 492:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 493:FreeRTOS/queue.c **** 
 494:FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 495:FreeRTOS/queue.c ****         {
 496:FreeRTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 497:FreeRTOS/queue.c ****         }
 498:FreeRTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 499:FreeRTOS/queue.c **** 
 500:FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 501:FreeRTOS/queue.c ****         {
 502:FreeRTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 503:FreeRTOS/queue.c ****         }
 504:FreeRTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 505:FreeRTOS/queue.c **** 
 506:FreeRTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 507:FreeRTOS/queue.c **** }
 508:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 509:FreeRTOS/queue.c **** 
 510:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 511:FreeRTOS/queue.c **** 
 512:FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 513:FreeRTOS/queue.c ****     {
 514:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 515:FreeRTOS/queue.c ****         {
 516:FreeRTOS/queue.c ****             /* The queue create function will set all the queue structure members
 517:FreeRTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 518:FreeRTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 519:FreeRTOS/queue.c ****             * in particular the information required for priority inheritance. */
 520:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 521:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 522:FreeRTOS/queue.c **** 
 523:FreeRTOS/queue.c ****             /* In case this is a recursive mutex. */
 524:FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 525:FreeRTOS/queue.c **** 
 526:FreeRTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 527:FreeRTOS/queue.c **** 
 528:FreeRTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 529:FreeRTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 530:FreeRTOS/queue.c ****         }
 531:FreeRTOS/queue.c ****         else
 532:FreeRTOS/queue.c ****         {
 533:FreeRTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 534:FreeRTOS/queue.c ****         }
 535:FreeRTOS/queue.c ****     }
 536:FreeRTOS/queue.c **** 
 537:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:FreeRTOS/queue.c **** 
 540:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 541:FreeRTOS/queue.c **** 
 542:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 543:FreeRTOS/queue.c ****     {
 544:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 545:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 546:FreeRTOS/queue.c **** 
 547:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
ARM GAS  /tmp/cc6LrBXE.s 			page 11


 548:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 549:FreeRTOS/queue.c **** 
 550:FreeRTOS/queue.c ****         return xNewQueue;
 551:FreeRTOS/queue.c ****     }
 552:FreeRTOS/queue.c **** 
 553:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 554:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 555:FreeRTOS/queue.c **** 
 556:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 557:FreeRTOS/queue.c **** 
 558:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 559:FreeRTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 560:FreeRTOS/queue.c ****     {
 561:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 562:FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 563:FreeRTOS/queue.c **** 
 564:FreeRTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 565:FreeRTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 566:FreeRTOS/queue.c ****         ( void ) ucQueueType;
 567:FreeRTOS/queue.c **** 
 568:FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 569:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 570:FreeRTOS/queue.c **** 
 571:FreeRTOS/queue.c ****         return xNewQueue;
 572:FreeRTOS/queue.c ****     }
 573:FreeRTOS/queue.c **** 
 574:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 575:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 576:FreeRTOS/queue.c **** 
 577:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 578:FreeRTOS/queue.c **** 
 579:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 580:FreeRTOS/queue.c ****     {
 581:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 582:FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 583:FreeRTOS/queue.c **** 
 584:FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 585:FreeRTOS/queue.c **** 
 586:FreeRTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 587:FreeRTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 588:FreeRTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 589:FreeRTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 590:FreeRTOS/queue.c ****          * following critical section exiting and the function returning. */
 591:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 592:FreeRTOS/queue.c ****         {
 593:FreeRTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 594:FreeRTOS/queue.c ****             {
 595:FreeRTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 596:FreeRTOS/queue.c ****             }
 597:FreeRTOS/queue.c ****             else
 598:FreeRTOS/queue.c ****             {
 599:FreeRTOS/queue.c ****                 pxReturn = NULL;
 600:FreeRTOS/queue.c ****             }
 601:FreeRTOS/queue.c ****         }
 602:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 603:FreeRTOS/queue.c **** 
 604:FreeRTOS/queue.c ****         return pxReturn;
ARM GAS  /tmp/cc6LrBXE.s 			page 12


 605:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 606:FreeRTOS/queue.c **** 
 607:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 608:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 609:FreeRTOS/queue.c **** 
 610:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 611:FreeRTOS/queue.c **** 
 612:FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 613:FreeRTOS/queue.c ****     {
 614:FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 615:FreeRTOS/queue.c **** 
 616:FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 617:FreeRTOS/queue.c **** 
 618:FreeRTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 619:FreeRTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 620:FreeRTOS/queue.c ****          * not required here. */
 621:FreeRTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 622:FreeRTOS/queue.c ****         {
 623:FreeRTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 624:FreeRTOS/queue.c ****         }
 625:FreeRTOS/queue.c ****         else
 626:FreeRTOS/queue.c ****         {
 627:FreeRTOS/queue.c ****             pxReturn = NULL;
 628:FreeRTOS/queue.c ****         }
 629:FreeRTOS/queue.c **** 
 630:FreeRTOS/queue.c ****         return pxReturn;
 631:FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 632:FreeRTOS/queue.c **** 
 633:FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 634:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 635:FreeRTOS/queue.c **** 
 636:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 637:FreeRTOS/queue.c **** 
 638:FreeRTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 639:FreeRTOS/queue.c ****     {
 640:FreeRTOS/queue.c ****         BaseType_t xReturn;
 641:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 642:FreeRTOS/queue.c **** 
 643:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 644:FreeRTOS/queue.c **** 
 645:FreeRTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 646:FreeRTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 647:FreeRTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 648:FreeRTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 649:FreeRTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 650:FreeRTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 651:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 652:FreeRTOS/queue.c ****         {
 653:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 654:FreeRTOS/queue.c **** 
 655:FreeRTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 656:FreeRTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 657:FreeRTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 658:FreeRTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 659:FreeRTOS/queue.c ****              * uxRecursiveCallCount member. */
 660:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 661:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cc6LrBXE.s 			page 13


 662:FreeRTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 663:FreeRTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 664:FreeRTOS/queue.c ****             {
 665:FreeRTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 666:FreeRTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 667:FreeRTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 668:FreeRTOS/queue.c ****             }
 669:FreeRTOS/queue.c ****             else
 670:FreeRTOS/queue.c ****             {
 671:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 672:FreeRTOS/queue.c ****             }
 673:FreeRTOS/queue.c **** 
 674:FreeRTOS/queue.c ****             xReturn = pdPASS;
 675:FreeRTOS/queue.c ****         }
 676:FreeRTOS/queue.c ****         else
 677:FreeRTOS/queue.c ****         {
 678:FreeRTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 679:FreeRTOS/queue.c ****              * holder. */
 680:FreeRTOS/queue.c ****             xReturn = pdFAIL;
 681:FreeRTOS/queue.c **** 
 682:FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 683:FreeRTOS/queue.c ****         }
 684:FreeRTOS/queue.c **** 
 685:FreeRTOS/queue.c ****         return xReturn;
 686:FreeRTOS/queue.c ****     }
 687:FreeRTOS/queue.c **** 
 688:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 690:FreeRTOS/queue.c **** 
 691:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 692:FreeRTOS/queue.c **** 
 693:FreeRTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 694:FreeRTOS/queue.c ****                                          TickType_t xTicksToWait )
 695:FreeRTOS/queue.c ****     {
 696:FreeRTOS/queue.c ****         BaseType_t xReturn;
 697:FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 698:FreeRTOS/queue.c **** 
 699:FreeRTOS/queue.c ****         configASSERT( pxMutex );
 700:FreeRTOS/queue.c **** 
 701:FreeRTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 702:FreeRTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 703:FreeRTOS/queue.c **** 
 704:FreeRTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 705:FreeRTOS/queue.c **** 
 706:FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 707:FreeRTOS/queue.c ****         {
 708:FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 709:FreeRTOS/queue.c ****             xReturn = pdPASS;
 710:FreeRTOS/queue.c ****         }
 711:FreeRTOS/queue.c ****         else
 712:FreeRTOS/queue.c ****         {
 713:FreeRTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 714:FreeRTOS/queue.c **** 
 715:FreeRTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 716:FreeRTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 717:FreeRTOS/queue.c ****              * before reaching here. */
 718:FreeRTOS/queue.c ****             if( xReturn != pdFAIL )
ARM GAS  /tmp/cc6LrBXE.s 			page 14


 719:FreeRTOS/queue.c ****             {
 720:FreeRTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 721:FreeRTOS/queue.c ****             }
 722:FreeRTOS/queue.c ****             else
 723:FreeRTOS/queue.c ****             {
 724:FreeRTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 725:FreeRTOS/queue.c ****             }
 726:FreeRTOS/queue.c ****         }
 727:FreeRTOS/queue.c **** 
 728:FreeRTOS/queue.c ****         return xReturn;
 729:FreeRTOS/queue.c ****     }
 730:FreeRTOS/queue.c **** 
 731:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 732:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 733:FreeRTOS/queue.c **** 
 734:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 735:FreeRTOS/queue.c **** 
 736:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 737:FreeRTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 738:FreeRTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 739:FreeRTOS/queue.c ****     {
 740:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 741:FreeRTOS/queue.c **** 
 742:FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 743:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 744:FreeRTOS/queue.c ****         {
 745:FreeRTOS/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 746:FreeRTOS/queue.c **** 
 747:FreeRTOS/queue.c ****             if( xHandle != NULL )
 748:FreeRTOS/queue.c ****             {
 749:FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 750:FreeRTOS/queue.c **** 
 751:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 752:FreeRTOS/queue.c ****             }
 753:FreeRTOS/queue.c ****             else
 754:FreeRTOS/queue.c ****             {
 755:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 756:FreeRTOS/queue.c ****             }
 757:FreeRTOS/queue.c ****         }
 758:FreeRTOS/queue.c ****         else
 759:FreeRTOS/queue.c ****         {
 760:FreeRTOS/queue.c ****             configASSERT( xHandle );
 761:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 762:FreeRTOS/queue.c ****         }
 763:FreeRTOS/queue.c **** 
 764:FreeRTOS/queue.c ****         return xHandle;
 765:FreeRTOS/queue.c ****     }
 766:FreeRTOS/queue.c **** 
 767:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 768:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 769:FreeRTOS/queue.c **** 
 770:FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 771:FreeRTOS/queue.c **** 
 772:FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 773:FreeRTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 774:FreeRTOS/queue.c ****     {
 775:FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
ARM GAS  /tmp/cc6LrBXE.s 			page 15


 776:FreeRTOS/queue.c **** 
 777:FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 778:FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 779:FreeRTOS/queue.c ****         {
 780:FreeRTOS/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 781:FreeRTOS/queue.c **** 
 782:FreeRTOS/queue.c ****             if( xHandle != NULL )
 783:FreeRTOS/queue.c ****             {
 784:FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 785:FreeRTOS/queue.c **** 
 786:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 787:FreeRTOS/queue.c ****             }
 788:FreeRTOS/queue.c ****             else
 789:FreeRTOS/queue.c ****             {
 790:FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 791:FreeRTOS/queue.c ****             }
 792:FreeRTOS/queue.c ****         }
 793:FreeRTOS/queue.c ****         else
 794:FreeRTOS/queue.c ****         {
 795:FreeRTOS/queue.c ****             configASSERT( xHandle );
 796:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 797:FreeRTOS/queue.c ****         }
 798:FreeRTOS/queue.c **** 
 799:FreeRTOS/queue.c ****         return xHandle;
 800:FreeRTOS/queue.c ****     }
 801:FreeRTOS/queue.c **** 
 802:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 803:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 804:FreeRTOS/queue.c **** 
 805:FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 806:FreeRTOS/queue.c ****                               const void * const pvItemToQueue,
 807:FreeRTOS/queue.c ****                               TickType_t xTicksToWait,
 808:FreeRTOS/queue.c ****                               const BaseType_t xCopyPosition )
 809:FreeRTOS/queue.c **** {
 810:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 811:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 812:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 813:FreeRTOS/queue.c **** 
 814:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 815:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 816:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 817:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 818:FreeRTOS/queue.c ****         {
 819:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 820:FreeRTOS/queue.c ****         }
 821:FreeRTOS/queue.c ****     #endif
 822:FreeRTOS/queue.c **** 
 823:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 824:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 825:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
 826:FreeRTOS/queue.c ****     for( ; ; )
 827:FreeRTOS/queue.c ****     {
 828:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 829:FreeRTOS/queue.c ****         {
 830:FreeRTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 831:FreeRTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 832:FreeRTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
ARM GAS  /tmp/cc6LrBXE.s 			page 16


 833:FreeRTOS/queue.c ****              * queue is full. */
 834:FreeRTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 835:FreeRTOS/queue.c ****             {
 836:FreeRTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 837:FreeRTOS/queue.c **** 
 838:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 839:FreeRTOS/queue.c ****                     {
 840:FreeRTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 841:FreeRTOS/queue.c **** 
 842:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 843:FreeRTOS/queue.c **** 
 844:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 845:FreeRTOS/queue.c ****                         {
 846:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 847:FreeRTOS/queue.c ****                             {
 848:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 849:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 850:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
 851:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 852:FreeRTOS/queue.c ****                             }
 853:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 854:FreeRTOS/queue.c ****                             {
 855:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 856:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 857:FreeRTOS/queue.c ****                                  * unblock. A context switch is required. */
 858:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 859:FreeRTOS/queue.c ****                             }
 860:FreeRTOS/queue.c ****                             else
 861:FreeRTOS/queue.c ****                             {
 862:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 863:FreeRTOS/queue.c ****                             }
 864:FreeRTOS/queue.c ****                         }
 865:FreeRTOS/queue.c ****                         else
 866:FreeRTOS/queue.c ****                         {
 867:FreeRTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 868:FreeRTOS/queue.c ****                              * queue then unblock it now. */
 869:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 870:FreeRTOS/queue.c ****                             {
 871:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 872:FreeRTOS/queue.c ****                                 {
 873:FreeRTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 874:FreeRTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 875:FreeRTOS/queue.c ****                                      * do this from within the critical section - the
 876:FreeRTOS/queue.c ****                                      * kernel takes care of that. */
 877:FreeRTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 878:FreeRTOS/queue.c ****                                 }
 879:FreeRTOS/queue.c ****                                 else
 880:FreeRTOS/queue.c ****                                 {
 881:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 882:FreeRTOS/queue.c ****                                 }
 883:FreeRTOS/queue.c ****                             }
 884:FreeRTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 885:FreeRTOS/queue.c ****                             {
 886:FreeRTOS/queue.c ****                                 /* This path is a special case that will only get
 887:FreeRTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 888:FreeRTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 889:FreeRTOS/queue.c ****                                  * different to that in which they were taken. */
ARM GAS  /tmp/cc6LrBXE.s 			page 17


 890:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 891:FreeRTOS/queue.c ****                             }
 892:FreeRTOS/queue.c ****                             else
 893:FreeRTOS/queue.c ****                             {
 894:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 895:FreeRTOS/queue.c ****                             }
 896:FreeRTOS/queue.c ****                         }
 897:FreeRTOS/queue.c ****                     }
 898:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 899:FreeRTOS/queue.c ****                     {
 900:FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 901:FreeRTOS/queue.c **** 
 902:FreeRTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 903:FreeRTOS/queue.c ****                          * queue then unblock it now. */
 904:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 905:FreeRTOS/queue.c ****                         {
 906:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 907:FreeRTOS/queue.c ****                             {
 908:FreeRTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 909:FreeRTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 910:FreeRTOS/queue.c ****                                  * this from within the critical section - the kernel
 911:FreeRTOS/queue.c ****                                  * takes care of that. */
 912:FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 913:FreeRTOS/queue.c ****                             }
 914:FreeRTOS/queue.c ****                             else
 915:FreeRTOS/queue.c ****                             {
 916:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 917:FreeRTOS/queue.c ****                             }
 918:FreeRTOS/queue.c ****                         }
 919:FreeRTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 920:FreeRTOS/queue.c ****                         {
 921:FreeRTOS/queue.c ****                             /* This path is a special case that will only get
 922:FreeRTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 923:FreeRTOS/queue.c ****                              * the mutexes were given back in an order that is
 924:FreeRTOS/queue.c ****                              * different to that in which they were taken. */
 925:FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 926:FreeRTOS/queue.c ****                         }
 927:FreeRTOS/queue.c ****                         else
 928:FreeRTOS/queue.c ****                         {
 929:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 930:FreeRTOS/queue.c ****                         }
 931:FreeRTOS/queue.c ****                     }
 932:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 933:FreeRTOS/queue.c **** 
 934:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 935:FreeRTOS/queue.c ****                 return pdPASS;
 936:FreeRTOS/queue.c ****             }
 937:FreeRTOS/queue.c ****             else
 938:FreeRTOS/queue.c ****             {
 939:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 940:FreeRTOS/queue.c ****                 {
 941:FreeRTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 942:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
 943:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 944:FreeRTOS/queue.c **** 
 945:FreeRTOS/queue.c ****                     /* Return to the original privilege level before exiting
 946:FreeRTOS/queue.c ****                      * the function. */
ARM GAS  /tmp/cc6LrBXE.s 			page 18


 947:FreeRTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 948:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 949:FreeRTOS/queue.c ****                 }
 950:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 951:FreeRTOS/queue.c ****                 {
 952:FreeRTOS/queue.c ****                     /* The queue was full and a block time was specified so
 953:FreeRTOS/queue.c ****                      * configure the timeout structure. */
 954:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 955:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 956:FreeRTOS/queue.c ****                 }
 957:FreeRTOS/queue.c ****                 else
 958:FreeRTOS/queue.c ****                 {
 959:FreeRTOS/queue.c ****                     /* Entry time was already set. */
 960:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 961:FreeRTOS/queue.c ****                 }
 962:FreeRTOS/queue.c ****             }
 963:FreeRTOS/queue.c ****         }
 964:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 965:FreeRTOS/queue.c **** 
 966:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 967:FreeRTOS/queue.c ****          * now the critical section has been exited. */
 968:FreeRTOS/queue.c **** 
 969:FreeRTOS/queue.c ****         vTaskSuspendAll();
 970:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 971:FreeRTOS/queue.c **** 
 972:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 973:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 974:FreeRTOS/queue.c ****         {
 975:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 976:FreeRTOS/queue.c ****             {
 977:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 978:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 979:FreeRTOS/queue.c **** 
 980:FreeRTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 981:FreeRTOS/queue.c ****                  * event list. It is possible that interrupts occurring now
 982:FreeRTOS/queue.c ****                  * remove this task from the event list again - but as the
 983:FreeRTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 984:FreeRTOS/queue.c ****                  * ready list instead of the actual ready list. */
 985:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 986:FreeRTOS/queue.c **** 
 987:FreeRTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 988:FreeRTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 989:FreeRTOS/queue.c ****                  * task is already in the ready list before it yields - in which
 990:FreeRTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 991:FreeRTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 992:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 993:FreeRTOS/queue.c ****                 {
 994:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 995:FreeRTOS/queue.c ****                 }
 996:FreeRTOS/queue.c ****             }
 997:FreeRTOS/queue.c ****             else
 998:FreeRTOS/queue.c ****             {
 999:FreeRTOS/queue.c ****                 /* Try again. */
1000:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1001:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1002:FreeRTOS/queue.c ****             }
1003:FreeRTOS/queue.c ****         }
ARM GAS  /tmp/cc6LrBXE.s 			page 19


1004:FreeRTOS/queue.c ****         else
1005:FreeRTOS/queue.c ****         {
1006:FreeRTOS/queue.c ****             /* The timeout has expired. */
1007:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1008:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1009:FreeRTOS/queue.c **** 
1010:FreeRTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1011:FreeRTOS/queue.c ****             return errQUEUE_FULL;
1012:FreeRTOS/queue.c ****         }
1013:FreeRTOS/queue.c ****     } /*lint -restore */
1014:FreeRTOS/queue.c **** }
1015:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1016:FreeRTOS/queue.c **** 
1017:FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1018:FreeRTOS/queue.c ****                                      const void * const pvItemToQueue,
1019:FreeRTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1020:FreeRTOS/queue.c ****                                      const BaseType_t xCopyPosition )
1021:FreeRTOS/queue.c **** {
1022:FreeRTOS/queue.c ****     BaseType_t xReturn;
1023:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1024:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1025:FreeRTOS/queue.c **** 
1026:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1027:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1028:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1029:FreeRTOS/queue.c **** 
1030:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1031:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1032:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1033:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1034:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1035:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1036:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1037:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1038:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1039:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1040:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1041:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1042:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1043:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1044:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1045:FreeRTOS/queue.c **** 
1046:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1047:FreeRTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1048:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1049:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1050:FreeRTOS/queue.c ****      * post). */
1051:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1052:FreeRTOS/queue.c ****     {
1053:FreeRTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1054:FreeRTOS/queue.c ****         {
1055:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1056:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1057:FreeRTOS/queue.c **** 
1058:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1059:FreeRTOS/queue.c **** 
1060:FreeRTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
ARM GAS  /tmp/cc6LrBXE.s 			page 20


1061:FreeRTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1062:FreeRTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1063:FreeRTOS/queue.c ****              *  called here even though the disinherit function does not check if
1064:FreeRTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1065:FreeRTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1066:FreeRTOS/queue.c **** 
1067:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1068:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1069:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1070:FreeRTOS/queue.c ****             {
1071:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1072:FreeRTOS/queue.c ****                     {
1073:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1074:FreeRTOS/queue.c ****                         {
1075:FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1076:FreeRTOS/queue.c ****                             {
1077:FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1078:FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1079:FreeRTOS/queue.c ****                                  * in the queue has not changed. */
1080:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1081:FreeRTOS/queue.c ****                             }
1082:FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1083:FreeRTOS/queue.c ****                             {
1084:FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1085:FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1086:FreeRTOS/queue.c ****                                  * unblock.  A context switch is required. */
1087:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1088:FreeRTOS/queue.c ****                                 {
1089:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1090:FreeRTOS/queue.c ****                                 }
1091:FreeRTOS/queue.c ****                                 else
1092:FreeRTOS/queue.c ****                                 {
1093:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1094:FreeRTOS/queue.c ****                                 }
1095:FreeRTOS/queue.c ****                             }
1096:FreeRTOS/queue.c ****                             else
1097:FreeRTOS/queue.c ****                             {
1098:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1099:FreeRTOS/queue.c ****                             }
1100:FreeRTOS/queue.c ****                         }
1101:FreeRTOS/queue.c ****                         else
1102:FreeRTOS/queue.c ****                         {
1103:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1104:FreeRTOS/queue.c ****                             {
1105:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1106:FreeRTOS/queue.c ****                                 {
1107:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1108:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1109:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1110:FreeRTOS/queue.c ****                                     {
1111:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1112:FreeRTOS/queue.c ****                                     }
1113:FreeRTOS/queue.c ****                                     else
1114:FreeRTOS/queue.c ****                                     {
1115:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1116:FreeRTOS/queue.c ****                                     }
1117:FreeRTOS/queue.c ****                                 }
ARM GAS  /tmp/cc6LrBXE.s 			page 21


1118:FreeRTOS/queue.c ****                                 else
1119:FreeRTOS/queue.c ****                                 {
1120:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1121:FreeRTOS/queue.c ****                                 }
1122:FreeRTOS/queue.c ****                             }
1123:FreeRTOS/queue.c ****                             else
1124:FreeRTOS/queue.c ****                             {
1125:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1126:FreeRTOS/queue.c ****                             }
1127:FreeRTOS/queue.c ****                         }
1128:FreeRTOS/queue.c ****                     }
1129:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1130:FreeRTOS/queue.c ****                     {
1131:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1132:FreeRTOS/queue.c ****                         {
1133:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1134:FreeRTOS/queue.c ****                             {
1135:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1136:FreeRTOS/queue.c ****                                  * context switch is required. */
1137:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1138:FreeRTOS/queue.c ****                                 {
1139:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1140:FreeRTOS/queue.c ****                                 }
1141:FreeRTOS/queue.c ****                                 else
1142:FreeRTOS/queue.c ****                                 {
1143:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1144:FreeRTOS/queue.c ****                                 }
1145:FreeRTOS/queue.c ****                             }
1146:FreeRTOS/queue.c ****                             else
1147:FreeRTOS/queue.c ****                             {
1148:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1149:FreeRTOS/queue.c ****                             }
1150:FreeRTOS/queue.c ****                         }
1151:FreeRTOS/queue.c ****                         else
1152:FreeRTOS/queue.c ****                         {
1153:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1154:FreeRTOS/queue.c ****                         }
1155:FreeRTOS/queue.c **** 
1156:FreeRTOS/queue.c ****                         /* Not used in this path. */
1157:FreeRTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1158:FreeRTOS/queue.c ****                     }
1159:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1160:FreeRTOS/queue.c ****             }
1161:FreeRTOS/queue.c ****             else
1162:FreeRTOS/queue.c ****             {
1163:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1164:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1165:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1166:FreeRTOS/queue.c **** 
1167:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1168:FreeRTOS/queue.c ****             }
1169:FreeRTOS/queue.c **** 
1170:FreeRTOS/queue.c ****             xReturn = pdPASS;
1171:FreeRTOS/queue.c ****         }
1172:FreeRTOS/queue.c ****         else
1173:FreeRTOS/queue.c ****         {
1174:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/cc6LrBXE.s 			page 22


1175:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1176:FreeRTOS/queue.c ****         }
1177:FreeRTOS/queue.c ****     }
1178:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1179:FreeRTOS/queue.c **** 
1180:FreeRTOS/queue.c ****     return xReturn;
1181:FreeRTOS/queue.c **** }
1182:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1183:FreeRTOS/queue.c **** 
1184:FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1185:FreeRTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1186:FreeRTOS/queue.c **** {
1187:FreeRTOS/queue.c ****     BaseType_t xReturn;
1188:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1189:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1190:FreeRTOS/queue.c **** 
1191:FreeRTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1192:FreeRTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1193:FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1194:FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1195:FreeRTOS/queue.c ****      * post). */
1196:FreeRTOS/queue.c **** 
1197:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1198:FreeRTOS/queue.c **** 
1199:FreeRTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1200:FreeRTOS/queue.c ****      * if the item size is not 0. */
1201:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1202:FreeRTOS/queue.c **** 
1203:FreeRTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1204:FreeRTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1205:FreeRTOS/queue.c ****      * interrupts, only tasks. */
1206:FreeRTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1207:FreeRTOS/queue.c **** 
1208:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1209:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1210:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1211:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1212:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1213:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1214:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1215:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1216:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1217:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1218:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1219:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1220:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1221:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1222:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1223:FreeRTOS/queue.c **** 
1224:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1225:FreeRTOS/queue.c ****     {
1226:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1227:FreeRTOS/queue.c **** 
1228:FreeRTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1229:FreeRTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1230:FreeRTOS/queue.c ****          * space'. */
1231:FreeRTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
ARM GAS  /tmp/cc6LrBXE.s 			page 23


1232:FreeRTOS/queue.c ****         {
1233:FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1234:FreeRTOS/queue.c **** 
1235:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1236:FreeRTOS/queue.c **** 
1237:FreeRTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1238:FreeRTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1239:FreeRTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1240:FreeRTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1241:FreeRTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1242:FreeRTOS/queue.c ****              * messages (semaphores) available. */
1243:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1244:FreeRTOS/queue.c **** 
1245:FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1246:FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1247:FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
1248:FreeRTOS/queue.c ****             {
1249:FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1250:FreeRTOS/queue.c ****                     {
1251:FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1252:FreeRTOS/queue.c ****                         {
1253:FreeRTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1254:FreeRTOS/queue.c ****                             {
1255:FreeRTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1256:FreeRTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1257:FreeRTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1258:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1259:FreeRTOS/queue.c ****                                 {
1260:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1261:FreeRTOS/queue.c ****                                 }
1262:FreeRTOS/queue.c ****                                 else
1263:FreeRTOS/queue.c ****                                 {
1264:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1265:FreeRTOS/queue.c ****                                 }
1266:FreeRTOS/queue.c ****                             }
1267:FreeRTOS/queue.c ****                             else
1268:FreeRTOS/queue.c ****                             {
1269:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1270:FreeRTOS/queue.c ****                             }
1271:FreeRTOS/queue.c ****                         }
1272:FreeRTOS/queue.c ****                         else
1273:FreeRTOS/queue.c ****                         {
1274:FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1275:FreeRTOS/queue.c ****                             {
1276:FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1277:FreeRTOS/queue.c ****                                 {
1278:FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1279:FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1280:FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1281:FreeRTOS/queue.c ****                                     {
1282:FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1283:FreeRTOS/queue.c ****                                     }
1284:FreeRTOS/queue.c ****                                     else
1285:FreeRTOS/queue.c ****                                     {
1286:FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1287:FreeRTOS/queue.c ****                                     }
1288:FreeRTOS/queue.c ****                                 }
ARM GAS  /tmp/cc6LrBXE.s 			page 24


1289:FreeRTOS/queue.c ****                                 else
1290:FreeRTOS/queue.c ****                                 {
1291:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1292:FreeRTOS/queue.c ****                                 }
1293:FreeRTOS/queue.c ****                             }
1294:FreeRTOS/queue.c ****                             else
1295:FreeRTOS/queue.c ****                             {
1296:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1297:FreeRTOS/queue.c ****                             }
1298:FreeRTOS/queue.c ****                         }
1299:FreeRTOS/queue.c ****                     }
1300:FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1301:FreeRTOS/queue.c ****                     {
1302:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1303:FreeRTOS/queue.c ****                         {
1304:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1305:FreeRTOS/queue.c ****                             {
1306:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1307:FreeRTOS/queue.c ****                                  * context switch is required. */
1308:FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1309:FreeRTOS/queue.c ****                                 {
1310:FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1311:FreeRTOS/queue.c ****                                 }
1312:FreeRTOS/queue.c ****                                 else
1313:FreeRTOS/queue.c ****                                 {
1314:FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1315:FreeRTOS/queue.c ****                                 }
1316:FreeRTOS/queue.c ****                             }
1317:FreeRTOS/queue.c ****                             else
1318:FreeRTOS/queue.c ****                             {
1319:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1320:FreeRTOS/queue.c ****                             }
1321:FreeRTOS/queue.c ****                         }
1322:FreeRTOS/queue.c ****                         else
1323:FreeRTOS/queue.c ****                         {
1324:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1325:FreeRTOS/queue.c ****                         }
1326:FreeRTOS/queue.c ****                     }
1327:FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1328:FreeRTOS/queue.c ****             }
1329:FreeRTOS/queue.c ****             else
1330:FreeRTOS/queue.c ****             {
1331:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1332:FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1333:FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
1334:FreeRTOS/queue.c **** 
1335:FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1336:FreeRTOS/queue.c ****             }
1337:FreeRTOS/queue.c **** 
1338:FreeRTOS/queue.c ****             xReturn = pdPASS;
1339:FreeRTOS/queue.c ****         }
1340:FreeRTOS/queue.c ****         else
1341:FreeRTOS/queue.c ****         {
1342:FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1343:FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
1344:FreeRTOS/queue.c ****         }
1345:FreeRTOS/queue.c ****     }
ARM GAS  /tmp/cc6LrBXE.s 			page 25


1346:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1347:FreeRTOS/queue.c **** 
1348:FreeRTOS/queue.c ****     return xReturn;
1349:FreeRTOS/queue.c **** }
1350:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1351:FreeRTOS/queue.c **** 
1352:FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1353:FreeRTOS/queue.c ****                           void * const pvBuffer,
1354:FreeRTOS/queue.c ****                           TickType_t xTicksToWait )
1355:FreeRTOS/queue.c **** {
1356:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1357:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1358:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1359:FreeRTOS/queue.c **** 
1360:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1361:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1362:FreeRTOS/queue.c **** 
1363:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1364:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1365:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1366:FreeRTOS/queue.c **** 
1367:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1368:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1369:FreeRTOS/queue.c ****         {
1370:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1371:FreeRTOS/queue.c ****         }
1372:FreeRTOS/queue.c ****     #endif
1373:FreeRTOS/queue.c **** 
1374:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1375:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1376:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1377:FreeRTOS/queue.c ****     for( ; ; )
1378:FreeRTOS/queue.c ****     {
1379:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1380:FreeRTOS/queue.c ****         {
1381:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1382:FreeRTOS/queue.c **** 
1383:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1384:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1385:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1386:FreeRTOS/queue.c ****             {
1387:FreeRTOS/queue.c ****                 /* Data available, remove one item. */
1388:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1389:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1390:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1391:FreeRTOS/queue.c **** 
1392:FreeRTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1393:FreeRTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1394:FreeRTOS/queue.c ****                  * task. */
1395:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1396:FreeRTOS/queue.c ****                 {
1397:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1398:FreeRTOS/queue.c ****                     {
1399:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1400:FreeRTOS/queue.c ****                     }
1401:FreeRTOS/queue.c ****                     else
1402:FreeRTOS/queue.c ****                     {
ARM GAS  /tmp/cc6LrBXE.s 			page 26


1403:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1404:FreeRTOS/queue.c ****                     }
1405:FreeRTOS/queue.c ****                 }
1406:FreeRTOS/queue.c ****                 else
1407:FreeRTOS/queue.c ****                 {
1408:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1409:FreeRTOS/queue.c ****                 }
1410:FreeRTOS/queue.c **** 
1411:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1412:FreeRTOS/queue.c ****                 return pdPASS;
1413:FreeRTOS/queue.c ****             }
1414:FreeRTOS/queue.c ****             else
1415:FreeRTOS/queue.c ****             {
1416:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1417:FreeRTOS/queue.c ****                 {
1418:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1419:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1420:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1421:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1422:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1423:FreeRTOS/queue.c ****                 }
1424:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1425:FreeRTOS/queue.c ****                 {
1426:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1427:FreeRTOS/queue.c ****                      * configure the timeout structure. */
1428:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1429:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1430:FreeRTOS/queue.c ****                 }
1431:FreeRTOS/queue.c ****                 else
1432:FreeRTOS/queue.c ****                 {
1433:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1434:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1435:FreeRTOS/queue.c ****                 }
1436:FreeRTOS/queue.c ****             }
1437:FreeRTOS/queue.c ****         }
1438:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1439:FreeRTOS/queue.c **** 
1440:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1441:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1442:FreeRTOS/queue.c **** 
1443:FreeRTOS/queue.c ****         vTaskSuspendAll();
1444:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1445:FreeRTOS/queue.c **** 
1446:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1447:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1448:FreeRTOS/queue.c ****         {
1449:FreeRTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1450:FreeRTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1451:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1452:FreeRTOS/queue.c ****             {
1453:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1454:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1455:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1456:FreeRTOS/queue.c **** 
1457:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1458:FreeRTOS/queue.c ****                 {
1459:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
ARM GAS  /tmp/cc6LrBXE.s 			page 27


1460:FreeRTOS/queue.c ****                 }
1461:FreeRTOS/queue.c ****                 else
1462:FreeRTOS/queue.c ****                 {
1463:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1464:FreeRTOS/queue.c ****                 }
1465:FreeRTOS/queue.c ****             }
1466:FreeRTOS/queue.c ****             else
1467:FreeRTOS/queue.c ****             {
1468:FreeRTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1469:FreeRTOS/queue.c ****                  * data. */
1470:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1471:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1472:FreeRTOS/queue.c ****             }
1473:FreeRTOS/queue.c ****         }
1474:FreeRTOS/queue.c ****         else
1475:FreeRTOS/queue.c ****         {
1476:FreeRTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1477:FreeRTOS/queue.c ****              * back and attempt to read the data. */
1478:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1479:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1480:FreeRTOS/queue.c **** 
1481:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1482:FreeRTOS/queue.c ****             {
1483:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1484:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1485:FreeRTOS/queue.c ****             }
1486:FreeRTOS/queue.c ****             else
1487:FreeRTOS/queue.c ****             {
1488:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1489:FreeRTOS/queue.c ****             }
1490:FreeRTOS/queue.c ****         }
1491:FreeRTOS/queue.c ****     } /*lint -restore */
1492:FreeRTOS/queue.c **** }
1493:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1494:FreeRTOS/queue.c **** 
1495:FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1496:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
1497:FreeRTOS/queue.c **** {
1498:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1499:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1500:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1501:FreeRTOS/queue.c **** 
1502:FreeRTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1503:FreeRTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1504:FreeRTOS/queue.c ****     #endif
1505:FreeRTOS/queue.c **** 
1506:FreeRTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1507:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1508:FreeRTOS/queue.c **** 
1509:FreeRTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1510:FreeRTOS/queue.c ****      * 0. */
1511:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1512:FreeRTOS/queue.c **** 
1513:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1514:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1515:FreeRTOS/queue.c ****         {
1516:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
ARM GAS  /tmp/cc6LrBXE.s 			page 28


1517:FreeRTOS/queue.c ****         }
1518:FreeRTOS/queue.c ****     #endif
1519:FreeRTOS/queue.c **** 
1520:FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1521:FreeRTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1522:FreeRTOS/queue.c ****      * of execution time efficiency. */
1523:FreeRTOS/queue.c ****     for( ; ; )
1524:FreeRTOS/queue.c ****     {
1525:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1526:FreeRTOS/queue.c ****         {
1527:FreeRTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1528:FreeRTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1529:FreeRTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1530:FreeRTOS/queue.c **** 
1531:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1532:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1533:FreeRTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1534:FreeRTOS/queue.c ****             {
1535:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1536:FreeRTOS/queue.c **** 
1537:FreeRTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1538:FreeRTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1539:FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1540:FreeRTOS/queue.c **** 
1541:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1542:FreeRTOS/queue.c ****                     {
1543:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1544:FreeRTOS/queue.c ****                         {
1545:FreeRTOS/queue.c ****                             /* Record the information required to implement
1546:FreeRTOS/queue.c ****                              * priority inheritance should it become necessary. */
1547:FreeRTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1548:FreeRTOS/queue.c ****                         }
1549:FreeRTOS/queue.c ****                         else
1550:FreeRTOS/queue.c ****                         {
1551:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1552:FreeRTOS/queue.c ****                         }
1553:FreeRTOS/queue.c ****                     }
1554:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1555:FreeRTOS/queue.c **** 
1556:FreeRTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1557:FreeRTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1558:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1559:FreeRTOS/queue.c ****                 {
1560:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1561:FreeRTOS/queue.c ****                     {
1562:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1563:FreeRTOS/queue.c ****                     }
1564:FreeRTOS/queue.c ****                     else
1565:FreeRTOS/queue.c ****                     {
1566:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1567:FreeRTOS/queue.c ****                     }
1568:FreeRTOS/queue.c ****                 }
1569:FreeRTOS/queue.c ****                 else
1570:FreeRTOS/queue.c ****                 {
1571:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1572:FreeRTOS/queue.c ****                 }
1573:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cc6LrBXE.s 			page 29


1574:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1575:FreeRTOS/queue.c ****                 return pdPASS;
1576:FreeRTOS/queue.c ****             }
1577:FreeRTOS/queue.c ****             else
1578:FreeRTOS/queue.c ****             {
1579:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1580:FreeRTOS/queue.c ****                 {
1581:FreeRTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1582:FreeRTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1583:FreeRTOS/queue.c ****                      * if it were 0 the function would have exited. */
1584:FreeRTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1585:FreeRTOS/queue.c ****                         {
1586:FreeRTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
1587:FreeRTOS/queue.c ****                         }
1588:FreeRTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1589:FreeRTOS/queue.c **** 
1590:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1591:FreeRTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1592:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1593:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1594:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1595:FreeRTOS/queue.c ****                 }
1596:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1597:FreeRTOS/queue.c ****                 {
1598:FreeRTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1599:FreeRTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1600:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1601:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1602:FreeRTOS/queue.c ****                 }
1603:FreeRTOS/queue.c ****                 else
1604:FreeRTOS/queue.c ****                 {
1605:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1606:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1607:FreeRTOS/queue.c ****                 }
1608:FreeRTOS/queue.c ****             }
1609:FreeRTOS/queue.c ****         }
1610:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1611:FreeRTOS/queue.c **** 
1612:FreeRTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1613:FreeRTOS/queue.c ****          * now the critical section has been exited. */
1614:FreeRTOS/queue.c **** 
1615:FreeRTOS/queue.c ****         vTaskSuspendAll();
1616:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1617:FreeRTOS/queue.c **** 
1618:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1619:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1620:FreeRTOS/queue.c ****         {
1621:FreeRTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1622:FreeRTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1623:FreeRTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1624:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1625:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1626:FreeRTOS/queue.c ****             {
1627:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1628:FreeRTOS/queue.c **** 
1629:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1630:FreeRTOS/queue.c ****                     {
ARM GAS  /tmp/cc6LrBXE.s 			page 30


1631:FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1632:FreeRTOS/queue.c ****                         {
1633:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1634:FreeRTOS/queue.c ****                             {
1635:FreeRTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
1636:FreeRTOS/queue.c ****                             }
1637:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1638:FreeRTOS/queue.c ****                         }
1639:FreeRTOS/queue.c ****                         else
1640:FreeRTOS/queue.c ****                         {
1641:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1642:FreeRTOS/queue.c ****                         }
1643:FreeRTOS/queue.c ****                     }
1644:FreeRTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1645:FreeRTOS/queue.c **** 
1646:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1647:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1648:FreeRTOS/queue.c **** 
1649:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1650:FreeRTOS/queue.c ****                 {
1651:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1652:FreeRTOS/queue.c ****                 }
1653:FreeRTOS/queue.c ****                 else
1654:FreeRTOS/queue.c ****                 {
1655:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1656:FreeRTOS/queue.c ****                 }
1657:FreeRTOS/queue.c ****             }
1658:FreeRTOS/queue.c ****             else
1659:FreeRTOS/queue.c ****             {
1660:FreeRTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1661:FreeRTOS/queue.c ****                  * attempt to take the semaphore again. */
1662:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1663:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1664:FreeRTOS/queue.c ****             }
1665:FreeRTOS/queue.c ****         }
1666:FreeRTOS/queue.c ****         else
1667:FreeRTOS/queue.c ****         {
1668:FreeRTOS/queue.c ****             /* Timed out. */
1669:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1670:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1671:FreeRTOS/queue.c **** 
1672:FreeRTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1673:FreeRTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1674:FreeRTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1675:FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1676:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1677:FreeRTOS/queue.c ****             {
1678:FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1679:FreeRTOS/queue.c ****                     {
1680:FreeRTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1681:FreeRTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1682:FreeRTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1683:FreeRTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
1684:FreeRTOS/queue.c ****                         {
1685:FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
1686:FreeRTOS/queue.c ****                             {
1687:FreeRTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
ARM GAS  /tmp/cc6LrBXE.s 			page 31


1688:FreeRTOS/queue.c **** 
1689:FreeRTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1690:FreeRTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1691:FreeRTOS/queue.c ****                                  * has timed out the priority should be disinherited
1692:FreeRTOS/queue.c ****                                  * again, but only as low as the next highest priority
1693:FreeRTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1694:FreeRTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
1695:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
1696:FreeRTOS/queue.c ****                             }
1697:FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
1698:FreeRTOS/queue.c ****                         }
1699:FreeRTOS/queue.c ****                     }
1700:FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1701:FreeRTOS/queue.c **** 
1702:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1703:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1704:FreeRTOS/queue.c ****             }
1705:FreeRTOS/queue.c ****             else
1706:FreeRTOS/queue.c ****             {
1707:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1708:FreeRTOS/queue.c ****             }
1709:FreeRTOS/queue.c ****         }
1710:FreeRTOS/queue.c ****     } /*lint -restore */
1711:FreeRTOS/queue.c **** }
1712:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1713:FreeRTOS/queue.c **** 
1714:FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1715:FreeRTOS/queue.c ****                        void * const pvBuffer,
1716:FreeRTOS/queue.c ****                        TickType_t xTicksToWait )
1717:FreeRTOS/queue.c **** {
1718:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1719:FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1720:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1721:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1722:FreeRTOS/queue.c **** 
1723:FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1724:FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
1725:FreeRTOS/queue.c **** 
1726:FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1727:FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1728:FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1729:FreeRTOS/queue.c **** 
1730:FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1731:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1732:FreeRTOS/queue.c ****         {
1733:FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1734:FreeRTOS/queue.c ****         }
1735:FreeRTOS/queue.c ****     #endif
1736:FreeRTOS/queue.c **** 
1737:FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1738:FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1739:FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1740:FreeRTOS/queue.c ****     for( ; ; )
1741:FreeRTOS/queue.c ****     {
1742:FreeRTOS/queue.c ****         taskENTER_CRITICAL();
1743:FreeRTOS/queue.c ****         {
1744:FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  /tmp/cc6LrBXE.s 			page 32


1745:FreeRTOS/queue.c **** 
1746:FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1747:FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1748:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1749:FreeRTOS/queue.c ****             {
1750:FreeRTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1751:FreeRTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1752:FreeRTOS/queue.c ****                  * data, not removing it. */
1753:FreeRTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1754:FreeRTOS/queue.c **** 
1755:FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1756:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1757:FreeRTOS/queue.c **** 
1758:FreeRTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1759:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1760:FreeRTOS/queue.c **** 
1761:FreeRTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1762:FreeRTOS/queue.c ****                  * any other tasks waiting for the data. */
1763:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1764:FreeRTOS/queue.c ****                 {
1765:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1766:FreeRTOS/queue.c ****                     {
1767:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1768:FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1769:FreeRTOS/queue.c ****                     }
1770:FreeRTOS/queue.c ****                     else
1771:FreeRTOS/queue.c ****                     {
1772:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1773:FreeRTOS/queue.c ****                     }
1774:FreeRTOS/queue.c ****                 }
1775:FreeRTOS/queue.c ****                 else
1776:FreeRTOS/queue.c ****                 {
1777:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1778:FreeRTOS/queue.c ****                 }
1779:FreeRTOS/queue.c **** 
1780:FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
1781:FreeRTOS/queue.c ****                 return pdPASS;
1782:FreeRTOS/queue.c ****             }
1783:FreeRTOS/queue.c ****             else
1784:FreeRTOS/queue.c ****             {
1785:FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1786:FreeRTOS/queue.c ****                 {
1787:FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1788:FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1789:FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
1790:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1791:FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
1792:FreeRTOS/queue.c ****                 }
1793:FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1794:FreeRTOS/queue.c ****                 {
1795:FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1796:FreeRTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1797:FreeRTOS/queue.c ****                      * state. */
1798:FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1799:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
1800:FreeRTOS/queue.c ****                 }
1801:FreeRTOS/queue.c ****                 else
ARM GAS  /tmp/cc6LrBXE.s 			page 33


1802:FreeRTOS/queue.c ****                 {
1803:FreeRTOS/queue.c ****                     /* Entry time was already set. */
1804:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1805:FreeRTOS/queue.c ****                 }
1806:FreeRTOS/queue.c ****             }
1807:FreeRTOS/queue.c ****         }
1808:FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
1809:FreeRTOS/queue.c **** 
1810:FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1811:FreeRTOS/queue.c ****          * now that the critical section has been exited. */
1812:FreeRTOS/queue.c **** 
1813:FreeRTOS/queue.c ****         vTaskSuspendAll();
1814:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
1815:FreeRTOS/queue.c **** 
1816:FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1817:FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1818:FreeRTOS/queue.c ****         {
1819:FreeRTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1820:FreeRTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1821:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1822:FreeRTOS/queue.c ****             {
1823:FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1824:FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1825:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1826:FreeRTOS/queue.c **** 
1827:FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1828:FreeRTOS/queue.c ****                 {
1829:FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
1830:FreeRTOS/queue.c ****                 }
1831:FreeRTOS/queue.c ****                 else
1832:FreeRTOS/queue.c ****                 {
1833:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1834:FreeRTOS/queue.c ****                 }
1835:FreeRTOS/queue.c ****             }
1836:FreeRTOS/queue.c ****             else
1837:FreeRTOS/queue.c ****             {
1838:FreeRTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1839:FreeRTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1840:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
1841:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
1842:FreeRTOS/queue.c ****             }
1843:FreeRTOS/queue.c ****         }
1844:FreeRTOS/queue.c ****         else
1845:FreeRTOS/queue.c ****         {
1846:FreeRTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1847:FreeRTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1848:FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
1849:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
1850:FreeRTOS/queue.c **** 
1851:FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1852:FreeRTOS/queue.c ****             {
1853:FreeRTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1854:FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
1855:FreeRTOS/queue.c ****             }
1856:FreeRTOS/queue.c ****             else
1857:FreeRTOS/queue.c ****             {
1858:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/cc6LrBXE.s 			page 34


1859:FreeRTOS/queue.c ****             }
1860:FreeRTOS/queue.c ****         }
1861:FreeRTOS/queue.c ****     } /*lint -restore */
1862:FreeRTOS/queue.c **** }
1863:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1864:FreeRTOS/queue.c **** 
1865:FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1866:FreeRTOS/queue.c ****                                  void * const pvBuffer,
1867:FreeRTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1868:FreeRTOS/queue.c **** {
1869:FreeRTOS/queue.c ****     BaseType_t xReturn;
1870:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1871:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1872:FreeRTOS/queue.c **** 
1873:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1874:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1875:FreeRTOS/queue.c **** 
1876:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1877:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1878:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1879:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1880:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1881:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1882:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1883:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1884:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1885:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1886:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1887:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1888:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1889:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1890:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1891:FreeRTOS/queue.c **** 
1892:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1893:FreeRTOS/queue.c ****     {
1894:FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1895:FreeRTOS/queue.c **** 
1896:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1897:FreeRTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1898:FreeRTOS/queue.c ****         {
1899:FreeRTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1900:FreeRTOS/queue.c **** 
1901:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1902:FreeRTOS/queue.c **** 
1903:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1904:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1905:FreeRTOS/queue.c **** 
1906:FreeRTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1907:FreeRTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1908:FreeRTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1909:FreeRTOS/queue.c ****              * locked. */
1910:FreeRTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
1911:FreeRTOS/queue.c ****             {
1912:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1913:FreeRTOS/queue.c ****                 {
1914:FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1915:FreeRTOS/queue.c ****                     {
ARM GAS  /tmp/cc6LrBXE.s 			page 35


1916:FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1917:FreeRTOS/queue.c ****                          * force a context switch. */
1918:FreeRTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1919:FreeRTOS/queue.c ****                         {
1920:FreeRTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1921:FreeRTOS/queue.c ****                         }
1922:FreeRTOS/queue.c ****                         else
1923:FreeRTOS/queue.c ****                         {
1924:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1925:FreeRTOS/queue.c ****                         }
1926:FreeRTOS/queue.c ****                     }
1927:FreeRTOS/queue.c ****                     else
1928:FreeRTOS/queue.c ****                     {
1929:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1930:FreeRTOS/queue.c ****                     }
1931:FreeRTOS/queue.c ****                 }
1932:FreeRTOS/queue.c ****                 else
1933:FreeRTOS/queue.c ****                 {
1934:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1935:FreeRTOS/queue.c ****                 }
1936:FreeRTOS/queue.c ****             }
1937:FreeRTOS/queue.c ****             else
1938:FreeRTOS/queue.c ****             {
1939:FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1940:FreeRTOS/queue.c ****                  * knows that data was removed while it was locked. */
1941:FreeRTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
1942:FreeRTOS/queue.c **** 
1943:FreeRTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1944:FreeRTOS/queue.c ****             }
1945:FreeRTOS/queue.c **** 
1946:FreeRTOS/queue.c ****             xReturn = pdPASS;
1947:FreeRTOS/queue.c ****         }
1948:FreeRTOS/queue.c ****         else
1949:FreeRTOS/queue.c ****         {
1950:FreeRTOS/queue.c ****             xReturn = pdFAIL;
1951:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1952:FreeRTOS/queue.c ****         }
1953:FreeRTOS/queue.c ****     }
1954:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1955:FreeRTOS/queue.c **** 
1956:FreeRTOS/queue.c ****     return xReturn;
1957:FreeRTOS/queue.c **** }
1958:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1959:FreeRTOS/queue.c **** 
1960:FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1961:FreeRTOS/queue.c ****                               void * const pvBuffer )
1962:FreeRTOS/queue.c **** {
1963:FreeRTOS/queue.c ****     BaseType_t xReturn;
1964:FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1965:FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1966:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
1967:FreeRTOS/queue.c **** 
1968:FreeRTOS/queue.c ****     configASSERT( pxQueue );
1969:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1970:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1971:FreeRTOS/queue.c **** 
1972:FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  /tmp/cc6LrBXE.s 			page 36


1973:FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1974:FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1975:FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1976:FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1977:FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1978:FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1979:FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1980:FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1981:FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1982:FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1983:FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1984:FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1985:FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1986:FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1987:FreeRTOS/queue.c **** 
1988:FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1989:FreeRTOS/queue.c ****     {
1990:FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1991:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1992:FreeRTOS/queue.c ****         {
1993:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1994:FreeRTOS/queue.c **** 
1995:FreeRTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1996:FreeRTOS/queue.c ****              * actually being removed from the queue. */
1997:FreeRTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1998:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1999:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2000:FreeRTOS/queue.c **** 
2001:FreeRTOS/queue.c ****             xReturn = pdPASS;
2002:FreeRTOS/queue.c ****         }
2003:FreeRTOS/queue.c ****         else
2004:FreeRTOS/queue.c ****         {
2005:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2006:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2007:FreeRTOS/queue.c ****         }
2008:FreeRTOS/queue.c ****     }
2009:FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2010:FreeRTOS/queue.c **** 
2011:FreeRTOS/queue.c ****     return xReturn;
2012:FreeRTOS/queue.c **** }
2013:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2014:FreeRTOS/queue.c **** 
2015:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2016:FreeRTOS/queue.c **** {
2017:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2018:FreeRTOS/queue.c **** 
2019:FreeRTOS/queue.c ****     configASSERT( xQueue );
2020:FreeRTOS/queue.c **** 
2021:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2022:FreeRTOS/queue.c ****     {
2023:FreeRTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2024:FreeRTOS/queue.c ****     }
2025:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2026:FreeRTOS/queue.c **** 
2027:FreeRTOS/queue.c ****     return uxReturn;
2028:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2029:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc6LrBXE.s 			page 37


2030:FreeRTOS/queue.c **** 
2031:FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2032:FreeRTOS/queue.c **** {
2033:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2034:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2035:FreeRTOS/queue.c **** 
2036:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2037:FreeRTOS/queue.c **** 
2038:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2039:FreeRTOS/queue.c ****     {
2040:FreeRTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2041:FreeRTOS/queue.c ****     }
2042:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2043:FreeRTOS/queue.c **** 
2044:FreeRTOS/queue.c ****     return uxReturn;
2045:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2046:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2047:FreeRTOS/queue.c **** 
2048:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2049:FreeRTOS/queue.c **** {
2050:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2051:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2052:FreeRTOS/queue.c **** 
2053:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2054:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2055:FreeRTOS/queue.c **** 
2056:FreeRTOS/queue.c ****     return uxReturn;
2057:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2058:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2059:FreeRTOS/queue.c **** 
2060:FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2061:FreeRTOS/queue.c **** {
2062:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2063:FreeRTOS/queue.c **** 
2064:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2065:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2066:FreeRTOS/queue.c **** 
2067:FreeRTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2068:FreeRTOS/queue.c ****         {
2069:FreeRTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
2070:FreeRTOS/queue.c ****         }
2071:FreeRTOS/queue.c ****     #endif
2072:FreeRTOS/queue.c **** 
2073:FreeRTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2074:FreeRTOS/queue.c ****         {
2075:FreeRTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2076:FreeRTOS/queue.c ****              * again. */
2077:FreeRTOS/queue.c ****             vPortFree( pxQueue );
2078:FreeRTOS/queue.c ****         }
2079:FreeRTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2080:FreeRTOS/queue.c ****         {
2081:FreeRTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2082:FreeRTOS/queue.c ****              * check before attempting to free the memory. */
2083:FreeRTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2084:FreeRTOS/queue.c ****             {
2085:FreeRTOS/queue.c ****                 vPortFree( pxQueue );
2086:FreeRTOS/queue.c ****             }
ARM GAS  /tmp/cc6LrBXE.s 			page 38


2087:FreeRTOS/queue.c ****             else
2088:FreeRTOS/queue.c ****             {
2089:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2090:FreeRTOS/queue.c ****             }
2091:FreeRTOS/queue.c ****         }
2092:FreeRTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2093:FreeRTOS/queue.c ****         {
2094:FreeRTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2095:FreeRTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2096:FreeRTOS/queue.c ****             ( void ) pxQueue;
2097:FreeRTOS/queue.c ****         }
2098:FreeRTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2099:FreeRTOS/queue.c **** }
2100:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2101:FreeRTOS/queue.c **** 
2102:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2103:FreeRTOS/queue.c **** 
2104:FreeRTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2105:FreeRTOS/queue.c ****     {
2106:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2107:FreeRTOS/queue.c ****     }
2108:FreeRTOS/queue.c **** 
2109:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2110:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2111:FreeRTOS/queue.c **** 
2112:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2113:FreeRTOS/queue.c **** 
2114:FreeRTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2115:FreeRTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2116:FreeRTOS/queue.c ****     {
2117:FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2118:FreeRTOS/queue.c ****     }
2119:FreeRTOS/queue.c **** 
2120:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2121:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2122:FreeRTOS/queue.c **** 
2123:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2124:FreeRTOS/queue.c **** 
2125:FreeRTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2126:FreeRTOS/queue.c ****     {
2127:FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2128:FreeRTOS/queue.c ****     }
2129:FreeRTOS/queue.c **** 
2130:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2131:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2132:FreeRTOS/queue.c **** 
2133:FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2134:FreeRTOS/queue.c **** 
2135:FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2136:FreeRTOS/queue.c ****     {
  25              		.loc 1 2136 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2137:FreeRTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
ARM GAS  /tmp/cc6LrBXE.s 			page 39


2138:FreeRTOS/queue.c **** 
2139:FreeRTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2140:FreeRTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2141:FreeRTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2142:FreeRTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2143:FreeRTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2144:FreeRTOS/queue.c ****          * mutex. */
2145:FreeRTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  31              		.loc 1 2145 0
  32 0000 436A     		ldr	r3, [r0, #36]
  33 0002 23B1     		cbz	r3, .L3
2146:FreeRTOS/queue.c ****         {
2147:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
  34              		.loc 1 2147 0
  35 0004 036B     		ldr	r3, [r0, #48]
  36 0006 1868     		ldr	r0, [r3]
  37              	.LVL1:
  38 0008 C0F10700 		rsb	r0, r0, #7
  39              	.LVL2:
  40 000c 7047     		bx	lr
  41              	.LVL3:
  42              	.L3:
2148:FreeRTOS/queue.c ****         }
2149:FreeRTOS/queue.c ****         else
2150:FreeRTOS/queue.c ****         {
2151:FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  43              		.loc 1 2151 0
  44 000e 0020     		movs	r0, #0
  45              	.LVL4:
2152:FreeRTOS/queue.c ****         }
2153:FreeRTOS/queue.c **** 
2154:FreeRTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
2155:FreeRTOS/queue.c ****     }
  46              		.loc 1 2155 0
  47 0010 7047     		bx	lr
  48              		.cfi_endproc
  49              	.LFE22:
  51              		.section	.text.prvIsQueueFull,"ax",%progbits
  52              		.align	1
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu softvfp
  58              	prvIsQueueFull:
  59              	.LFB28:
2156:FreeRTOS/queue.c **** 
2157:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2158:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2159:FreeRTOS/queue.c **** 
2160:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2161:FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
2162:FreeRTOS/queue.c ****                                       const BaseType_t xPosition )
2163:FreeRTOS/queue.c **** {
2164:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
2165:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2166:FreeRTOS/queue.c **** 
2167:FreeRTOS/queue.c ****     /* This function is called from a critical section. */
ARM GAS  /tmp/cc6LrBXE.s 			page 40


2168:FreeRTOS/queue.c **** 
2169:FreeRTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2170:FreeRTOS/queue.c **** 
2171:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2172:FreeRTOS/queue.c ****     {
2173:FreeRTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2174:FreeRTOS/queue.c ****             {
2175:FreeRTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2176:FreeRTOS/queue.c ****                 {
2177:FreeRTOS/queue.c ****                     /* The mutex is no longer being held. */
2178:FreeRTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2179:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
2180:FreeRTOS/queue.c ****                 }
2181:FreeRTOS/queue.c ****                 else
2182:FreeRTOS/queue.c ****                 {
2183:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2184:FreeRTOS/queue.c ****                 }
2185:FreeRTOS/queue.c ****             }
2186:FreeRTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2187:FreeRTOS/queue.c ****     }
2188:FreeRTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2189:FreeRTOS/queue.c ****     {
2190:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2191:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2192:FreeRTOS/queue.c **** 
2193:FreeRTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2194:FreeRTOS/queue.c ****         {
2195:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2196:FreeRTOS/queue.c ****         }
2197:FreeRTOS/queue.c ****         else
2198:FreeRTOS/queue.c ****         {
2199:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:FreeRTOS/queue.c ****         }
2201:FreeRTOS/queue.c ****     }
2202:FreeRTOS/queue.c ****     else
2203:FreeRTOS/queue.c ****     {
2204:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2205:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2206:FreeRTOS/queue.c **** 
2207:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2208:FreeRTOS/queue.c ****         {
2209:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2210:FreeRTOS/queue.c ****         }
2211:FreeRTOS/queue.c ****         else
2212:FreeRTOS/queue.c ****         {
2213:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2214:FreeRTOS/queue.c ****         }
2215:FreeRTOS/queue.c **** 
2216:FreeRTOS/queue.c ****         if( xPosition == queueOVERWRITE )
2217:FreeRTOS/queue.c ****         {
2218:FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2219:FreeRTOS/queue.c ****             {
2220:FreeRTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2221:FreeRTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2222:FreeRTOS/queue.c ****                  * one is added again below the number of recorded items remains
2223:FreeRTOS/queue.c ****                  * correct. */
2224:FreeRTOS/queue.c ****                 --uxMessagesWaiting;
ARM GAS  /tmp/cc6LrBXE.s 			page 41


2225:FreeRTOS/queue.c ****             }
2226:FreeRTOS/queue.c ****             else
2227:FreeRTOS/queue.c ****             {
2228:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2229:FreeRTOS/queue.c ****             }
2230:FreeRTOS/queue.c ****         }
2231:FreeRTOS/queue.c ****         else
2232:FreeRTOS/queue.c ****         {
2233:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2234:FreeRTOS/queue.c ****         }
2235:FreeRTOS/queue.c ****     }
2236:FreeRTOS/queue.c **** 
2237:FreeRTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2238:FreeRTOS/queue.c **** 
2239:FreeRTOS/queue.c ****     return xReturn;
2240:FreeRTOS/queue.c **** }
2241:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2242:FreeRTOS/queue.c **** 
2243:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2244:FreeRTOS/queue.c ****                                   void * const pvBuffer )
2245:FreeRTOS/queue.c **** {
2246:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2247:FreeRTOS/queue.c ****     {
2248:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2249:FreeRTOS/queue.c **** 
2250:FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2251:FreeRTOS/queue.c ****         {
2252:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2253:FreeRTOS/queue.c ****         }
2254:FreeRTOS/queue.c ****         else
2255:FreeRTOS/queue.c ****         {
2256:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2257:FreeRTOS/queue.c ****         }
2258:FreeRTOS/queue.c **** 
2259:FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2260:FreeRTOS/queue.c ****     }
2261:FreeRTOS/queue.c **** }
2262:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2263:FreeRTOS/queue.c **** 
2264:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2265:FreeRTOS/queue.c **** {
2266:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2267:FreeRTOS/queue.c **** 
2268:FreeRTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2269:FreeRTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2270:FreeRTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2271:FreeRTOS/queue.c ****      * updated. */
2272:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2273:FreeRTOS/queue.c ****     {
2274:FreeRTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2275:FreeRTOS/queue.c **** 
2276:FreeRTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2277:FreeRTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2278:FreeRTOS/queue.c ****         {
2279:FreeRTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2280:FreeRTOS/queue.c ****              * blocked waiting for data to become available? */
2281:FreeRTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  /tmp/cc6LrBXE.s 			page 42


2282:FreeRTOS/queue.c ****                 {
2283:FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
2284:FreeRTOS/queue.c ****                     {
2285:FreeRTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2286:FreeRTOS/queue.c ****                         {
2287:FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
2288:FreeRTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2289:FreeRTOS/queue.c ****                              * A context switch is required. */
2290:FreeRTOS/queue.c ****                             vTaskMissedYield();
2291:FreeRTOS/queue.c ****                         }
2292:FreeRTOS/queue.c ****                         else
2293:FreeRTOS/queue.c ****                         {
2294:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2295:FreeRTOS/queue.c ****                         }
2296:FreeRTOS/queue.c ****                     }
2297:FreeRTOS/queue.c ****                     else
2298:FreeRTOS/queue.c ****                     {
2299:FreeRTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2300:FreeRTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2301:FreeRTOS/queue.c ****                          * suspended. */
2302:FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2303:FreeRTOS/queue.c ****                         {
2304:FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2305:FreeRTOS/queue.c ****                             {
2306:FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2307:FreeRTOS/queue.c ****                                  * context switch is required. */
2308:FreeRTOS/queue.c ****                                 vTaskMissedYield();
2309:FreeRTOS/queue.c ****                             }
2310:FreeRTOS/queue.c ****                             else
2311:FreeRTOS/queue.c ****                             {
2312:FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2313:FreeRTOS/queue.c ****                             }
2314:FreeRTOS/queue.c ****                         }
2315:FreeRTOS/queue.c ****                         else
2316:FreeRTOS/queue.c ****                         {
2317:FreeRTOS/queue.c ****                             break;
2318:FreeRTOS/queue.c ****                         }
2319:FreeRTOS/queue.c ****                     }
2320:FreeRTOS/queue.c ****                 }
2321:FreeRTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2322:FreeRTOS/queue.c ****                 {
2323:FreeRTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2324:FreeRTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2325:FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2326:FreeRTOS/queue.c ****                     {
2327:FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2328:FreeRTOS/queue.c ****                         {
2329:FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that
2330:FreeRTOS/queue.c ****                              * a context switch is required. */
2331:FreeRTOS/queue.c ****                             vTaskMissedYield();
2332:FreeRTOS/queue.c ****                         }
2333:FreeRTOS/queue.c ****                         else
2334:FreeRTOS/queue.c ****                         {
2335:FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2336:FreeRTOS/queue.c ****                         }
2337:FreeRTOS/queue.c ****                     }
2338:FreeRTOS/queue.c ****                     else
ARM GAS  /tmp/cc6LrBXE.s 			page 43


2339:FreeRTOS/queue.c ****                     {
2340:FreeRTOS/queue.c ****                         break;
2341:FreeRTOS/queue.c ****                     }
2342:FreeRTOS/queue.c ****                 }
2343:FreeRTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2344:FreeRTOS/queue.c **** 
2345:FreeRTOS/queue.c ****             --cTxLock;
2346:FreeRTOS/queue.c ****         }
2347:FreeRTOS/queue.c **** 
2348:FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2349:FreeRTOS/queue.c ****     }
2350:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2351:FreeRTOS/queue.c **** 
2352:FreeRTOS/queue.c ****     /* Do the same for the Rx lock. */
2353:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2354:FreeRTOS/queue.c ****     {
2355:FreeRTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2356:FreeRTOS/queue.c **** 
2357:FreeRTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2358:FreeRTOS/queue.c ****         {
2359:FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2360:FreeRTOS/queue.c ****             {
2361:FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2362:FreeRTOS/queue.c ****                 {
2363:FreeRTOS/queue.c ****                     vTaskMissedYield();
2364:FreeRTOS/queue.c ****                 }
2365:FreeRTOS/queue.c ****                 else
2366:FreeRTOS/queue.c ****                 {
2367:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2368:FreeRTOS/queue.c ****                 }
2369:FreeRTOS/queue.c **** 
2370:FreeRTOS/queue.c ****                 --cRxLock;
2371:FreeRTOS/queue.c ****             }
2372:FreeRTOS/queue.c ****             else
2373:FreeRTOS/queue.c ****             {
2374:FreeRTOS/queue.c ****                 break;
2375:FreeRTOS/queue.c ****             }
2376:FreeRTOS/queue.c ****         }
2377:FreeRTOS/queue.c **** 
2378:FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2379:FreeRTOS/queue.c ****     }
2380:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2381:FreeRTOS/queue.c **** }
2382:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2383:FreeRTOS/queue.c **** 
2384:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2385:FreeRTOS/queue.c **** {
2386:FreeRTOS/queue.c ****     BaseType_t xReturn;
2387:FreeRTOS/queue.c **** 
2388:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
2389:FreeRTOS/queue.c ****     {
2390:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2391:FreeRTOS/queue.c ****         {
2392:FreeRTOS/queue.c ****             xReturn = pdTRUE;
2393:FreeRTOS/queue.c ****         }
2394:FreeRTOS/queue.c ****         else
2395:FreeRTOS/queue.c ****         {
ARM GAS  /tmp/cc6LrBXE.s 			page 44


2396:FreeRTOS/queue.c ****             xReturn = pdFALSE;
2397:FreeRTOS/queue.c ****         }
2398:FreeRTOS/queue.c ****     }
2399:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
2400:FreeRTOS/queue.c **** 
2401:FreeRTOS/queue.c ****     return xReturn;
2402:FreeRTOS/queue.c **** }
2403:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2404:FreeRTOS/queue.c **** 
2405:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2406:FreeRTOS/queue.c **** {
2407:FreeRTOS/queue.c ****     BaseType_t xReturn;
2408:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2409:FreeRTOS/queue.c **** 
2410:FreeRTOS/queue.c ****     configASSERT( pxQueue );
2411:FreeRTOS/queue.c **** 
2412:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2413:FreeRTOS/queue.c ****     {
2414:FreeRTOS/queue.c ****         xReturn = pdTRUE;
2415:FreeRTOS/queue.c ****     }
2416:FreeRTOS/queue.c ****     else
2417:FreeRTOS/queue.c ****     {
2418:FreeRTOS/queue.c ****         xReturn = pdFALSE;
2419:FreeRTOS/queue.c ****     }
2420:FreeRTOS/queue.c **** 
2421:FreeRTOS/queue.c ****     return xReturn;
2422:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2423:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2424:FreeRTOS/queue.c **** 
2425:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2426:FreeRTOS/queue.c **** {
  60              		.loc 1 2426 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10B5     		push	{r4, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 4, -8
  69              		.cfi_offset 14, -4
  70 0002 0446     		mov	r4, r0
2427:FreeRTOS/queue.c ****     BaseType_t xReturn;
2428:FreeRTOS/queue.c **** 
2429:FreeRTOS/queue.c ****     taskENTER_CRITICAL();
  71              		.loc 1 2429 0
  72 0004 FFF7FEFF 		bl	vPortEnterCritical
  73              	.LVL6:
2430:FreeRTOS/queue.c ****     {
2431:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  74              		.loc 1 2431 0
  75 0008 A26B     		ldr	r2, [r4, #56]
  76 000a E36B     		ldr	r3, [r4, #60]
  77 000c 9A42     		cmp	r2, r3
  78 000e 04D0     		beq	.L8
2432:FreeRTOS/queue.c ****         {
2433:FreeRTOS/queue.c ****             xReturn = pdTRUE;
ARM GAS  /tmp/cc6LrBXE.s 			page 45


2434:FreeRTOS/queue.c ****         }
2435:FreeRTOS/queue.c ****         else
2436:FreeRTOS/queue.c ****         {
2437:FreeRTOS/queue.c ****             xReturn = pdFALSE;
  79              		.loc 1 2437 0
  80 0010 0024     		movs	r4, #0
  81              	.LVL7:
  82              	.L5:
2438:FreeRTOS/queue.c ****         }
2439:FreeRTOS/queue.c ****     }
2440:FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
  83              		.loc 1 2440 0
  84 0012 FFF7FEFF 		bl	vPortExitCritical
  85              	.LVL8:
2441:FreeRTOS/queue.c **** 
2442:FreeRTOS/queue.c ****     return xReturn;
2443:FreeRTOS/queue.c **** }
  86              		.loc 1 2443 0
  87 0016 2046     		mov	r0, r4
  88 0018 10BD     		pop	{r4, pc}
  89              	.LVL9:
  90              	.L8:
2433:FreeRTOS/queue.c ****         }
  91              		.loc 1 2433 0
  92 001a 0124     		movs	r4, #1
  93              	.LVL10:
  94 001c F9E7     		b	.L5
  95              		.cfi_endproc
  96              	.LFE28:
  98              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  99              		.align	1
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu softvfp
 105              	prvIsQueueEmpty:
 106              	.LFB26:
2385:FreeRTOS/queue.c ****     BaseType_t xReturn;
 107              		.loc 1 2385 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              	.LVL11:
 112 0000 10B5     		push	{r4, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 4, -8
 116              		.cfi_offset 14, -4
 117 0002 0446     		mov	r4, r0
2388:FreeRTOS/queue.c ****     {
 118              		.loc 1 2388 0
 119 0004 FFF7FEFF 		bl	vPortEnterCritical
 120              	.LVL12:
2390:FreeRTOS/queue.c ****         {
 121              		.loc 1 2390 0
 122 0008 A36B     		ldr	r3, [r4, #56]
 123 000a 23B1     		cbz	r3, .L13
ARM GAS  /tmp/cc6LrBXE.s 			page 46


2396:FreeRTOS/queue.c ****         }
 124              		.loc 1 2396 0
 125 000c 0024     		movs	r4, #0
 126              	.LVL13:
 127              	.L10:
2399:FreeRTOS/queue.c **** 
 128              		.loc 1 2399 0
 129 000e FFF7FEFF 		bl	vPortExitCritical
 130              	.LVL14:
2402:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 131              		.loc 1 2402 0
 132 0012 2046     		mov	r0, r4
 133 0014 10BD     		pop	{r4, pc}
 134              	.LVL15:
 135              	.L13:
2392:FreeRTOS/queue.c ****         }
 136              		.loc 1 2392 0
 137 0016 0124     		movs	r4, #1
 138              	.LVL16:
 139 0018 F9E7     		b	.L10
 140              		.cfi_endproc
 141              	.LFE26:
 143              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	prvCopyDataToQueue:
 151              	.LFB23:
2163:FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 152              		.loc 1 2163 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL17:
 157 0000 70B5     		push	{r4, r5, r6, lr}
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 16
 160              		.cfi_offset 4, -16
 161              		.cfi_offset 5, -12
 162              		.cfi_offset 6, -8
 163              		.cfi_offset 14, -4
 164 0002 0446     		mov	r4, r0
 165 0004 1646     		mov	r6, r2
 166              	.LVL18:
2169:FreeRTOS/queue.c **** 
 167              		.loc 1 2169 0
 168 0006 856B     		ldr	r5, [r0, #56]
 169              	.LVL19:
2171:FreeRTOS/queue.c ****     {
 170              		.loc 1 2171 0
 171 0008 026C     		ldr	r2, [r0, #64]
 172              	.LVL20:
 173 000a 5AB9     		cbnz	r2, .L15
2175:FreeRTOS/queue.c ****                 {
 174              		.loc 1 2175 0
ARM GAS  /tmp/cc6LrBXE.s 			page 47


 175 000c 0368     		ldr	r3, [r0]
 176 000e 1BB1     		cbz	r3, .L24
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 177              		.loc 1 2164 0
 178 0010 0020     		movs	r0, #0
 179              	.LVL21:
 180              	.L16:
2237:FreeRTOS/queue.c **** 
 181              		.loc 1 2237 0
 182 0012 0135     		adds	r5, r5, #1
 183              	.LVL22:
 184 0014 A563     		str	r5, [r4, #56]
2240:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 185              		.loc 1 2240 0
 186 0016 70BD     		pop	{r4, r5, r6, pc}
 187              	.LVL23:
 188              	.L24:
2178:FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 189              		.loc 1 2178 0
 190 0018 8068     		ldr	r0, [r0, #8]
 191              	.LVL24:
 192 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 193              	.LVL25:
2179:FreeRTOS/queue.c ****                 }
 194              		.loc 1 2179 0
 195 001e 0023     		movs	r3, #0
 196 0020 A360     		str	r3, [r4, #8]
 197 0022 F6E7     		b	.L16
 198              	.LVL26:
 199              	.L15:
2188:FreeRTOS/queue.c ****     {
 200              		.loc 1 2188 0
 201 0024 6EB9     		cbnz	r6, .L17
2190:FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 202              		.loc 1 2190 0
 203 0026 4068     		ldr	r0, [r0, #4]
 204              	.LVL27:
 205 0028 FFF7FEFF 		bl	memcpy
 206              	.LVL28:
2191:FreeRTOS/queue.c **** 
 207              		.loc 1 2191 0
 208 002c 226C     		ldr	r2, [r4, #64]
 209 002e 6368     		ldr	r3, [r4, #4]
 210 0030 1344     		add	r3, r3, r2
 211 0032 6360     		str	r3, [r4, #4]
2193:FreeRTOS/queue.c ****         {
 212              		.loc 1 2193 0
 213 0034 A268     		ldr	r2, [r4, #8]
 214 0036 9342     		cmp	r3, r2
 215 0038 19D3     		bcc	.L20
2195:FreeRTOS/queue.c ****         }
 216              		.loc 1 2195 0
 217 003a 2368     		ldr	r3, [r4]
 218 003c 6360     		str	r3, [r4, #4]
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 219              		.loc 1 2164 0
 220 003e 0020     		movs	r0, #0
ARM GAS  /tmp/cc6LrBXE.s 			page 48


 221 0040 E7E7     		b	.L16
 222              	.LVL29:
 223              	.L17:
2204:FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 224              		.loc 1 2204 0
 225 0042 C068     		ldr	r0, [r0, #12]
 226              	.LVL30:
 227 0044 FFF7FEFF 		bl	memcpy
 228              	.LVL31:
2205:FreeRTOS/queue.c **** 
 229              		.loc 1 2205 0
 230 0048 226C     		ldr	r2, [r4, #64]
 231 004a 5242     		negs	r2, r2
 232 004c E368     		ldr	r3, [r4, #12]
 233 004e 1344     		add	r3, r3, r2
 234 0050 E360     		str	r3, [r4, #12]
2207:FreeRTOS/queue.c ****         {
 235              		.loc 1 2207 0
 236 0052 2168     		ldr	r1, [r4]
 237 0054 8B42     		cmp	r3, r1
 238 0056 02D2     		bcs	.L18
2209:FreeRTOS/queue.c ****         }
 239              		.loc 1 2209 0
 240 0058 A368     		ldr	r3, [r4, #8]
 241 005a 1A44     		add	r2, r2, r3
 242 005c E260     		str	r2, [r4, #12]
 243              	.L18:
2216:FreeRTOS/queue.c ****         {
 244              		.loc 1 2216 0
 245 005e 022E     		cmp	r6, #2
 246 0060 01D0     		beq	.L25
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 247              		.loc 1 2164 0
 248 0062 0020     		movs	r0, #0
 249 0064 D5E7     		b	.L16
 250              	.L25:
2218:FreeRTOS/queue.c ****             {
 251              		.loc 1 2218 0
 252 0066 25B1     		cbz	r5, .L22
2224:FreeRTOS/queue.c ****             }
 253              		.loc 1 2224 0
 254 0068 013D     		subs	r5, r5, #1
 255              	.LVL32:
2164:FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
 256              		.loc 1 2164 0
 257 006a 0020     		movs	r0, #0
 258 006c D1E7     		b	.L16
 259              	.L20:
 260 006e 0020     		movs	r0, #0
 261 0070 CFE7     		b	.L16
 262              	.L22:
 263 0072 0020     		movs	r0, #0
 264 0074 CDE7     		b	.L16
 265              		.cfi_endproc
 266              	.LFE23:
 268              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 269              		.align	1
ARM GAS  /tmp/cc6LrBXE.s 			page 49


 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	prvCopyDataFromQueue:
 276              	.LFB24:
2245:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 277              		.loc 1 2245 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL33:
2246:FreeRTOS/queue.c ****     {
 282              		.loc 1 2246 0
 283 0000 026C     		ldr	r2, [r0, #64]
 284 0002 72B1     		cbz	r2, .L30
2245:FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 285              		.loc 1 2245 0
 286 0004 10B5     		push	{r4, lr}
 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 4, -8
 290              		.cfi_offset 14, -4
2248:FreeRTOS/queue.c **** 
 291              		.loc 1 2248 0
 292 0006 C368     		ldr	r3, [r0, #12]
 293 0008 1344     		add	r3, r3, r2
 294 000a C360     		str	r3, [r0, #12]
2250:FreeRTOS/queue.c ****         {
 295              		.loc 1 2250 0
 296 000c 8468     		ldr	r4, [r0, #8]
 297 000e A342     		cmp	r3, r4
 298 0010 01D3     		bcc	.L28
2252:FreeRTOS/queue.c ****         }
 299              		.loc 1 2252 0
 300 0012 0368     		ldr	r3, [r0]
 301 0014 C360     		str	r3, [r0, #12]
 302              	.L28:
 303 0016 0C46     		mov	r4, r1
2259:FreeRTOS/queue.c ****     }
 304              		.loc 1 2259 0
 305 0018 C168     		ldr	r1, [r0, #12]
 306              	.LVL34:
 307 001a 2046     		mov	r0, r4
 308              	.LVL35:
 309 001c FFF7FEFF 		bl	memcpy
 310              	.LVL36:
2261:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 311              		.loc 1 2261 0
 312 0020 10BD     		pop	{r4, pc}
 313              	.LVL37:
 314              	.L30:
 315              	.LCFI4:
 316              		.cfi_def_cfa_offset 0
 317              		.cfi_restore 4
 318              		.cfi_restore 14
 319 0022 7047     		bx	lr
ARM GAS  /tmp/cc6LrBXE.s 			page 50


 320              		.cfi_endproc
 321              	.LFE24:
 323              		.section	.text.prvUnlockQueue,"ax",%progbits
 324              		.align	1
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu softvfp
 330              	prvUnlockQueue:
 331              	.LFB25:
2265:FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 332              		.loc 1 2265 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              	.LVL38:
 337 0000 38B5     		push	{r3, r4, r5, lr}
 338              	.LCFI5:
 339              		.cfi_def_cfa_offset 16
 340              		.cfi_offset 3, -16
 341              		.cfi_offset 4, -12
 342              		.cfi_offset 5, -8
 343              		.cfi_offset 14, -4
 344 0002 0546     		mov	r5, r0
2272:FreeRTOS/queue.c ****     {
 345              		.loc 1 2272 0
 346 0004 FFF7FEFF 		bl	vPortEnterCritical
 347              	.LVL39:
 348              	.LBB107:
2274:FreeRTOS/queue.c **** 
 349              		.loc 1 2274 0
 350 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 351 000c 64B2     		sxtb	r4, r4
 352              	.LVL40:
2277:FreeRTOS/queue.c ****         {
 353              		.loc 1 2277 0
 354 000e 03E0     		b	.L34
 355              	.L43:
2331:FreeRTOS/queue.c ****                         }
 356              		.loc 1 2331 0
 357 0010 FFF7FEFF 		bl	vTaskMissedYield
 358              	.LVL41:
 359              	.L36:
2345:FreeRTOS/queue.c ****         }
 360              		.loc 1 2345 0
 361 0014 013C     		subs	r4, r4, #1
 362              	.LVL42:
 363 0016 64B2     		sxtb	r4, r4
 364              	.LVL43:
 365              	.L34:
2277:FreeRTOS/queue.c ****         {
 366              		.loc 1 2277 0
 367 0018 002C     		cmp	r4, #0
 368 001a 08DD     		ble	.L35
2325:FreeRTOS/queue.c ****                     {
 369              		.loc 1 2325 0
 370 001c 6B6A     		ldr	r3, [r5, #36]
ARM GAS  /tmp/cc6LrBXE.s 			page 51


 371 001e 33B1     		cbz	r3, .L35
2327:FreeRTOS/queue.c ****                         {
 372              		.loc 1 2327 0
 373 0020 05F12400 		add	r0, r5, #36
 374 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 375              	.LVL44:
 376 0028 0028     		cmp	r0, #0
 377 002a F3D0     		beq	.L36
 378 002c F0E7     		b	.L43
 379              	.L35:
2348:FreeRTOS/queue.c ****     }
 380              		.loc 1 2348 0
 381 002e FF23     		movs	r3, #255
 382 0030 85F84530 		strb	r3, [r5, #69]
 383              	.LBE107:
2350:FreeRTOS/queue.c **** 
 384              		.loc 1 2350 0
 385 0034 FFF7FEFF 		bl	vPortExitCritical
 386              	.LVL45:
2353:FreeRTOS/queue.c ****     {
 387              		.loc 1 2353 0
 388 0038 FFF7FEFF 		bl	vPortEnterCritical
 389              	.LVL46:
 390              	.LBB108:
2355:FreeRTOS/queue.c **** 
 391              		.loc 1 2355 0
 392 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 393              	.LVL47:
 394 0040 64B2     		sxtb	r4, r4
 395              	.LVL48:
2357:FreeRTOS/queue.c ****         {
 396              		.loc 1 2357 0
 397 0042 03E0     		b	.L38
 398              	.L44:
2363:FreeRTOS/queue.c ****                 }
 399              		.loc 1 2363 0
 400 0044 FFF7FEFF 		bl	vTaskMissedYield
 401              	.LVL49:
 402              	.L40:
2370:FreeRTOS/queue.c ****             }
 403              		.loc 1 2370 0
 404 0048 013C     		subs	r4, r4, #1
 405              	.LVL50:
 406 004a 64B2     		sxtb	r4, r4
 407              	.LVL51:
 408              	.L38:
2357:FreeRTOS/queue.c ****         {
 409              		.loc 1 2357 0
 410 004c 002C     		cmp	r4, #0
 411 004e 08DD     		ble	.L39
2359:FreeRTOS/queue.c ****             {
 412              		.loc 1 2359 0
 413 0050 2B69     		ldr	r3, [r5, #16]
 414 0052 33B1     		cbz	r3, .L39
2361:FreeRTOS/queue.c ****                 {
 415              		.loc 1 2361 0
 416 0054 05F11000 		add	r0, r5, #16
ARM GAS  /tmp/cc6LrBXE.s 			page 52


 417 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 418              	.LVL52:
 419 005c 0028     		cmp	r0, #0
 420 005e F3D0     		beq	.L40
 421 0060 F0E7     		b	.L44
 422              	.L39:
2378:FreeRTOS/queue.c ****     }
 423              		.loc 1 2378 0
 424 0062 FF23     		movs	r3, #255
 425 0064 85F84430 		strb	r3, [r5, #68]
 426              	.LBE108:
2380:FreeRTOS/queue.c **** }
 427              		.loc 1 2380 0
 428 0068 FFF7FEFF 		bl	vPortExitCritical
 429              	.LVL53:
2381:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 430              		.loc 1 2381 0
 431 006c 38BD     		pop	{r3, r4, r5, pc}
 432              		.cfi_endproc
 433              	.LFE25:
 435              		.section	.text.xQueueGenericReset,"ax",%progbits
 436              		.align	1
 437              		.global	xQueueGenericReset
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu softvfp
 443              	xQueueGenericReset:
 444              	.LFB5:
 268:FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
 445              		.loc 1 268 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL54:
 450 0000 38B5     		push	{r3, r4, r5, lr}
 451              	.LCFI6:
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 3, -16
 454              		.cfi_offset 4, -12
 455              		.cfi_offset 5, -8
 456              		.cfi_offset 14, -4
 457              	.LVL55:
 272:FreeRTOS/queue.c **** 
 458              		.loc 1 272 0
 459 0002 40B9     		cbnz	r0, .L46
 460              	.LBB109:
 461              	.LBB110:
 462              		.file 2 "FreeRTOS/ARM_CM3/portmacro.h"
   1:FreeRTOS/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:FreeRTOS/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
ARM GAS  /tmp/cc6LrBXE.s 			page 53


   9:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/ARM_CM3/portmacro.h **** 
  29:FreeRTOS/ARM_CM3/portmacro.h **** 
  30:FreeRTOS/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:FreeRTOS/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:FreeRTOS/ARM_CM3/portmacro.h **** 
  33:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  34:FreeRTOS/ARM_CM3/portmacro.h ****         extern "C" {
  35:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  36:FreeRTOS/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  38:FreeRTOS/ARM_CM3/portmacro.h ****  * Port specific definitions.
  39:FreeRTOS/ARM_CM3/portmacro.h ****  *
  40:FreeRTOS/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:FreeRTOS/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  42:FreeRTOS/ARM_CM3/portmacro.h ****  *
  43:FreeRTOS/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  44:FreeRTOS/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  45:FreeRTOS/ARM_CM3/portmacro.h ****  */
  46:FreeRTOS/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/ARM_CM3/portmacro.h **** /* Type definitions. */
  48:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCHAR          char
  49:FreeRTOS/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  50:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  51:FreeRTOS/ARM_CM3/portmacro.h ****     #define portLONG          long
  52:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSHORT         short
  53:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  55:FreeRTOS/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:FreeRTOS/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  58:FreeRTOS/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:FreeRTOS/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  62:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:FreeRTOS/ARM_CM3/portmacro.h ****     #else
  64:FreeRTOS/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  65:FreeRTOS/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
ARM GAS  /tmp/cc6LrBXE.s 			page 54


  66:FreeRTOS/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:FreeRTOS/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  69:FreeRTOS/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
  71:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  72:FreeRTOS/ARM_CM3/portmacro.h **** 
  73:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  74:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:FreeRTOS/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  79:FreeRTOS/ARM_CM3/portmacro.h **** 
  80:FreeRTOS/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  81:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  82:FreeRTOS/ARM_CM3/portmacro.h ****     {                                                   \
  83:FreeRTOS/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:FreeRTOS/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:FreeRTOS/ARM_CM3/portmacro.h ****                                                         \
  86:FreeRTOS/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:FreeRTOS/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:FreeRTOS/ARM_CM3/portmacro.h ****     }
  91:FreeRTOS/ARM_CM3/portmacro.h **** 
  92:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:FreeRTOS/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  97:FreeRTOS/ARM_CM3/portmacro.h **** 
  98:FreeRTOS/ARM_CM3/portmacro.h **** /* Critical section management. */
  99:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 100:FreeRTOS/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 101:FreeRTOS/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:FreeRTOS/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:FreeRTOS/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:FreeRTOS/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:FreeRTOS/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:FreeRTOS/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:FreeRTOS/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:FreeRTOS/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 113:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:FreeRTOS/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 116:FreeRTOS/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 118:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:FreeRTOS/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:FreeRTOS/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 122:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc6LrBXE.s 			page 55


 123:FreeRTOS/ARM_CM3/portmacro.h **** 
 124:FreeRTOS/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 125:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:FreeRTOS/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 128:FreeRTOS/ARM_CM3/portmacro.h **** 
 129:FreeRTOS/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:FreeRTOS/ARM_CM3/portmacro.h **** 
 131:FreeRTOS/ARM_CM3/portmacro.h **** /* Generic helper function. */
 132:FreeRTOS/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:FreeRTOS/ARM_CM3/portmacro.h ****         {
 134:FreeRTOS/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 135:FreeRTOS/ARM_CM3/portmacro.h **** 
 136:FreeRTOS/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:FreeRTOS/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/ARM_CM3/portmacro.h ****             return ucReturn;
 139:FreeRTOS/ARM_CM3/portmacro.h ****         }
 140:FreeRTOS/ARM_CM3/portmacro.h **** 
 141:FreeRTOS/ARM_CM3/portmacro.h **** /* Check the configuration. */
 142:FreeRTOS/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:FreeRTOS/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:FreeRTOS/ARM_CM3/portmacro.h ****         #endif
 145:FreeRTOS/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:FreeRTOS/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:FreeRTOS/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 151:FreeRTOS/ARM_CM3/portmacro.h **** 
 152:FreeRTOS/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:FreeRTOS/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:FreeRTOS/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 157:FreeRTOS/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 159:FreeRTOS/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:FreeRTOS/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 162:FreeRTOS/ARM_CM3/portmacro.h **** 
 163:FreeRTOS/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 164:FreeRTOS/ARM_CM3/portmacro.h ****     #define portNOP()
 165:FreeRTOS/ARM_CM3/portmacro.h **** 
 166:FreeRTOS/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 167:FreeRTOS/ARM_CM3/portmacro.h **** 
 168:FreeRTOS/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 169:FreeRTOS/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:FreeRTOS/ARM_CM3/portmacro.h ****     #endif
 171:FreeRTOS/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 173:FreeRTOS/ARM_CM3/portmacro.h **** 
 174:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:FreeRTOS/ARM_CM3/portmacro.h ****     {
 176:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:FreeRTOS/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 178:FreeRTOS/ARM_CM3/portmacro.h **** 
 179:FreeRTOS/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
ARM GAS  /tmp/cc6LrBXE.s 			page 56


 180:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:FreeRTOS/ARM_CM3/portmacro.h **** 
 182:FreeRTOS/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:FreeRTOS/ARM_CM3/portmacro.h ****         {
 184:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 185:FreeRTOS/ARM_CM3/portmacro.h ****         }
 186:FreeRTOS/ARM_CM3/portmacro.h ****         else
 187:FreeRTOS/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 189:FreeRTOS/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/ARM_CM3/portmacro.h ****         return xReturn;
 192:FreeRTOS/ARM_CM3/portmacro.h ****     }
 193:FreeRTOS/ARM_CM3/portmacro.h **** 
 194:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 195:FreeRTOS/ARM_CM3/portmacro.h **** 
 196:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:FreeRTOS/ARM_CM3/portmacro.h ****     {
 198:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:FreeRTOS/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 463              		.loc 2 200 0
 464              		.syntax unified
 465              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 466 0004 4FF05003 			mov r3, #80												
 467 0008 83F31188 		msr basepri, r3											
 468 000c BFF36F8F 		isb														
 469 0010 BFF34F8F 		dsb														
 470              	
 471              	@ 0 "" 2
 472              	.LVL56:
 473              		.thumb
 474              		.syntax unified
 475              	.L47:
 476 0014 FEE7     		b	.L47
 477              	.L46:
 478 0016 0446     		mov	r4, r0
 479              	.LBE110:
 480              	.LBE109:
 275:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 481              		.loc 1 275 0 discriminator 1
 482 0018 C36B     		ldr	r3, [r0, #60]
 274:FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 483              		.loc 1 274 0 discriminator 1
 484 001a 2BB1     		cbz	r3, .L48
 277:FreeRTOS/queue.c ****     {
 485              		.loc 1 277 0
 486 001c 026C     		ldr	r2, [r0, #64]
 487 001e 0020     		movs	r0, #0
 488              	.LVL57:
 489 0020 A2FB0323 		umull	r2, r3, r2, r3
 490 0024 4BB9     		cbnz	r3, .L56
 491              	.L49:
 275:FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 492              		.loc 1 275 0
 493 0026 50B1     		cbz	r0, .L57
 494              	.L48:
ARM GAS  /tmp/cc6LrBXE.s 			page 57


 495              	.LBB111:
 496              	.LBB112:
 497              		.loc 2 200 0
 498              		.syntax unified
 499              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 500 0028 4FF05003 			mov r3, #80												
 501 002c 83F31188 		msr basepri, r3											
 502 0030 BFF36F8F 		isb														
 503 0034 BFF34F8F 		dsb														
 504              	
 505              	@ 0 "" 2
 506              	.LVL58:
 507              		.thumb
 508              		.syntax unified
 509              	.L53:
 510 0038 FEE7     		b	.L53
 511              	.L56:
 512              	.LBE112:
 513              	.LBE111:
 277:FreeRTOS/queue.c ****     {
 514              		.loc 1 277 0
 515 003a 0120     		movs	r0, #1
 516 003c F3E7     		b	.L49
 517              	.L57:
 518 003e 0D46     		mov	r5, r1
 279:FreeRTOS/queue.c ****         {
 519              		.loc 1 279 0
 520 0040 FFF7FEFF 		bl	vPortEnterCritical
 521              	.LVL59:
 281:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 522              		.loc 1 281 0
 523 0044 2168     		ldr	r1, [r4]
 524 0046 E26B     		ldr	r2, [r4, #60]
 525 0048 236C     		ldr	r3, [r4, #64]
 526 004a 03FB0210 		mla	r0, r3, r2, r1
 527 004e A060     		str	r0, [r4, #8]
 282:FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 528              		.loc 1 282 0
 529 0050 0020     		movs	r0, #0
 530 0052 A063     		str	r0, [r4, #56]
 283:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 531              		.loc 1 283 0
 532 0054 6160     		str	r1, [r4, #4]
 284:FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 533              		.loc 1 284 0
 534 0056 013A     		subs	r2, r2, #1
 535 0058 02FB0313 		mla	r3, r2, r3, r1
 536 005c E360     		str	r3, [r4, #12]
 285:FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 537              		.loc 1 285 0
 538 005e FF23     		movs	r3, #255
 539 0060 84F84430 		strb	r3, [r4, #68]
 286:FreeRTOS/queue.c **** 
 540              		.loc 1 286 0
 541 0064 84F84530 		strb	r3, [r4, #69]
 288:FreeRTOS/queue.c ****             {
 542              		.loc 1 288 0
ARM GAS  /tmp/cc6LrBXE.s 			page 58


 543 0068 95B9     		cbnz	r5, .L51
 295:FreeRTOS/queue.c ****                 {
 544              		.loc 1 295 0
 545 006a 2369     		ldr	r3, [r4, #16]
 546 006c 63B1     		cbz	r3, .L52
 297:FreeRTOS/queue.c ****                     {
 547              		.loc 1 297 0
 548 006e 04F11000 		add	r0, r4, #16
 549 0072 FFF7FEFF 		bl	xTaskRemoveFromEventList
 550              	.LVL60:
 551 0076 38B1     		cbz	r0, .L52
 299:FreeRTOS/queue.c ****                     }
 552              		.loc 1 299 0
 553 0078 0A4B     		ldr	r3, .L58
 554 007a 4FF08052 		mov	r2, #268435456
 555 007e 1A60     		str	r2, [r3]
 556              		.syntax unified
 557              	@ 299 "FreeRTOS/queue.c" 1
 558 0080 BFF34F8F 		dsb
 559              	@ 0 "" 2
 560              	@ 299 "FreeRTOS/queue.c" 1
 561 0084 BFF36F8F 		isb
 562              	@ 0 "" 2
 563              		.thumb
 564              		.syntax unified
 565              	.L52:
 318:FreeRTOS/queue.c ****     }
 566              		.loc 1 318 0
 567 0088 FFF7FEFF 		bl	vPortExitCritical
 568              	.LVL61:
 330:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 569              		.loc 1 330 0
 570 008c 0120     		movs	r0, #1
 571 008e 38BD     		pop	{r3, r4, r5, pc}
 572              	.LVL62:
 573              	.L51:
 314:FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 574              		.loc 1 314 0
 575 0090 04F11000 		add	r0, r4, #16
 576 0094 FFF7FEFF 		bl	vListInitialise
 577              	.LVL63:
 315:FreeRTOS/queue.c ****             }
 578              		.loc 1 315 0
 579 0098 04F12400 		add	r0, r4, #36
 580 009c FFF7FEFF 		bl	vListInitialise
 581              	.LVL64:
 582 00a0 F2E7     		b	.L52
 583              	.L59:
 584 00a2 00BF     		.align	2
 585              	.L58:
 586 00a4 04ED00E0 		.word	-536810236
 587              		.cfi_endproc
 588              	.LFE5:
 590              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 591              		.align	1
 592              		.syntax unified
 593              		.thumb
ARM GAS  /tmp/cc6LrBXE.s 			page 59


 594              		.thumb_func
 595              		.fpu softvfp
 597              	prvInitialiseNewQueue:
 598              	.LFB7:
 469:FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 599              		.loc 1 469 0
 600              		.cfi_startproc
 601              		@ args = 4, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              	.LVL65:
 604 0000 10B5     		push	{r4, lr}
 605              	.LCFI7:
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 4, -8
 608              		.cfi_offset 14, -4
 609 0002 029B     		ldr	r3, [sp, #8]
 610              	.LVL66:
 474:FreeRTOS/queue.c ****     {
 611              		.loc 1 474 0
 612 0004 0C46     		mov	r4, r1
 613 0006 39B9     		cbnz	r1, .L61
 480:FreeRTOS/queue.c ****     }
 614              		.loc 1 480 0
 615 0008 1B60     		str	r3, [r3]
 616              	.L62:
 490:FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 617              		.loc 1 490 0
 618 000a D863     		str	r0, [r3, #60]
 491:FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 619              		.loc 1 491 0
 620 000c 1C64     		str	r4, [r3, #64]
 492:FreeRTOS/queue.c **** 
 621              		.loc 1 492 0
 622 000e 0121     		movs	r1, #1
 623              	.LVL67:
 624 0010 1846     		mov	r0, r3
 625              	.LVL68:
 626 0012 FFF7FEFF 		bl	xQueueGenericReset
 627              	.LVL69:
 507:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 628              		.loc 1 507 0
 629 0016 10BD     		pop	{r4, pc}
 630              	.LVL70:
 631              	.L61:
 485:FreeRTOS/queue.c ****     }
 632              		.loc 1 485 0
 633 0018 1A60     		str	r2, [r3]
 634 001a F6E7     		b	.L62
 635              		.cfi_endproc
 636              	.LFE7:
 638              		.section	.text.xQueueGenericCreate,"ax",%progbits
 639              		.align	1
 640              		.global	xQueueGenericCreate
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu softvfp
ARM GAS  /tmp/cc6LrBXE.s 			page 60


 646              	xQueueGenericCreate:
 647              	.LFB6:
 401:FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 648              		.loc 1 401 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL71:
 653 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 654              	.LCFI8:
 655              		.cfi_def_cfa_offset 20
 656              		.cfi_offset 4, -20
 657              		.cfi_offset 5, -16
 658              		.cfi_offset 6, -12
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 83B0     		sub	sp, sp, #12
 662              	.LCFI9:
 663              		.cfi_def_cfa_offset 32
 664              	.LVL72:
 406:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 665              		.loc 1 406 0
 666 0004 F8B1     		cbz	r0, .L65
 667 0006 0346     		mov	r3, r0
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 668              		.loc 1 408 0 discriminator 1
 669 0008 0020     		movs	r0, #0
 670              	.LVL73:
 671 000a A1FB0345 		umull	r4, r5, r1, r3
 672 000e C5B9     		cbnz	r5, .L71
 673              	.L66:
 406:FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 674              		.loc 1 406 0 discriminator 1
 675 0010 C8B9     		cbnz	r0, .L65
 410:FreeRTOS/queue.c ****         {
 676              		.loc 1 410 0
 677 0012 01FB03F0 		mul	r0, r1, r3
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 678              		.loc 1 408 0
 679 0016 10F1490F 		cmn	r0, #73
 680 001a 14D8     		bhi	.L65
 681 001c 1C46     		mov	r4, r3
 682 001e 1746     		mov	r7, r2
 683 0020 0D46     		mov	r5, r1
 684              	.LVL74:
 426:FreeRTOS/queue.c **** 
 685              		.loc 1 426 0
 686 0022 4830     		adds	r0, r0, #72
 687              	.LVL75:
 688 0024 FFF7FEFF 		bl	pvPortMalloc
 689              	.LVL76:
 428:FreeRTOS/queue.c ****             {
 690              		.loc 1 428 0
 691 0028 0646     		mov	r6, r0
 692 002a 38B1     		cbz	r0, .L64
 693              	.LVL77:
 444:FreeRTOS/queue.c ****             }
ARM GAS  /tmp/cc6LrBXE.s 			page 61


 694              		.loc 1 444 0
 695 002c 0090     		str	r0, [sp]
 696 002e 3B46     		mov	r3, r7
 697 0030 00F14802 		add	r2, r0, #72
 698              	.LVL78:
 699 0034 2946     		mov	r1, r5
 700 0036 2046     		mov	r0, r4
 701              	.LVL79:
 702 0038 FFF7FEFF 		bl	prvInitialiseNewQueue
 703              	.LVL80:
 704              	.L64:
 459:FreeRTOS/queue.c **** 
 705              		.loc 1 459 0
 706 003c 3046     		mov	r0, r6
 707 003e 03B0     		add	sp, sp, #12
 708              	.LCFI10:
 709              		.cfi_remember_state
 710              		.cfi_def_cfa_offset 20
 711              		@ sp needed
 712 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 713              	.LVL81:
 714              	.L71:
 715              	.LCFI11:
 716              		.cfi_restore_state
 408:FreeRTOS/queue.c ****             /* Check for addition overflow. */
 717              		.loc 1 408 0 discriminator 1
 718 0042 0120     		movs	r0, #1
 719 0044 E4E7     		b	.L66
 720              	.LVL82:
 721              	.L65:
 722              	.LBB113:
 723              	.LBB114:
 724              		.loc 2 200 0
 725              		.syntax unified
 726              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 727 0046 4FF05003 			mov r3, #80												
 728 004a 83F31188 		msr basepri, r3											
 729 004e BFF36F8F 		isb														
 730 0052 BFF34F8F 		dsb														
 731              	
 732              	@ 0 "" 2
 733              	.LVL83:
 734              		.thumb
 735              		.syntax unified
 736              	.L69:
 737 0056 FEE7     		b	.L69
 738              	.LBE114:
 739              	.LBE113:
 740              		.cfi_endproc
 741              	.LFE6:
 743              		.section	.text.xQueueGenericSend,"ax",%progbits
 744              		.align	1
 745              		.global	xQueueGenericSend
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu softvfp
ARM GAS  /tmp/cc6LrBXE.s 			page 62


 751              	xQueueGenericSend:
 752              	.LFB10:
 809:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 753              		.loc 1 809 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              	.LVL84:
 758 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 759              	.LCFI12:
 760              		.cfi_def_cfa_offset 20
 761              		.cfi_offset 4, -20
 762              		.cfi_offset 5, -16
 763              		.cfi_offset 6, -12
 764              		.cfi_offset 7, -8
 765              		.cfi_offset 14, -4
 766 0002 85B0     		sub	sp, sp, #20
 767              	.LCFI13:
 768              		.cfi_def_cfa_offset 40
 769 0004 0192     		str	r2, [sp, #4]
 770              	.LVL85:
 814:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 771              		.loc 1 814 0
 772 0006 60B1     		cbz	r0, .L97
 773 0008 0446     		mov	r4, r0
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 774              		.loc 1 815 0
 775 000a 99B9     		cbnz	r1, .L75
 815:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 776              		.loc 1 815 0 is_stmt 0 discriminator 2
 777 000c 026C     		ldr	r2, [r0, #64]
 778              	.LVL86:
 779 000e 8AB1     		cbz	r2, .L75
 780              	.LBB115:
 781              	.LBB116:
 782              		.loc 2 200 0 is_stmt 1
 783              		.syntax unified
 784              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 785 0010 4FF05003 			mov r3, #80												
 786 0014 83F31188 		msr basepri, r3											
 787 0018 BFF36F8F 		isb														
 788 001c BFF34F8F 		dsb														
 789              	
 790              	@ 0 "" 2
 791              	.LVL87:
 792              		.thumb
 793              		.syntax unified
 794              	.L76:
 795 0020 FEE7     		b	.L76
 796              	.LVL88:
 797              	.L97:
 798              	.LBE116:
 799              	.LBE115:
 800              	.LBB117:
 801              	.LBB118:
 802              		.syntax unified
 803              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cc6LrBXE.s 			page 63


 804 0022 4FF05003 			mov r3, #80												
 805 0026 83F31188 		msr basepri, r3											
 806 002a BFF36F8F 		isb														
 807 002e BFF34F8F 		dsb														
 808              	
 809              	@ 0 "" 2
 810              	.LVL89:
 811              		.thumb
 812              		.syntax unified
 813              	.L74:
 814 0032 FEE7     		b	.L74
 815              	.LVL90:
 816              	.L75:
 817              	.LBE118:
 818              	.LBE117:
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 819              		.loc 1 816 0
 820 0034 022B     		cmp	r3, #2
 821 0036 0BD1     		bne	.L77
 816:FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 822              		.loc 1 816 0 is_stmt 0 discriminator 2
 823 0038 E26B     		ldr	r2, [r4, #60]
 824 003a 012A     		cmp	r2, #1
 825 003c 08D0     		beq	.L77
 826              	.LBB119:
 827              	.LBB120:
 828              		.loc 2 200 0 is_stmt 1
 829              		.syntax unified
 830              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 831 003e 4FF05003 			mov r3, #80												
 832 0042 83F31188 		msr basepri, r3											
 833 0046 BFF36F8F 		isb														
 834 004a BFF34F8F 		dsb														
 835              	
 836              	@ 0 "" 2
 837              	.LVL91:
 838              		.thumb
 839              		.syntax unified
 840              	.L78:
 841 004e FEE7     		b	.L78
 842              	.LVL92:
 843              	.L77:
 844 0050 1E46     		mov	r6, r3
 845 0052 0F46     		mov	r7, r1
 846              	.LBE120:
 847              	.LBE119:
 819:FreeRTOS/queue.c ****         }
 848              		.loc 1 819 0
 849 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 850              	.LVL93:
 851 0058 50B9     		cbnz	r0, .L94
 819:FreeRTOS/queue.c ****         }
 852              		.loc 1 819 0 is_stmt 0 discriminator 2
 853 005a 019B     		ldr	r3, [sp, #4]
 854 005c 53B1     		cbz	r3, .L95
 855              	.LBB121:
 856              	.LBB122:
ARM GAS  /tmp/cc6LrBXE.s 			page 64


 857              		.loc 2 200 0 is_stmt 1
 858              		.syntax unified
 859              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 860 005e 4FF05003 			mov r3, #80												
 861 0062 83F31188 		msr basepri, r3											
 862 0066 BFF36F8F 		isb														
 863 006a BFF34F8F 		dsb														
 864              	
 865              	@ 0 "" 2
 866              	.LVL94:
 867              		.thumb
 868              		.syntax unified
 869              	.L80:
 870 006e FEE7     		b	.L80
 871              	.L94:
 872              	.LBE122:
 873              	.LBE121:
 874 0070 0025     		movs	r5, #0
 875 0072 3AE0     		b	.L81
 876              	.L95:
 877 0074 0025     		movs	r5, #0
 878 0076 38E0     		b	.L81
 879              	.LVL95:
 880              	.L82:
 900:FreeRTOS/queue.c **** 
 881              		.loc 1 900 0
 882 0078 3246     		mov	r2, r6
 883 007a 3946     		mov	r1, r7
 884 007c 2046     		mov	r0, r4
 885 007e FFF7FEFF 		bl	prvCopyDataToQueue
 886              	.LVL96:
 904:FreeRTOS/queue.c ****                         {
 887              		.loc 1 904 0
 888 0082 636A     		ldr	r3, [r4, #36]
 889 0084 4BB9     		cbnz	r3, .L98
 919:FreeRTOS/queue.c ****                         {
 890              		.loc 1 919 0
 891 0086 A8B1     		cbz	r0, .L85
 925:FreeRTOS/queue.c ****                         }
 892              		.loc 1 925 0
 893 0088 3B4B     		ldr	r3, .L103
 894 008a 4FF08052 		mov	r2, #268435456
 895 008e 1A60     		str	r2, [r3]
 896              		.syntax unified
 897              	@ 925 "FreeRTOS/queue.c" 1
 898 0090 BFF34F8F 		dsb
 899              	@ 0 "" 2
 900              	@ 925 "FreeRTOS/queue.c" 1
 901 0094 BFF36F8F 		isb
 902              	@ 0 "" 2
 903              		.thumb
 904              		.syntax unified
 905 0098 0CE0     		b	.L85
 906              	.L98:
 906:FreeRTOS/queue.c ****                             {
 907              		.loc 1 906 0
 908 009a 04F12400 		add	r0, r4, #36
ARM GAS  /tmp/cc6LrBXE.s 			page 65


 909              	.LVL97:
 910 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 911              	.LVL98:
 912 00a2 38B1     		cbz	r0, .L85
 912:FreeRTOS/queue.c ****                             }
 913              		.loc 1 912 0
 914 00a4 344B     		ldr	r3, .L103
 915 00a6 4FF08052 		mov	r2, #268435456
 916 00aa 1A60     		str	r2, [r3]
 917              		.syntax unified
 918              	@ 912 "FreeRTOS/queue.c" 1
 919 00ac BFF34F8F 		dsb
 920              	@ 0 "" 2
 921              	@ 912 "FreeRTOS/queue.c" 1
 922 00b0 BFF36F8F 		isb
 923              	@ 0 "" 2
 924              		.thumb
 925              		.syntax unified
 926              	.L85:
 934:FreeRTOS/queue.c ****                 return pdPASS;
 927              		.loc 1 934 0
 928 00b4 FFF7FEFF 		bl	vPortExitCritical
 929              	.LVL99:
 935:FreeRTOS/queue.c ****             }
 930              		.loc 1 935 0
 931 00b8 0120     		movs	r0, #1
 932              	.L72:
1014:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 933              		.loc 1 1014 0
 934 00ba 05B0     		add	sp, sp, #20
 935              	.LCFI14:
 936              		.cfi_remember_state
 937              		.cfi_def_cfa_offset 20
 938              		@ sp needed
 939 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 940              	.LVL100:
 941              	.L99:
 942              	.LCFI15:
 943              		.cfi_restore_state
 943:FreeRTOS/queue.c **** 
 944              		.loc 1 943 0
 945 00be FFF7FEFF 		bl	vPortExitCritical
 946              	.LVL101:
 948:FreeRTOS/queue.c ****                 }
 947              		.loc 1 948 0
 948 00c2 0020     		movs	r0, #0
 949 00c4 F9E7     		b	.L72
 950              	.L100:
 954:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 951              		.loc 1 954 0
 952 00c6 02A8     		add	r0, sp, #8
 953 00c8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 954              	.LVL102:
 955:FreeRTOS/queue.c ****                 }
 955              		.loc 1 955 0
 956 00cc 0125     		movs	r5, #1
 957 00ce 19E0     		b	.L88
ARM GAS  /tmp/cc6LrBXE.s 			page 66


 958              	.LVL103:
 959              	.L101:
 970:FreeRTOS/queue.c **** 
 960              		.loc 1 970 0 discriminator 1
 961 00d0 0023     		movs	r3, #0
 962 00d2 84F84430 		strb	r3, [r4, #68]
 963 00d6 21E0     		b	.L89
 964              	.L102:
 970:FreeRTOS/queue.c **** 
 965              		.loc 1 970 0 is_stmt 0 discriminator 4
 966 00d8 0023     		movs	r3, #0
 967 00da 84F84530 		strb	r3, [r4, #69]
 968 00de 23E0     		b	.L90
 969              	.L92:
1000:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 970              		.loc 1 1000 0 is_stmt 1
 971 00e0 2046     		mov	r0, r4
 972 00e2 FFF7FEFF 		bl	prvUnlockQueue
 973              	.LVL104:
1001:FreeRTOS/queue.c ****             }
 974              		.loc 1 1001 0
 975 00e6 FFF7FEFF 		bl	xTaskResumeAll
 976              	.LVL105:
 977              	.L81:
 828:FreeRTOS/queue.c ****         {
 978              		.loc 1 828 0
 979 00ea FFF7FEFF 		bl	vPortEnterCritical
 980              	.LVL106:
 834:FreeRTOS/queue.c ****             {
 981              		.loc 1 834 0
 982 00ee A26B     		ldr	r2, [r4, #56]
 983 00f0 E36B     		ldr	r3, [r4, #60]
 984 00f2 9A42     		cmp	r2, r3
 985 00f4 C0D3     		bcc	.L82
 834:FreeRTOS/queue.c ****             {
 986              		.loc 1 834 0 is_stmt 0 discriminator 1
 987 00f6 022E     		cmp	r6, #2
 988 00f8 BED0     		beq	.L82
 939:FreeRTOS/queue.c ****                 {
 989              		.loc 1 939 0 is_stmt 1
 990 00fa 019B     		ldr	r3, [sp, #4]
 991 00fc 002B     		cmp	r3, #0
 992 00fe DED0     		beq	.L99
 950:FreeRTOS/queue.c ****                 {
 993              		.loc 1 950 0
 994 0100 002D     		cmp	r5, #0
 995 0102 E0D0     		beq	.L100
 996              	.LVL107:
 997              	.L88:
 964:FreeRTOS/queue.c **** 
 998              		.loc 1 964 0
 999 0104 FFF7FEFF 		bl	vPortExitCritical
 1000              	.LVL108:
 969:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 1001              		.loc 1 969 0
 1002 0108 FFF7FEFF 		bl	vTaskSuspendAll
 1003              	.LVL109:
ARM GAS  /tmp/cc6LrBXE.s 			page 67


 970:FreeRTOS/queue.c **** 
 1004              		.loc 1 970 0
 1005 010c FFF7FEFF 		bl	vPortEnterCritical
 1006              	.LVL110:
 1007 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1008 0114 5BB2     		sxtb	r3, r3
 1009 0116 B3F1FF3F 		cmp	r3, #-1
 1010 011a D9D0     		beq	.L101
 1011              	.L89:
 970:FreeRTOS/queue.c **** 
 1012              		.loc 1 970 0 is_stmt 0 discriminator 3
 1013 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1014 0120 5BB2     		sxtb	r3, r3
 1015 0122 B3F1FF3F 		cmp	r3, #-1
 1016 0126 D7D0     		beq	.L102
 1017              	.L90:
 970:FreeRTOS/queue.c **** 
 1018              		.loc 1 970 0 discriminator 6
 1019 0128 FFF7FEFF 		bl	vPortExitCritical
 1020              	.LVL111:
 973:FreeRTOS/queue.c ****         {
 1021              		.loc 1 973 0 is_stmt 1 discriminator 6
 1022 012c 01A9     		add	r1, sp, #4
 1023 012e 02A8     		add	r0, sp, #8
 1024 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1025              	.LVL112:
 1026 0134 C8B9     		cbnz	r0, .L91
 975:FreeRTOS/queue.c ****             {
 1027              		.loc 1 975 0
 1028 0136 2046     		mov	r0, r4
 1029 0138 FFF7FEFF 		bl	prvIsQueueFull
 1030              	.LVL113:
 1031 013c 0028     		cmp	r0, #0
 1032 013e CFD0     		beq	.L92
 978:FreeRTOS/queue.c **** 
 1033              		.loc 1 978 0
 1034 0140 0199     		ldr	r1, [sp, #4]
 1035 0142 04F11000 		add	r0, r4, #16
 1036 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1037              	.LVL114:
 985:FreeRTOS/queue.c **** 
 1038              		.loc 1 985 0
 1039 014a 2046     		mov	r0, r4
 1040 014c FFF7FEFF 		bl	prvUnlockQueue
 1041              	.LVL115:
 992:FreeRTOS/queue.c ****                 {
 1042              		.loc 1 992 0
 1043 0150 FFF7FEFF 		bl	xTaskResumeAll
 1044              	.LVL116:
 1045 0154 0028     		cmp	r0, #0
 1046 0156 C8D1     		bne	.L81
 994:FreeRTOS/queue.c ****                 }
 1047              		.loc 1 994 0
 1048 0158 074B     		ldr	r3, .L103
 1049 015a 4FF08052 		mov	r2, #268435456
 1050 015e 1A60     		str	r2, [r3]
 1051              		.syntax unified
ARM GAS  /tmp/cc6LrBXE.s 			page 68


 1052              	@ 994 "FreeRTOS/queue.c" 1
 1053 0160 BFF34F8F 		dsb
 1054              	@ 0 "" 2
 1055              	@ 994 "FreeRTOS/queue.c" 1
 1056 0164 BFF36F8F 		isb
 1057              	@ 0 "" 2
 1058              		.thumb
 1059              		.syntax unified
 1060 0168 BFE7     		b	.L81
 1061              	.L91:
1007:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 1062              		.loc 1 1007 0
 1063 016a 2046     		mov	r0, r4
 1064 016c FFF7FEFF 		bl	prvUnlockQueue
 1065              	.LVL117:
1008:FreeRTOS/queue.c **** 
 1066              		.loc 1 1008 0
 1067 0170 FFF7FEFF 		bl	xTaskResumeAll
 1068              	.LVL118:
1011:FreeRTOS/queue.c ****         }
 1069              		.loc 1 1011 0
 1070 0174 0020     		movs	r0, #0
 1071 0176 A0E7     		b	.L72
 1072              	.L104:
 1073              		.align	2
 1074              	.L103:
 1075 0178 04ED00E0 		.word	-536810236
 1076              		.cfi_endproc
 1077              	.LFE10:
 1079              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1080              		.align	1
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1084              		.fpu softvfp
 1086              	prvInitialiseMutex:
 1087              	.LFB8:
 513:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 1088              		.loc 1 513 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              	.LVL119:
 514:FreeRTOS/queue.c ****         {
 1093              		.loc 1 514 0
 1094 0000 48B1     		cbz	r0, .L108
 513:FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 1095              		.loc 1 513 0
 1096 0002 08B5     		push	{r3, lr}
 1097              	.LCFI16:
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 520:FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1101              		.loc 1 520 0
 1102 0004 0021     		movs	r1, #0
 1103 0006 8160     		str	r1, [r0, #8]
ARM GAS  /tmp/cc6LrBXE.s 			page 69


 521:FreeRTOS/queue.c **** 
 1104              		.loc 1 521 0
 1105 0008 0160     		str	r1, [r0]
 524:FreeRTOS/queue.c **** 
 1106              		.loc 1 524 0
 1107 000a C160     		str	r1, [r0, #12]
 529:FreeRTOS/queue.c ****         }
 1108              		.loc 1 529 0
 1109 000c 0B46     		mov	r3, r1
 1110 000e 0A46     		mov	r2, r1
 1111 0010 FFF7FEFF 		bl	xQueueGenericSend
 1112              	.LVL120:
 535:FreeRTOS/queue.c **** 
 1113              		.loc 1 535 0
 1114 0014 08BD     		pop	{r3, pc}
 1115              	.LVL121:
 1116              	.L108:
 1117              	.LCFI17:
 1118              		.cfi_def_cfa_offset 0
 1119              		.cfi_restore 3
 1120              		.cfi_restore 14
 1121 0016 7047     		bx	lr
 1122              		.cfi_endproc
 1123              	.LFE8:
 1125              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1126              		.align	1
 1127              		.global	xQueueCreateMutex
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
 1131              		.fpu softvfp
 1133              	xQueueCreateMutex:
 1134              	.LFB9:
 543:FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 1135              		.loc 1 543 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 0
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              	.LVL122:
 1140 0000 10B5     		push	{r4, lr}
 1141              	.LCFI18:
 1142              		.cfi_def_cfa_offset 8
 1143              		.cfi_offset 4, -8
 1144              		.cfi_offset 14, -4
 1145              	.LVL123:
 547:FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1146              		.loc 1 547 0
 1147 0002 0246     		mov	r2, r0
 1148 0004 0021     		movs	r1, #0
 1149 0006 0120     		movs	r0, #1
 1150              	.LVL124:
 1151 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1152              	.LVL125:
 1153 000c 0446     		mov	r4, r0
 1154              	.LVL126:
 548:FreeRTOS/queue.c **** 
 1155              		.loc 1 548 0
ARM GAS  /tmp/cc6LrBXE.s 			page 70


 1156 000e FFF7FEFF 		bl	prvInitialiseMutex
 1157              	.LVL127:
 551:FreeRTOS/queue.c **** 
 1158              		.loc 1 551 0
 1159 0012 2046     		mov	r0, r4
 1160 0014 10BD     		pop	{r4, pc}
 1161              		.cfi_endproc
 1162              	.LFE9:
 1164              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1165              		.align	1
 1166              		.global	xQueueGenericSendFromISR
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1170              		.fpu softvfp
 1172              	xQueueGenericSendFromISR:
 1173              	.LFB11:
1021:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1174              		.loc 1 1021 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 0
 1177              		@ frame_needed = 0, uses_anonymous_args = 0
 1178              	.LVL128:
 1179 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1180              	.LCFI19:
 1181              		.cfi_def_cfa_offset 32
 1182              		.cfi_offset 3, -32
 1183              		.cfi_offset 4, -28
 1184              		.cfi_offset 5, -24
 1185              		.cfi_offset 6, -20
 1186              		.cfi_offset 7, -16
 1187              		.cfi_offset 8, -12
 1188              		.cfi_offset 9, -8
 1189              		.cfi_offset 14, -4
 1190              	.LVL129:
1026:FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1191              		.loc 1 1026 0
 1192 0004 60B1     		cbz	r0, .L130
 1193 0006 0446     		mov	r4, r0
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1194              		.loc 1 1027 0
 1195 0008 99B9     		cbnz	r1, .L116
1027:FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1196              		.loc 1 1027 0 is_stmt 0 discriminator 2
 1197 000a 006C     		ldr	r0, [r0, #64]
 1198              	.LVL130:
 1199 000c 88B1     		cbz	r0, .L116
 1200              	.LBB123:
 1201              	.LBB124:
 1202              		.loc 2 200 0 is_stmt 1
 1203              		.syntax unified
 1204              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1205 000e 4FF05003 			mov r3, #80												
 1206 0012 83F31188 		msr basepri, r3											
 1207 0016 BFF36F8F 		isb														
 1208 001a BFF34F8F 		dsb														
 1209              	
ARM GAS  /tmp/cc6LrBXE.s 			page 71


 1210              	@ 0 "" 2
 1211              	.LVL131:
 1212              		.thumb
 1213              		.syntax unified
 1214              	.L117:
 1215 001e FEE7     		b	.L117
 1216              	.LVL132:
 1217              	.L130:
 1218              	.LBE124:
 1219              	.LBE123:
 1220              	.LBB125:
 1221              	.LBB126:
 1222              		.syntax unified
 1223              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1224 0020 4FF05003 			mov r3, #80												
 1225 0024 83F31188 		msr basepri, r3											
 1226 0028 BFF36F8F 		isb														
 1227 002c BFF34F8F 		dsb														
 1228              	
 1229              	@ 0 "" 2
 1230              	.LVL133:
 1231              		.thumb
 1232              		.syntax unified
 1233              	.L115:
 1234 0030 FEE7     		b	.L115
 1235              	.LVL134:
 1236              	.L116:
 1237              	.LBE126:
 1238              	.LBE125:
1028:FreeRTOS/queue.c **** 
 1239              		.loc 1 1028 0
 1240 0032 022B     		cmp	r3, #2
 1241 0034 0BD1     		bne	.L118
1028:FreeRTOS/queue.c **** 
 1242              		.loc 1 1028 0 is_stmt 0 discriminator 2
 1243 0036 E06B     		ldr	r0, [r4, #60]
 1244 0038 0128     		cmp	r0, #1
 1245 003a 08D0     		beq	.L118
 1246              	.LBB127:
 1247              	.LBB128:
 1248              		.loc 2 200 0 is_stmt 1
 1249              		.syntax unified
 1250              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1251 003c 4FF05003 			mov r3, #80												
 1252 0040 83F31188 		msr basepri, r3											
 1253 0044 BFF36F8F 		isb														
 1254 0048 BFF34F8F 		dsb														
 1255              	
 1256              	@ 0 "" 2
 1257              	.LVL135:
 1258              		.thumb
 1259              		.syntax unified
 1260              	.L119:
 1261 004c FEE7     		b	.L119
 1262              	.LVL136:
 1263              	.L118:
 1264 004e 1F46     		mov	r7, r3
ARM GAS  /tmp/cc6LrBXE.s 			page 72


 1265 0050 9046     		mov	r8, r2
 1266 0052 8946     		mov	r9, r1
 1267              	.LBE128:
 1268              	.LBE127:
1044:FreeRTOS/queue.c **** 
 1269              		.loc 1 1044 0
 1270 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1271              	.LVL137:
 1272              	.LBB129:
 1273              	.LBB130:
 201:FreeRTOS/ARM_CM3/portmacro.h ****         (
 202:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 203:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 204:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 205:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 206:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:FreeRTOS/ARM_CM3/portmacro.h ****         );
 208:FreeRTOS/ARM_CM3/portmacro.h ****     }
 209:FreeRTOS/ARM_CM3/portmacro.h **** 
 210:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 211:FreeRTOS/ARM_CM3/portmacro.h **** 
 212:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 213:FreeRTOS/ARM_CM3/portmacro.h ****     {
 214:FreeRTOS/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 215:FreeRTOS/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 1274              		.loc 2 216 0
 1275              		.syntax unified
 1276              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1277 0058 EFF31186 			mrs r6, basepri											
 1278 005c 4FF05003 		mov r3, #80												
 1279 0060 83F31188 		msr basepri, r3											
 1280 0064 BFF36F8F 		isb														
 1281 0068 BFF34F8F 		dsb														
 1282              	
 1283              	@ 0 "" 2
 1284              		.thumb
 1285              		.syntax unified
 1286              	.LBE130:
 1287              	.LBE129:
1053:FreeRTOS/queue.c ****         {
 1288              		.loc 1 1053 0
 1289 006c A26B     		ldr	r2, [r4, #56]
 1290 006e E36B     		ldr	r3, [r4, #60]
 1291 0070 9A42     		cmp	r2, r3
 1292 0072 06D3     		bcc	.L120
1053:FreeRTOS/queue.c ****         {
 1293              		.loc 1 1053 0 is_stmt 0 discriminator 1
 1294 0074 022F     		cmp	r7, #2
 1295 0076 04D0     		beq	.L120
1175:FreeRTOS/queue.c ****         }
 1296              		.loc 1 1175 0 is_stmt 1
 1297 0078 0020     		movs	r0, #0
 1298              	.L121:
 1299              	.LVL138:
 1300              	.LBB131:
 1301              	.LBB132:
ARM GAS  /tmp/cc6LrBXE.s 			page 73


 217:FreeRTOS/ARM_CM3/portmacro.h ****         (
 218:FreeRTOS/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:FreeRTOS/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 220:FreeRTOS/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 221:FreeRTOS/ARM_CM3/portmacro.h ****             "	isb														\n"\
 222:FreeRTOS/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 223:FreeRTOS/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:FreeRTOS/ARM_CM3/portmacro.h ****         );
 225:FreeRTOS/ARM_CM3/portmacro.h **** 
 226:FreeRTOS/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:FreeRTOS/ARM_CM3/portmacro.h ****          * warnings. */
 228:FreeRTOS/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 229:FreeRTOS/ARM_CM3/portmacro.h ****     }
 230:FreeRTOS/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 231:FreeRTOS/ARM_CM3/portmacro.h **** 
 232:FreeRTOS/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 233:FreeRTOS/ARM_CM3/portmacro.h ****     {
 234:FreeRTOS/ARM_CM3/portmacro.h ****         __asm volatile
 1302              		.loc 2 234 0
 1303              		.syntax unified
 1304              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1305 007a 86F31188 			msr basepri, r6	
 1306              	@ 0 "" 2
 1307              	.LVL139:
 1308              		.thumb
 1309              		.syntax unified
 1310              	.LBE132:
 1311              	.LBE131:
1181:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1312              		.loc 1 1181 0
 1313 007e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1314              	.LVL140:
 1315              	.L120:
 1316              	.LBB133:
1055:FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1317              		.loc 1 1055 0
 1318 0082 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1319 0086 6DB2     		sxtb	r5, r5
 1320              	.LVL141:
1056:FreeRTOS/queue.c **** 
 1321              		.loc 1 1056 0
 1322 0088 A36B     		ldr	r3, [r4, #56]
1065:FreeRTOS/queue.c **** 
 1323              		.loc 1 1065 0
 1324 008a 3A46     		mov	r2, r7
 1325 008c 4946     		mov	r1, r9
 1326 008e 2046     		mov	r0, r4
 1327 0090 FFF7FEFF 		bl	prvCopyDataToQueue
 1328              	.LVL142:
1069:FreeRTOS/queue.c ****             {
 1329              		.loc 1 1069 0
 1330 0094 B5F1FF3F 		cmp	r5, #-1
 1331 0098 07D0     		beq	.L131
1165:FreeRTOS/queue.c **** 
 1332              		.loc 1 1165 0
 1333 009a 7F2D     		cmp	r5, #127
 1334 009c 13D0     		beq	.L132
ARM GAS  /tmp/cc6LrBXE.s 			page 74


1167:FreeRTOS/queue.c ****             }
 1335              		.loc 1 1167 0
 1336 009e 6B1C     		adds	r3, r5, #1
 1337 00a0 5BB2     		sxtb	r3, r3
 1338 00a2 84F84530 		strb	r3, [r4, #69]
1170:FreeRTOS/queue.c ****         }
 1339              		.loc 1 1170 0
 1340 00a6 0120     		movs	r0, #1
 1341 00a8 E7E7     		b	.L121
 1342              	.L131:
1131:FreeRTOS/queue.c ****                         {
 1343              		.loc 1 1131 0
 1344 00aa 636A     		ldr	r3, [r4, #36]
 1345 00ac A3B1     		cbz	r3, .L126
1133:FreeRTOS/queue.c ****                             {
 1346              		.loc 1 1133 0
 1347 00ae 04F12400 		add	r0, r4, #36
 1348 00b2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1349              	.LVL143:
 1350 00b6 88B1     		cbz	r0, .L127
1137:FreeRTOS/queue.c ****                                 {
 1351              		.loc 1 1137 0
 1352 00b8 B8F1000F 		cmp	r8, #0
 1353 00bc 10D0     		beq	.L128
1139:FreeRTOS/queue.c ****                                 }
 1354              		.loc 1 1139 0
 1355 00be 0120     		movs	r0, #1
 1356 00c0 C8F80000 		str	r0, [r8]
 1357 00c4 D9E7     		b	.L121
 1358              	.L132:
 1359              	.LBB134:
 1360              	.LBB135:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1361              		.loc 2 200 0
 1362              		.syntax unified
 1363              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1364 00c6 4FF05003 			mov r3, #80												
 1365 00ca 83F31188 		msr basepri, r3											
 1366 00ce BFF36F8F 		isb														
 1367 00d2 BFF34F8F 		dsb														
 1368              	
 1369              	@ 0 "" 2
 1370              	.LVL144:
 1371              		.thumb
 1372              		.syntax unified
 1373              	.L124:
 1374 00d6 FEE7     		b	.L124
 1375              	.L126:
 1376              	.LBE135:
 1377              	.LBE134:
1170:FreeRTOS/queue.c ****         }
 1378              		.loc 1 1170 0
 1379 00d8 0120     		movs	r0, #1
 1380 00da CEE7     		b	.L121
 1381              	.L127:
 1382 00dc 0120     		movs	r0, #1
 1383 00de CCE7     		b	.L121
ARM GAS  /tmp/cc6LrBXE.s 			page 75


 1384              	.L128:
 1385 00e0 0120     		movs	r0, #1
 1386 00e2 CAE7     		b	.L121
 1387              	.LBE133:
 1388              		.cfi_endproc
 1389              	.LFE11:
 1391              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1392              		.align	1
 1393              		.global	xQueueGiveFromISR
 1394              		.syntax unified
 1395              		.thumb
 1396              		.thumb_func
 1397              		.fpu softvfp
 1399              	xQueueGiveFromISR:
 1400              	.LFB12:
1186:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1401              		.loc 1 1186 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 0
 1404              		@ frame_needed = 0, uses_anonymous_args = 0
 1405              	.LVL145:
1197:FreeRTOS/queue.c **** 
 1406              		.loc 1 1197 0
 1407 0000 60B1     		cbz	r0, .L150
1186:FreeRTOS/queue.c ****     BaseType_t xReturn;
 1408              		.loc 1 1186 0
 1409 0002 70B5     		push	{r4, r5, r6, lr}
 1410              	.LCFI20:
 1411              		.cfi_def_cfa_offset 16
 1412              		.cfi_offset 4, -16
 1413              		.cfi_offset 5, -12
 1414              		.cfi_offset 6, -8
 1415              		.cfi_offset 14, -4
 1416 0004 0446     		mov	r4, r0
1201:FreeRTOS/queue.c **** 
 1417              		.loc 1 1201 0
 1418 0006 036C     		ldr	r3, [r0, #64]
 1419 0008 8BB1     		cbz	r3, .L136
 1420              	.LBB136:
 1421              	.LBB137:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1422              		.loc 2 200 0
 1423              		.syntax unified
 1424              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1425 000a 4FF05003 			mov r3, #80												
 1426 000e 83F31188 		msr basepri, r3											
 1427 0012 BFF36F8F 		isb														
 1428 0016 BFF34F8F 		dsb														
 1429              	
 1430              	@ 0 "" 2
 1431              	.LVL146:
 1432              		.thumb
 1433              		.syntax unified
 1434              	.L137:
 1435 001a FEE7     		b	.L137
 1436              	.L150:
 1437              	.LCFI21:
ARM GAS  /tmp/cc6LrBXE.s 			page 76


 1438              		.cfi_def_cfa_offset 0
 1439              		.cfi_restore 4
 1440              		.cfi_restore 5
 1441              		.cfi_restore 6
 1442              		.cfi_restore 14
 1443              	.LBE137:
 1444              	.LBE136:
 1445              	.LBB138:
 1446              	.LBB139:
 1447              		.syntax unified
 1448              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1449 001c 4FF05003 			mov r3, #80												
 1450 0020 83F31188 		msr basepri, r3											
 1451 0024 BFF36F8F 		isb														
 1452 0028 BFF34F8F 		dsb														
 1453              	
 1454              	@ 0 "" 2
 1455              	.LVL147:
 1456              		.thumb
 1457              		.syntax unified
 1458              	.L135:
 1459 002c FEE7     		b	.L135
 1460              	.L136:
 1461              	.LCFI22:
 1462              		.cfi_def_cfa_offset 16
 1463              		.cfi_offset 4, -16
 1464              		.cfi_offset 5, -12
 1465              		.cfi_offset 6, -8
 1466              		.cfi_offset 14, -4
 1467              	.LBE139:
 1468              	.LBE138:
1206:FreeRTOS/queue.c **** 
 1469              		.loc 1 1206 0
 1470 002e 0368     		ldr	r3, [r0]
 1471 0030 2BB3     		cbz	r3, .L151
 1472              	.L138:
 1473 0032 0E46     		mov	r6, r1
1222:FreeRTOS/queue.c **** 
 1474              		.loc 1 1222 0
 1475 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1476              	.LVL148:
 1477              	.LBB140:
 1478              	.LBB141:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1479              		.loc 2 216 0
 1480              		.syntax unified
 1481              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1482 0038 EFF31185 			mrs r5, basepri											
 1483 003c 4FF05003 		mov r3, #80												
 1484 0040 83F31188 		msr basepri, r3											
 1485 0044 BFF36F8F 		isb														
 1486 0048 BFF34F8F 		dsb														
 1487              	
 1488              	@ 0 "" 2
 1489              		.thumb
 1490              		.syntax unified
 1491              	.LBE141:
ARM GAS  /tmp/cc6LrBXE.s 			page 77


 1492              	.LBE140:
 1493              	.LBB142:
1226:FreeRTOS/queue.c **** 
 1494              		.loc 1 1226 0
 1495 004c A26B     		ldr	r2, [r4, #56]
 1496              	.LVL149:
1231:FreeRTOS/queue.c ****         {
 1497              		.loc 1 1231 0
 1498 004e E36B     		ldr	r3, [r4, #60]
 1499 0050 9342     		cmp	r3, r2
 1500 0052 31D9     		bls	.L144
 1501              	.LBB143:
1233:FreeRTOS/queue.c **** 
 1502              		.loc 1 1233 0
 1503 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1504 0058 5BB2     		sxtb	r3, r3
 1505              	.LVL150:
1243:FreeRTOS/queue.c **** 
 1506              		.loc 1 1243 0
 1507 005a 0132     		adds	r2, r2, #1
 1508              	.LVL151:
 1509 005c A263     		str	r2, [r4, #56]
1247:FreeRTOS/queue.c ****             {
 1510              		.loc 1 1247 0
 1511 005e B3F1FF3F 		cmp	r3, #-1
 1512 0062 18D1     		bne	.L141
1302:FreeRTOS/queue.c ****                         {
 1513              		.loc 1 1302 0
 1514 0064 636A     		ldr	r3, [r4, #36]
 1515              	.LVL152:
 1516 0066 4BB3     		cbz	r3, .L145
1304:FreeRTOS/queue.c ****                             {
 1517              		.loc 1 1304 0
 1518 0068 04F12400 		add	r0, r4, #36
 1519 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1520              	.LVL153:
 1521 0070 30B3     		cbz	r0, .L146
1308:FreeRTOS/queue.c ****                                 {
 1522              		.loc 1 1308 0
 1523 0072 3EB3     		cbz	r6, .L147
1310:FreeRTOS/queue.c ****                                 }
 1524              		.loc 1 1310 0
 1525 0074 0120     		movs	r0, #1
 1526 0076 3060     		str	r0, [r6]
 1527              	.L140:
 1528              	.LVL154:
 1529              	.LBE143:
 1530              	.LBE142:
 1531              	.LBB148:
 1532              	.LBB149:
 1533              		.loc 2 234 0
 1534              		.syntax unified
 1535              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1536 0078 85F31188 			msr basepri, r5	
 1537              	@ 0 "" 2
 1538              	.LVL155:
 1539              		.thumb
ARM GAS  /tmp/cc6LrBXE.s 			page 78


 1540              		.syntax unified
 1541              	.LBE149:
 1542              	.LBE148:
1349:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1543              		.loc 1 1349 0
 1544 007c 70BD     		pop	{r4, r5, r6, pc}
 1545              	.LVL156:
 1546              	.L151:
1206:FreeRTOS/queue.c **** 
 1547              		.loc 1 1206 0 discriminator 2
 1548 007e 8368     		ldr	r3, [r0, #8]
 1549 0080 002B     		cmp	r3, #0
 1550 0082 D6D0     		beq	.L138
 1551              	.LBB150:
 1552              	.LBB151:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1553              		.loc 2 200 0
 1554              		.syntax unified
 1555              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1556 0084 4FF05003 			mov r3, #80												
 1557 0088 83F31188 		msr basepri, r3											
 1558 008c BFF36F8F 		isb														
 1559 0090 BFF34F8F 		dsb														
 1560              	
 1561              	@ 0 "" 2
 1562              	.LVL157:
 1563              		.thumb
 1564              		.syntax unified
 1565              	.L139:
 1566 0094 FEE7     		b	.L139
 1567              	.LVL158:
 1568              	.L141:
 1569              	.LBE151:
 1570              	.LBE150:
 1571              	.LBB152:
 1572              	.LBB146:
1333:FreeRTOS/queue.c **** 
 1573              		.loc 1 1333 0
 1574 0096 7F2B     		cmp	r3, #127
 1575 0098 08D1     		bne	.L142
 1576              	.LBB144:
 1577              	.LBB145:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1578              		.loc 2 200 0
 1579              		.syntax unified
 1580              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1581 009a 4FF05003 			mov r3, #80												
 1582 009e 83F31188 		msr basepri, r3											
 1583 00a2 BFF36F8F 		isb														
 1584 00a6 BFF34F8F 		dsb														
 1585              	
 1586              	@ 0 "" 2
 1587              	.LVL159:
 1588              		.thumb
 1589              		.syntax unified
 1590              	.L143:
 1591 00aa FEE7     		b	.L143
ARM GAS  /tmp/cc6LrBXE.s 			page 79


 1592              	.LVL160:
 1593              	.L142:
 1594              	.LBE145:
 1595              	.LBE144:
1335:FreeRTOS/queue.c ****             }
 1596              		.loc 1 1335 0
 1597 00ac 0133     		adds	r3, r3, #1
 1598              	.LVL161:
 1599 00ae 5BB2     		sxtb	r3, r3
 1600              	.LVL162:
 1601 00b0 84F84530 		strb	r3, [r4, #69]
1338:FreeRTOS/queue.c ****         }
 1602              		.loc 1 1338 0
 1603 00b4 0120     		movs	r0, #1
 1604 00b6 DFE7     		b	.L140
 1605              	.LVL163:
 1606              	.L144:
 1607              	.LBE146:
1343:FreeRTOS/queue.c ****         }
 1608              		.loc 1 1343 0
 1609 00b8 0020     		movs	r0, #0
 1610 00ba DDE7     		b	.L140
 1611              	.LVL164:
 1612              	.L145:
 1613              	.LBB147:
1338:FreeRTOS/queue.c ****         }
 1614              		.loc 1 1338 0
 1615 00bc 0120     		movs	r0, #1
 1616 00be DBE7     		b	.L140
 1617              	.LVL165:
 1618              	.L146:
 1619 00c0 0120     		movs	r0, #1
 1620 00c2 D9E7     		b	.L140
 1621              	.L147:
 1622 00c4 0120     		movs	r0, #1
 1623 00c6 D7E7     		b	.L140
 1624              	.LBE147:
 1625              	.LBE152:
 1626              		.cfi_endproc
 1627              	.LFE12:
 1629              		.section	.text.xQueueReceive,"ax",%progbits
 1630              		.align	1
 1631              		.global	xQueueReceive
 1632              		.syntax unified
 1633              		.thumb
 1634              		.thumb_func
 1635              		.fpu softvfp
 1637              	xQueueReceive:
 1638              	.LFB13:
1355:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1639              		.loc 1 1355 0
 1640              		.cfi_startproc
 1641              		@ args = 0, pretend = 0, frame = 16
 1642              		@ frame_needed = 0, uses_anonymous_args = 0
 1643              	.LVL166:
 1644 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1645              	.LCFI23:
ARM GAS  /tmp/cc6LrBXE.s 			page 80


 1646              		.cfi_def_cfa_offset 20
 1647              		.cfi_offset 4, -20
 1648              		.cfi_offset 5, -16
 1649              		.cfi_offset 6, -12
 1650              		.cfi_offset 7, -8
 1651              		.cfi_offset 14, -4
 1652 0002 85B0     		sub	sp, sp, #20
 1653              	.LCFI24:
 1654              		.cfi_def_cfa_offset 40
 1655 0004 0192     		str	r2, [sp, #4]
 1656              	.LVL167:
1361:FreeRTOS/queue.c **** 
 1657              		.loc 1 1361 0
 1658 0006 60B1     		cbz	r0, .L173
 1659 0008 0446     		mov	r4, r0
1365:FreeRTOS/queue.c **** 
 1660              		.loc 1 1365 0
 1661 000a 99B9     		cbnz	r1, .L155
1365:FreeRTOS/queue.c **** 
 1662              		.loc 1 1365 0 is_stmt 0 discriminator 2
 1663 000c 036C     		ldr	r3, [r0, #64]
 1664 000e 8BB1     		cbz	r3, .L155
 1665              	.LBB153:
 1666              	.LBB154:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1667              		.loc 2 200 0 is_stmt 1
 1668              		.syntax unified
 1669              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1670 0010 4FF05003 			mov r3, #80												
 1671 0014 83F31188 		msr basepri, r3											
 1672 0018 BFF36F8F 		isb														
 1673 001c BFF34F8F 		dsb														
 1674              	
 1675              	@ 0 "" 2
 1676              	.LVL168:
 1677              		.thumb
 1678              		.syntax unified
 1679              	.L156:
 1680 0020 FEE7     		b	.L156
 1681              	.L173:
 1682              	.LBE154:
 1683              	.LBE153:
 1684              	.LBB155:
 1685              	.LBB156:
 1686              		.syntax unified
 1687              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1688 0022 4FF05003 			mov r3, #80												
 1689 0026 83F31188 		msr basepri, r3											
 1690 002a BFF36F8F 		isb														
 1691 002e BFF34F8F 		dsb														
 1692              	
 1693              	@ 0 "" 2
 1694              	.LVL169:
 1695              		.thumb
 1696              		.syntax unified
 1697              	.L154:
 1698 0032 FEE7     		b	.L154
ARM GAS  /tmp/cc6LrBXE.s 			page 81


 1699              	.L155:
 1700 0034 0F46     		mov	r7, r1
 1701              	.LBE156:
 1702              	.LBE155:
1370:FreeRTOS/queue.c ****         }
 1703              		.loc 1 1370 0
 1704 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 1705              	.LVL170:
 1706 003a 50B9     		cbnz	r0, .L170
1370:FreeRTOS/queue.c ****         }
 1707              		.loc 1 1370 0 is_stmt 0 discriminator 2
 1708 003c 019B     		ldr	r3, [sp, #4]
 1709 003e 53B1     		cbz	r3, .L171
 1710              	.LBB157:
 1711              	.LBB158:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1712              		.loc 2 200 0 is_stmt 1
 1713              		.syntax unified
 1714              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1715 0040 4FF05003 			mov r3, #80												
 1716 0044 83F31188 		msr basepri, r3											
 1717 0048 BFF36F8F 		isb														
 1718 004c BFF34F8F 		dsb														
 1719              	
 1720              	@ 0 "" 2
 1721              	.LVL171:
 1722              		.thumb
 1723              		.syntax unified
 1724              	.L158:
 1725 0050 FEE7     		b	.L158
 1726              	.L170:
 1727              	.LBE158:
 1728              	.LBE157:
 1729 0052 0026     		movs	r6, #0
 1730 0054 3EE0     		b	.L159
 1731              	.L171:
 1732 0056 0026     		movs	r6, #0
 1733 0058 3CE0     		b	.L159
 1734              	.LVL172:
 1735              	.L176:
 1736              	.LBB159:
1388:FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 1737              		.loc 1 1388 0
 1738 005a 3946     		mov	r1, r7
 1739 005c 2046     		mov	r0, r4
 1740 005e FFF7FEFF 		bl	prvCopyDataFromQueue
 1741              	.LVL173:
1390:FreeRTOS/queue.c **** 
 1742              		.loc 1 1390 0
 1743 0062 013D     		subs	r5, r5, #1
 1744              	.LVL174:
 1745 0064 A563     		str	r5, [r4, #56]
1395:FreeRTOS/queue.c ****                 {
 1746              		.loc 1 1395 0
 1747 0066 2369     		ldr	r3, [r4, #16]
 1748 0068 23B9     		cbnz	r3, .L174
 1749              	.L161:
ARM GAS  /tmp/cc6LrBXE.s 			page 82


1411:FreeRTOS/queue.c ****                 return pdPASS;
 1750              		.loc 1 1411 0
 1751 006a FFF7FEFF 		bl	vPortExitCritical
 1752              	.LVL175:
1412:FreeRTOS/queue.c ****             }
 1753              		.loc 1 1412 0
 1754 006e 0120     		movs	r0, #1
 1755              	.LVL176:
 1756              	.L152:
 1757              	.LBE159:
1492:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1758              		.loc 1 1492 0
 1759 0070 05B0     		add	sp, sp, #20
 1760              	.LCFI25:
 1761              		.cfi_remember_state
 1762              		.cfi_def_cfa_offset 20
 1763              		@ sp needed
 1764 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 1765              	.LVL177:
 1766              	.L174:
 1767              	.LCFI26:
 1768              		.cfi_restore_state
 1769              	.LBB160:
1397:FreeRTOS/queue.c ****                     {
 1770              		.loc 1 1397 0
 1771 0074 04F11000 		add	r0, r4, #16
 1772 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1773              	.LVL178:
 1774 007c 0028     		cmp	r0, #0
 1775 007e F4D0     		beq	.L161
1399:FreeRTOS/queue.c ****                     }
 1776              		.loc 1 1399 0
 1777 0080 344B     		ldr	r3, .L181
 1778 0082 4FF08052 		mov	r2, #268435456
 1779 0086 1A60     		str	r2, [r3]
 1780              		.syntax unified
 1781              	@ 1399 "FreeRTOS/queue.c" 1
 1782 0088 BFF34F8F 		dsb
 1783              	@ 0 "" 2
 1784              	@ 1399 "FreeRTOS/queue.c" 1
 1785 008c BFF36F8F 		isb
 1786              	@ 0 "" 2
 1787              		.thumb
 1788              		.syntax unified
 1789 0090 EBE7     		b	.L161
 1790              	.LVL179:
 1791              	.L177:
1420:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1792              		.loc 1 1420 0
 1793 0092 FFF7FEFF 		bl	vPortExitCritical
 1794              	.LVL180:
1422:FreeRTOS/queue.c ****                 }
 1795              		.loc 1 1422 0
 1796 0096 0020     		movs	r0, #0
 1797 0098 EAE7     		b	.L152
 1798              	.L178:
1428:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
ARM GAS  /tmp/cc6LrBXE.s 			page 83


 1799              		.loc 1 1428 0
 1800 009a 02A8     		add	r0, sp, #8
 1801 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1802              	.LVL181:
1429:FreeRTOS/queue.c ****                 }
 1803              		.loc 1 1429 0
 1804 00a0 0126     		movs	r6, #1
 1805 00a2 21E0     		b	.L164
 1806              	.LVL182:
 1807              	.L179:
 1808              	.LBE160:
1444:FreeRTOS/queue.c **** 
 1809              		.loc 1 1444 0 discriminator 1
 1810 00a4 0023     		movs	r3, #0
 1811 00a6 84F84430 		strb	r3, [r4, #68]
 1812 00aa 29E0     		b	.L165
 1813              	.L180:
1444:FreeRTOS/queue.c **** 
 1814              		.loc 1 1444 0 is_stmt 0 discriminator 4
 1815 00ac 0023     		movs	r3, #0
 1816 00ae 84F84530 		strb	r3, [r4, #69]
 1817 00b2 2BE0     		b	.L166
 1818              	.L168:
1470:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1819              		.loc 1 1470 0 is_stmt 1
 1820 00b4 2046     		mov	r0, r4
 1821 00b6 FFF7FEFF 		bl	prvUnlockQueue
 1822              	.LVL183:
1471:FreeRTOS/queue.c ****             }
 1823              		.loc 1 1471 0
 1824 00ba FFF7FEFF 		bl	xTaskResumeAll
 1825              	.LVL184:
 1826 00be 09E0     		b	.L159
 1827              	.L167:
1478:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 1828              		.loc 1 1478 0
 1829 00c0 2046     		mov	r0, r4
 1830 00c2 FFF7FEFF 		bl	prvUnlockQueue
 1831              	.LVL185:
1479:FreeRTOS/queue.c **** 
 1832              		.loc 1 1479 0
 1833 00c6 FFF7FEFF 		bl	xTaskResumeAll
 1834              	.LVL186:
1481:FreeRTOS/queue.c ****             {
 1835              		.loc 1 1481 0
 1836 00ca 2046     		mov	r0, r4
 1837 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 1838              	.LVL187:
 1839 00d0 0028     		cmp	r0, #0
 1840 00d2 3DD1     		bne	.L175
 1841              	.LVL188:
 1842              	.L159:
1379:FreeRTOS/queue.c ****         {
 1843              		.loc 1 1379 0
 1844 00d4 FFF7FEFF 		bl	vPortEnterCritical
 1845              	.LVL189:
 1846              	.LBB161:
ARM GAS  /tmp/cc6LrBXE.s 			page 84


1381:FreeRTOS/queue.c **** 
 1847              		.loc 1 1381 0
 1848 00d8 A56B     		ldr	r5, [r4, #56]
 1849              	.LVL190:
1385:FreeRTOS/queue.c ****             {
 1850              		.loc 1 1385 0
 1851 00da 002D     		cmp	r5, #0
 1852 00dc BDD1     		bne	.L176
1416:FreeRTOS/queue.c ****                 {
 1853              		.loc 1 1416 0
 1854 00de 019B     		ldr	r3, [sp, #4]
 1855 00e0 002B     		cmp	r3, #0
 1856 00e2 D6D0     		beq	.L177
1424:FreeRTOS/queue.c ****                 {
 1857              		.loc 1 1424 0
 1858 00e4 002E     		cmp	r6, #0
 1859 00e6 D8D0     		beq	.L178
 1860              	.LVL191:
 1861              	.L164:
 1862              	.LBE161:
1438:FreeRTOS/queue.c **** 
 1863              		.loc 1 1438 0
 1864 00e8 FFF7FEFF 		bl	vPortExitCritical
 1865              	.LVL192:
1443:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 1866              		.loc 1 1443 0
 1867 00ec FFF7FEFF 		bl	vTaskSuspendAll
 1868              	.LVL193:
1444:FreeRTOS/queue.c **** 
 1869              		.loc 1 1444 0
 1870 00f0 FFF7FEFF 		bl	vPortEnterCritical
 1871              	.LVL194:
 1872 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1873 00f8 5BB2     		sxtb	r3, r3
 1874 00fa B3F1FF3F 		cmp	r3, #-1
 1875 00fe D1D0     		beq	.L179
 1876              	.L165:
1444:FreeRTOS/queue.c **** 
 1877              		.loc 1 1444 0 is_stmt 0 discriminator 3
 1878 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1879 0104 5BB2     		sxtb	r3, r3
 1880 0106 B3F1FF3F 		cmp	r3, #-1
 1881 010a CFD0     		beq	.L180
 1882              	.L166:
1444:FreeRTOS/queue.c **** 
 1883              		.loc 1 1444 0 discriminator 6
 1884 010c FFF7FEFF 		bl	vPortExitCritical
 1885              	.LVL195:
1447:FreeRTOS/queue.c ****         {
 1886              		.loc 1 1447 0 is_stmt 1 discriminator 6
 1887 0110 01A9     		add	r1, sp, #4
 1888 0112 02A8     		add	r0, sp, #8
 1889 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1890              	.LVL196:
 1891 0118 0028     		cmp	r0, #0
 1892 011a D1D1     		bne	.L167
1451:FreeRTOS/queue.c ****             {
ARM GAS  /tmp/cc6LrBXE.s 			page 85


 1893              		.loc 1 1451 0
 1894 011c 2046     		mov	r0, r4
 1895 011e FFF7FEFF 		bl	prvIsQueueEmpty
 1896              	.LVL197:
 1897 0122 0028     		cmp	r0, #0
 1898 0124 C6D0     		beq	.L168
1454:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1899              		.loc 1 1454 0
 1900 0126 0199     		ldr	r1, [sp, #4]
 1901 0128 04F12400 		add	r0, r4, #36
 1902 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 1903              	.LVL198:
1455:FreeRTOS/queue.c **** 
 1904              		.loc 1 1455 0
 1905 0130 2046     		mov	r0, r4
 1906 0132 FFF7FEFF 		bl	prvUnlockQueue
 1907              	.LVL199:
1457:FreeRTOS/queue.c ****                 {
 1908              		.loc 1 1457 0
 1909 0136 FFF7FEFF 		bl	xTaskResumeAll
 1910              	.LVL200:
 1911 013a 0028     		cmp	r0, #0
 1912 013c CAD1     		bne	.L159
1459:FreeRTOS/queue.c ****                 }
 1913              		.loc 1 1459 0
 1914 013e 054B     		ldr	r3, .L181
 1915 0140 4FF08052 		mov	r2, #268435456
 1916 0144 1A60     		str	r2, [r3]
 1917              		.syntax unified
 1918              	@ 1459 "FreeRTOS/queue.c" 1
 1919 0146 BFF34F8F 		dsb
 1920              	@ 0 "" 2
 1921              	@ 1459 "FreeRTOS/queue.c" 1
 1922 014a BFF36F8F 		isb
 1923              	@ 0 "" 2
 1924              		.thumb
 1925              		.syntax unified
 1926 014e C1E7     		b	.L159
 1927              	.L175:
1484:FreeRTOS/queue.c ****             }
 1928              		.loc 1 1484 0
 1929 0150 0020     		movs	r0, #0
 1930 0152 8DE7     		b	.L152
 1931              	.L182:
 1932              		.align	2
 1933              	.L181:
 1934 0154 04ED00E0 		.word	-536810236
 1935              		.cfi_endproc
 1936              	.LFE13:
 1938              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1939              		.align	1
 1940              		.global	xQueueSemaphoreTake
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1944              		.fpu softvfp
 1946              	xQueueSemaphoreTake:
ARM GAS  /tmp/cc6LrBXE.s 			page 86


 1947              	.LFB14:
1497:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1948              		.loc 1 1497 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 16
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              	.LVL201:
 1953 0000 70B5     		push	{r4, r5, r6, lr}
 1954              	.LCFI27:
 1955              		.cfi_def_cfa_offset 16
 1956              		.cfi_offset 4, -16
 1957              		.cfi_offset 5, -12
 1958              		.cfi_offset 6, -8
 1959              		.cfi_offset 14, -4
 1960 0002 84B0     		sub	sp, sp, #16
 1961              	.LCFI28:
 1962              		.cfi_def_cfa_offset 32
 1963 0004 0191     		str	r1, [sp, #4]
 1964              	.LVL202:
1507:FreeRTOS/queue.c **** 
 1965              		.loc 1 1507 0
 1966 0006 40B9     		cbnz	r0, .L184
 1967              	.LBB162:
 1968              	.LBB163:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1969              		.loc 2 200 0
 1970              		.syntax unified
 1971              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1972 0008 4FF05003 			mov r3, #80												
 1973 000c 83F31188 		msr basepri, r3											
 1974 0010 BFF36F8F 		isb														
 1975 0014 BFF34F8F 		dsb														
 1976              	
 1977              	@ 0 "" 2
 1978              	.LVL203:
 1979              		.thumb
 1980              		.syntax unified
 1981              	.L185:
 1982 0018 FEE7     		b	.L185
 1983              	.L184:
 1984 001a 0446     		mov	r4, r0
 1985              	.LBE163:
 1986              	.LBE162:
1511:FreeRTOS/queue.c **** 
 1987              		.loc 1 1511 0
 1988 001c 036C     		ldr	r3, [r0, #64]
 1989 001e 43B1     		cbz	r3, .L186
 1990              	.LBB164:
 1991              	.LBB165:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 1992              		.loc 2 200 0
 1993              		.syntax unified
 1994              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 1995 0020 4FF05003 			mov r3, #80												
 1996 0024 83F31188 		msr basepri, r3											
 1997 0028 BFF36F8F 		isb														
 1998 002c BFF34F8F 		dsb														
ARM GAS  /tmp/cc6LrBXE.s 			page 87


 1999              	
 2000              	@ 0 "" 2
 2001              	.LVL204:
 2002              		.thumb
 2003              		.syntax unified
 2004              	.L187:
 2005 0030 FEE7     		b	.L187
 2006              	.L186:
 2007              	.LBE165:
 2008              	.LBE164:
1516:FreeRTOS/queue.c ****         }
 2009              		.loc 1 1516 0
 2010 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 2011              	.LVL205:
 2012 0036 50B9     		cbnz	r0, .L205
1516:FreeRTOS/queue.c ****         }
 2013              		.loc 1 1516 0 is_stmt 0 discriminator 2
 2014 0038 019B     		ldr	r3, [sp, #4]
 2015 003a 5BB1     		cbz	r3, .L206
 2016              	.LBB166:
 2017              	.LBB167:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2018              		.loc 2 200 0 is_stmt 1
 2019              		.syntax unified
 2020              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2021 003c 4FF05003 			mov r3, #80												
 2022 0040 83F31188 		msr basepri, r3											
 2023 0044 BFF36F8F 		isb														
 2024 0048 BFF34F8F 		dsb														
 2025              	
 2026              	@ 0 "" 2
 2027              	.LVL206:
 2028              		.thumb
 2029              		.syntax unified
 2030              	.L189:
 2031 004c FEE7     		b	.L189
 2032              	.L205:
 2033              	.LBE167:
 2034              	.LBE166:
 2035 004e 0025     		movs	r5, #0
 2036 0050 2E46     		mov	r6, r5
 2037 0052 51E0     		b	.L190
 2038              	.L206:
 2039 0054 0025     		movs	r5, #0
 2040 0056 2E46     		mov	r6, r5
 2041 0058 4EE0     		b	.L190
 2042              	.LVL207:
 2043              	.L209:
 2044              	.LBB168:
1539:FreeRTOS/queue.c **** 
 2045              		.loc 1 1539 0
 2046 005a 013B     		subs	r3, r3, #1
 2047              	.LVL208:
 2048 005c A363     		str	r3, [r4, #56]
1543:FreeRTOS/queue.c ****                         {
 2049              		.loc 1 1543 0
 2050 005e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc6LrBXE.s 			page 88


 2051              	.LVL209:
 2052 0060 13B9     		cbnz	r3, .L192
1547:FreeRTOS/queue.c ****                         }
 2053              		.loc 1 1547 0
 2054 0062 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2055              	.LVL210:
 2056 0066 A060     		str	r0, [r4, #8]
 2057              	.L192:
1558:FreeRTOS/queue.c ****                 {
 2058              		.loc 1 1558 0
 2059 0068 2369     		ldr	r3, [r4, #16]
 2060 006a 63B1     		cbz	r3, .L193
1560:FreeRTOS/queue.c ****                     {
 2061              		.loc 1 1560 0
 2062 006c 04F11000 		add	r0, r4, #16
 2063 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2064              	.LVL211:
 2065 0074 38B1     		cbz	r0, .L193
1562:FreeRTOS/queue.c ****                     }
 2066              		.loc 1 1562 0
 2067 0076 484B     		ldr	r3, .L215
 2068 0078 4FF08052 		mov	r2, #268435456
 2069 007c 1A60     		str	r2, [r3]
 2070              		.syntax unified
 2071              	@ 1562 "FreeRTOS/queue.c" 1
 2072 007e BFF34F8F 		dsb
 2073              	@ 0 "" 2
 2074              	@ 1562 "FreeRTOS/queue.c" 1
 2075 0082 BFF36F8F 		isb
 2076              	@ 0 "" 2
 2077              		.thumb
 2078              		.syntax unified
 2079              	.L193:
1574:FreeRTOS/queue.c ****                 return pdPASS;
 2080              		.loc 1 1574 0
 2081 0086 FFF7FEFF 		bl	vPortExitCritical
 2082              	.LVL212:
1575:FreeRTOS/queue.c ****             }
 2083              		.loc 1 1575 0
 2084 008a 0125     		movs	r5, #1
 2085              	.LVL213:
 2086              	.L183:
 2087              	.LBE168:
1711:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2088              		.loc 1 1711 0
 2089 008c 2846     		mov	r0, r5
 2090 008e 04B0     		add	sp, sp, #16
 2091              	.LCFI29:
 2092              		.cfi_remember_state
 2093              		.cfi_def_cfa_offset 16
 2094              		@ sp needed
 2095 0090 70BD     		pop	{r4, r5, r6, pc}
 2096              	.LVL214:
 2097              	.L210:
 2098              	.LCFI30:
 2099              		.cfi_restore_state
 2100              	.LBB171:
ARM GAS  /tmp/cc6LrBXE.s 			page 89


1586:FreeRTOS/queue.c ****                         }
 2101              		.loc 1 1586 0
 2102 0092 45B1     		cbz	r5, .L196
 2103              	.LBB169:
 2104              	.LBB170:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2105              		.loc 2 200 0
 2106              		.syntax unified
 2107              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2108 0094 4FF05003 			mov r3, #80												
 2109 0098 83F31188 		msr basepri, r3											
 2110 009c BFF36F8F 		isb														
 2111 00a0 BFF34F8F 		dsb														
 2112              	
 2113              	@ 0 "" 2
 2114              	.LVL215:
 2115              		.thumb
 2116              		.syntax unified
 2117              	.L197:
 2118 00a4 FEE7     		b	.L197
 2119              	.L196:
 2120              	.LBE170:
 2121              	.LBE169:
1592:FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 2122              		.loc 1 1592 0
 2123 00a6 FFF7FEFF 		bl	vPortExitCritical
 2124              	.LVL216:
1594:FreeRTOS/queue.c ****                 }
 2125              		.loc 1 1594 0
 2126 00aa EFE7     		b	.L183
 2127              	.L211:
1600:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2128              		.loc 1 1600 0
 2129 00ac 02A8     		add	r0, sp, #8
 2130 00ae FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2131              	.LVL217:
1601:FreeRTOS/queue.c ****                 }
 2132              		.loc 1 1601 0
 2133 00b2 0126     		movs	r6, #1
 2134 00b4 2AE0     		b	.L198
 2135              	.LVL218:
 2136              	.L212:
 2137              	.LBE171:
1616:FreeRTOS/queue.c **** 
 2138              		.loc 1 1616 0 discriminator 1
 2139 00b6 0023     		movs	r3, #0
 2140 00b8 84F84430 		strb	r3, [r4, #68]
 2141 00bc 32E0     		b	.L199
 2142              	.L213:
1616:FreeRTOS/queue.c **** 
 2143              		.loc 1 1616 0 is_stmt 0 discriminator 4
 2144 00be 0023     		movs	r3, #0
 2145 00c0 84F84530 		strb	r3, [r4, #69]
 2146 00c4 34E0     		b	.L200
 2147              	.L214:
1633:FreeRTOS/queue.c ****                             {
 2148              		.loc 1 1633 0 is_stmt 1
ARM GAS  /tmp/cc6LrBXE.s 			page 90


 2149 00c6 FFF7FEFF 		bl	vPortEnterCritical
 2150              	.LVL219:
1635:FreeRTOS/queue.c ****                             }
 2151              		.loc 1 1635 0
 2152 00ca A068     		ldr	r0, [r4, #8]
 2153 00cc FFF7FEFF 		bl	xTaskPriorityInherit
 2154              	.LVL220:
 2155 00d0 0546     		mov	r5, r0
 2156              	.LVL221:
1637:FreeRTOS/queue.c ****                         }
 2157              		.loc 1 1637 0
 2158 00d2 FFF7FEFF 		bl	vPortExitCritical
 2159              	.LVL222:
 2160 00d6 3BE0     		b	.L203
 2161              	.L202:
1662:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2162              		.loc 1 1662 0
 2163 00d8 2046     		mov	r0, r4
 2164 00da FFF7FEFF 		bl	prvUnlockQueue
 2165              	.LVL223:
1663:FreeRTOS/queue.c ****             }
 2166              		.loc 1 1663 0
 2167 00de FFF7FEFF 		bl	xTaskResumeAll
 2168              	.LVL224:
 2169 00e2 09E0     		b	.L190
 2170              	.L201:
1669:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2171              		.loc 1 1669 0
 2172 00e4 2046     		mov	r0, r4
 2173 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2174              	.LVL225:
1670:FreeRTOS/queue.c **** 
 2175              		.loc 1 1670 0
 2176 00ea FFF7FEFF 		bl	xTaskResumeAll
 2177              	.LVL226:
1676:FreeRTOS/queue.c ****             {
 2178              		.loc 1 1676 0
 2179 00ee 2046     		mov	r0, r4
 2180 00f0 FFF7FEFF 		bl	prvIsQueueEmpty
 2181              	.LVL227:
 2182 00f4 0028     		cmp	r0, #0
 2183 00f6 40D1     		bne	.L208
 2184              	.LVL228:
 2185              	.L190:
1525:FreeRTOS/queue.c ****         {
 2186              		.loc 1 1525 0
 2187 00f8 FFF7FEFF 		bl	vPortEnterCritical
 2188              	.LVL229:
 2189              	.LBB172:
1529:FreeRTOS/queue.c **** 
 2190              		.loc 1 1529 0
 2191 00fc A36B     		ldr	r3, [r4, #56]
 2192              	.LVL230:
1533:FreeRTOS/queue.c ****             {
 2193              		.loc 1 1533 0
 2194 00fe 002B     		cmp	r3, #0
 2195 0100 ABD1     		bne	.L209
ARM GAS  /tmp/cc6LrBXE.s 			page 91


1579:FreeRTOS/queue.c ****                 {
 2196              		.loc 1 1579 0
 2197 0102 019B     		ldr	r3, [sp, #4]
 2198              	.LVL231:
 2199 0104 002B     		cmp	r3, #0
 2200 0106 C4D0     		beq	.L210
1596:FreeRTOS/queue.c ****                 {
 2201              		.loc 1 1596 0
 2202 0108 002E     		cmp	r6, #0
 2203 010a CFD0     		beq	.L211
 2204              	.LVL232:
 2205              	.L198:
 2206              	.LBE172:
1610:FreeRTOS/queue.c **** 
 2207              		.loc 1 1610 0
 2208 010c FFF7FEFF 		bl	vPortExitCritical
 2209              	.LVL233:
1615:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2210              		.loc 1 1615 0
 2211 0110 FFF7FEFF 		bl	vTaskSuspendAll
 2212              	.LVL234:
1616:FreeRTOS/queue.c **** 
 2213              		.loc 1 1616 0
 2214 0114 FFF7FEFF 		bl	vPortEnterCritical
 2215              	.LVL235:
 2216 0118 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2217 011c 5BB2     		sxtb	r3, r3
 2218 011e B3F1FF3F 		cmp	r3, #-1
 2219 0122 C8D0     		beq	.L212
 2220              	.L199:
1616:FreeRTOS/queue.c **** 
 2221              		.loc 1 1616 0 is_stmt 0 discriminator 3
 2222 0124 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2223 0128 5BB2     		sxtb	r3, r3
 2224 012a B3F1FF3F 		cmp	r3, #-1
 2225 012e C6D0     		beq	.L213
 2226              	.L200:
1616:FreeRTOS/queue.c **** 
 2227              		.loc 1 1616 0 discriminator 6
 2228 0130 FFF7FEFF 		bl	vPortExitCritical
 2229              	.LVL236:
1619:FreeRTOS/queue.c ****         {
 2230              		.loc 1 1619 0 is_stmt 1 discriminator 6
 2231 0134 01A9     		add	r1, sp, #4
 2232 0136 02A8     		add	r0, sp, #8
 2233 0138 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2234              	.LVL237:
 2235 013c 0028     		cmp	r0, #0
 2236 013e D1D1     		bne	.L201
1625:FreeRTOS/queue.c ****             {
 2237              		.loc 1 1625 0
 2238 0140 2046     		mov	r0, r4
 2239 0142 FFF7FEFF 		bl	prvIsQueueEmpty
 2240              	.LVL238:
 2241 0146 0028     		cmp	r0, #0
 2242 0148 C6D0     		beq	.L202
1631:FreeRTOS/queue.c ****                         {
ARM GAS  /tmp/cc6LrBXE.s 			page 92


 2243              		.loc 1 1631 0
 2244 014a 2368     		ldr	r3, [r4]
 2245 014c 002B     		cmp	r3, #0
 2246 014e BAD0     		beq	.L214
 2247              	.L203:
1646:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2248              		.loc 1 1646 0
 2249 0150 0199     		ldr	r1, [sp, #4]
 2250 0152 04F12400 		add	r0, r4, #36
 2251 0156 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2252              	.LVL239:
1647:FreeRTOS/queue.c **** 
 2253              		.loc 1 1647 0
 2254 015a 2046     		mov	r0, r4
 2255 015c FFF7FEFF 		bl	prvUnlockQueue
 2256              	.LVL240:
1649:FreeRTOS/queue.c ****                 {
 2257              		.loc 1 1649 0
 2258 0160 FFF7FEFF 		bl	xTaskResumeAll
 2259              	.LVL241:
 2260 0164 0028     		cmp	r0, #0
 2261 0166 C7D1     		bne	.L190
1651:FreeRTOS/queue.c ****                 }
 2262              		.loc 1 1651 0
 2263 0168 0B4B     		ldr	r3, .L215
 2264 016a 4FF08052 		mov	r2, #268435456
 2265 016e 1A60     		str	r2, [r3]
 2266              		.syntax unified
 2267              	@ 1651 "FreeRTOS/queue.c" 1
 2268 0170 BFF34F8F 		dsb
 2269              	@ 0 "" 2
 2270              	@ 1651 "FreeRTOS/queue.c" 1
 2271 0174 BFF36F8F 		isb
 2272              	@ 0 "" 2
 2273              		.thumb
 2274              		.syntax unified
 2275 0178 BEE7     		b	.L190
 2276              	.L208:
1683:FreeRTOS/queue.c ****                         {
 2277              		.loc 1 1683 0
 2278 017a 002D     		cmp	r5, #0
 2279 017c 86D0     		beq	.L183
1685:FreeRTOS/queue.c ****                             {
 2280              		.loc 1 1685 0
 2281 017e FFF7FEFF 		bl	vPortEnterCritical
 2282              	.LVL242:
 2283              	.LBB173:
1694:FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 2284              		.loc 1 1694 0
 2285 0182 2046     		mov	r0, r4
 2286 0184 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2287              	.LVL243:
1695:FreeRTOS/queue.c ****                             }
 2288              		.loc 1 1695 0
 2289 0188 0146     		mov	r1, r0
 2290 018a A068     		ldr	r0, [r4, #8]
 2291              	.LVL244:
ARM GAS  /tmp/cc6LrBXE.s 			page 93


 2292 018c FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2293              	.LVL245:
 2294              	.LBE173:
1697:FreeRTOS/queue.c ****                         }
 2295              		.loc 1 1697 0
 2296 0190 FFF7FEFF 		bl	vPortExitCritical
 2297              	.LVL246:
1703:FreeRTOS/queue.c ****             }
 2298              		.loc 1 1703 0
 2299 0194 0025     		movs	r5, #0
 2300              	.LVL247:
 2301 0196 79E7     		b	.L183
 2302              	.L216:
 2303              		.align	2
 2304              	.L215:
 2305 0198 04ED00E0 		.word	-536810236
 2306              		.cfi_endproc
 2307              	.LFE14:
 2309              		.section	.text.xQueuePeek,"ax",%progbits
 2310              		.align	1
 2311              		.global	xQueuePeek
 2312              		.syntax unified
 2313              		.thumb
 2314              		.thumb_func
 2315              		.fpu softvfp
 2317              	xQueuePeek:
 2318              	.LFB15:
1717:FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2319              		.loc 1 1717 0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 16
 2322              		@ frame_needed = 0, uses_anonymous_args = 0
 2323              	.LVL248:
 2324 0000 70B5     		push	{r4, r5, r6, lr}
 2325              	.LCFI31:
 2326              		.cfi_def_cfa_offset 16
 2327              		.cfi_offset 4, -16
 2328              		.cfi_offset 5, -12
 2329              		.cfi_offset 6, -8
 2330              		.cfi_offset 14, -4
 2331 0002 84B0     		sub	sp, sp, #16
 2332              	.LCFI32:
 2333              		.cfi_def_cfa_offset 32
 2334 0004 0192     		str	r2, [sp, #4]
 2335              	.LVL249:
1724:FreeRTOS/queue.c **** 
 2336              		.loc 1 1724 0
 2337 0006 60B1     		cbz	r0, .L238
 2338 0008 0446     		mov	r4, r0
1728:FreeRTOS/queue.c **** 
 2339              		.loc 1 1728 0
 2340 000a 99B9     		cbnz	r1, .L220
1728:FreeRTOS/queue.c **** 
 2341              		.loc 1 1728 0 is_stmt 0 discriminator 2
 2342 000c 036C     		ldr	r3, [r0, #64]
 2343 000e 8BB1     		cbz	r3, .L220
 2344              	.LBB174:
ARM GAS  /tmp/cc6LrBXE.s 			page 94


 2345              	.LBB175:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2346              		.loc 2 200 0 is_stmt 1
 2347              		.syntax unified
 2348              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2349 0010 4FF05003 			mov r3, #80												
 2350 0014 83F31188 		msr basepri, r3											
 2351 0018 BFF36F8F 		isb														
 2352 001c BFF34F8F 		dsb														
 2353              	
 2354              	@ 0 "" 2
 2355              	.LVL250:
 2356              		.thumb
 2357              		.syntax unified
 2358              	.L221:
 2359 0020 FEE7     		b	.L221
 2360              	.L238:
 2361              	.LBE175:
 2362              	.LBE174:
 2363              	.LBB176:
 2364              	.LBB177:
 2365              		.syntax unified
 2366              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2367 0022 4FF05003 			mov r3, #80												
 2368 0026 83F31188 		msr basepri, r3											
 2369 002a BFF36F8F 		isb														
 2370 002e BFF34F8F 		dsb														
 2371              	
 2372              	@ 0 "" 2
 2373              	.LVL251:
 2374              		.thumb
 2375              		.syntax unified
 2376              	.L219:
 2377 0032 FEE7     		b	.L219
 2378              	.L220:
 2379 0034 0E46     		mov	r6, r1
 2380              	.LBE177:
 2381              	.LBE176:
1733:FreeRTOS/queue.c ****         }
 2382              		.loc 1 1733 0
 2383 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 2384              	.LVL252:
 2385 003a 50B9     		cbnz	r0, .L235
1733:FreeRTOS/queue.c ****         }
 2386              		.loc 1 1733 0 is_stmt 0 discriminator 2
 2387 003c 019B     		ldr	r3, [sp, #4]
 2388 003e 53B1     		cbz	r3, .L236
 2389              	.LBB178:
 2390              	.LBB179:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2391              		.loc 2 200 0 is_stmt 1
 2392              		.syntax unified
 2393              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2394 0040 4FF05003 			mov r3, #80												
 2395 0044 83F31188 		msr basepri, r3											
 2396 0048 BFF36F8F 		isb														
 2397 004c BFF34F8F 		dsb														
ARM GAS  /tmp/cc6LrBXE.s 			page 95


 2398              	
 2399              	@ 0 "" 2
 2400              	.LVL253:
 2401              		.thumb
 2402              		.syntax unified
 2403              	.L223:
 2404 0050 FEE7     		b	.L223
 2405              	.L235:
 2406              	.LBE179:
 2407              	.LBE178:
 2408 0052 0025     		movs	r5, #0
 2409 0054 3EE0     		b	.L224
 2410              	.L236:
 2411 0056 0025     		movs	r5, #0
 2412 0058 3CE0     		b	.L224
 2413              	.LVL254:
 2414              	.L241:
 2415              	.LBB180:
1753:FreeRTOS/queue.c **** 
 2416              		.loc 1 1753 0
 2417 005a E568     		ldr	r5, [r4, #12]
 2418              	.LVL255:
1755:FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 2419              		.loc 1 1755 0
 2420 005c 3146     		mov	r1, r6
 2421 005e 2046     		mov	r0, r4
 2422 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 2423              	.LVL256:
1759:FreeRTOS/queue.c **** 
 2424              		.loc 1 1759 0
 2425 0064 E560     		str	r5, [r4, #12]
1763:FreeRTOS/queue.c ****                 {
 2426              		.loc 1 1763 0
 2427 0066 636A     		ldr	r3, [r4, #36]
 2428 0068 23B9     		cbnz	r3, .L239
 2429              	.L226:
1780:FreeRTOS/queue.c ****                 return pdPASS;
 2430              		.loc 1 1780 0
 2431 006a FFF7FEFF 		bl	vPortExitCritical
 2432              	.LVL257:
1781:FreeRTOS/queue.c ****             }
 2433              		.loc 1 1781 0
 2434 006e 0120     		movs	r0, #1
 2435              	.LVL258:
 2436              	.L217:
 2437              	.LBE180:
1862:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2438              		.loc 1 1862 0
 2439 0070 04B0     		add	sp, sp, #16
 2440              	.LCFI33:
 2441              		.cfi_remember_state
 2442              		.cfi_def_cfa_offset 16
 2443              		@ sp needed
 2444 0072 70BD     		pop	{r4, r5, r6, pc}
 2445              	.LVL259:
 2446              	.L239:
 2447              	.LCFI34:
ARM GAS  /tmp/cc6LrBXE.s 			page 96


 2448              		.cfi_restore_state
 2449              	.LBB181:
1765:FreeRTOS/queue.c ****                     {
 2450              		.loc 1 1765 0
 2451 0074 04F12400 		add	r0, r4, #36
 2452 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2453              	.LVL260:
 2454 007c 0028     		cmp	r0, #0
 2455 007e F4D0     		beq	.L226
1768:FreeRTOS/queue.c ****                     }
 2456              		.loc 1 1768 0
 2457 0080 344B     		ldr	r3, .L246
 2458 0082 4FF08052 		mov	r2, #268435456
 2459 0086 1A60     		str	r2, [r3]
 2460              		.syntax unified
 2461              	@ 1768 "FreeRTOS/queue.c" 1
 2462 0088 BFF34F8F 		dsb
 2463              	@ 0 "" 2
 2464              	@ 1768 "FreeRTOS/queue.c" 1
 2465 008c BFF36F8F 		isb
 2466              	@ 0 "" 2
 2467              		.thumb
 2468              		.syntax unified
 2469 0090 EBE7     		b	.L226
 2470              	.LVL261:
 2471              	.L242:
1789:FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 2472              		.loc 1 1789 0
 2473 0092 FFF7FEFF 		bl	vPortExitCritical
 2474              	.LVL262:
1791:FreeRTOS/queue.c ****                 }
 2475              		.loc 1 1791 0
 2476 0096 0020     		movs	r0, #0
 2477 0098 EAE7     		b	.L217
 2478              	.L243:
1798:FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2479              		.loc 1 1798 0
 2480 009a 02A8     		add	r0, sp, #8
 2481 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2482              	.LVL263:
1799:FreeRTOS/queue.c ****                 }
 2483              		.loc 1 1799 0
 2484 00a0 0125     		movs	r5, #1
 2485 00a2 21E0     		b	.L229
 2486              	.LVL264:
 2487              	.L244:
 2488              	.LBE181:
1814:FreeRTOS/queue.c **** 
 2489              		.loc 1 1814 0 discriminator 1
 2490 00a4 0023     		movs	r3, #0
 2491 00a6 84F84430 		strb	r3, [r4, #68]
 2492 00aa 29E0     		b	.L230
 2493              	.L245:
1814:FreeRTOS/queue.c **** 
 2494              		.loc 1 1814 0 is_stmt 0 discriminator 4
 2495 00ac 0023     		movs	r3, #0
 2496 00ae 84F84530 		strb	r3, [r4, #69]
ARM GAS  /tmp/cc6LrBXE.s 			page 97


 2497 00b2 2BE0     		b	.L231
 2498              	.L233:
1840:FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2499              		.loc 1 1840 0 is_stmt 1
 2500 00b4 2046     		mov	r0, r4
 2501 00b6 FFF7FEFF 		bl	prvUnlockQueue
 2502              	.LVL265:
1841:FreeRTOS/queue.c ****             }
 2503              		.loc 1 1841 0
 2504 00ba FFF7FEFF 		bl	xTaskResumeAll
 2505              	.LVL266:
 2506 00be 09E0     		b	.L224
 2507              	.L232:
1848:FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2508              		.loc 1 1848 0
 2509 00c0 2046     		mov	r0, r4
 2510 00c2 FFF7FEFF 		bl	prvUnlockQueue
 2511              	.LVL267:
1849:FreeRTOS/queue.c **** 
 2512              		.loc 1 1849 0
 2513 00c6 FFF7FEFF 		bl	xTaskResumeAll
 2514              	.LVL268:
1851:FreeRTOS/queue.c ****             {
 2515              		.loc 1 1851 0
 2516 00ca 2046     		mov	r0, r4
 2517 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 2518              	.LVL269:
 2519 00d0 0028     		cmp	r0, #0
 2520 00d2 3DD1     		bne	.L240
 2521              	.LVL270:
 2522              	.L224:
1742:FreeRTOS/queue.c ****         {
 2523              		.loc 1 1742 0
 2524 00d4 FFF7FEFF 		bl	vPortEnterCritical
 2525              	.LVL271:
 2526              	.LBB182:
1744:FreeRTOS/queue.c **** 
 2527              		.loc 1 1744 0
 2528 00d8 A36B     		ldr	r3, [r4, #56]
 2529              	.LVL272:
1748:FreeRTOS/queue.c ****             {
 2530              		.loc 1 1748 0
 2531 00da 002B     		cmp	r3, #0
 2532 00dc BDD1     		bne	.L241
1785:FreeRTOS/queue.c ****                 {
 2533              		.loc 1 1785 0
 2534 00de 019B     		ldr	r3, [sp, #4]
 2535              	.LVL273:
 2536 00e0 002B     		cmp	r3, #0
 2537 00e2 D6D0     		beq	.L242
1793:FreeRTOS/queue.c ****                 {
 2538              		.loc 1 1793 0
 2539 00e4 002D     		cmp	r5, #0
 2540 00e6 D8D0     		beq	.L243
 2541              	.LVL274:
 2542              	.L229:
 2543              	.LBE182:
ARM GAS  /tmp/cc6LrBXE.s 			page 98


1808:FreeRTOS/queue.c **** 
 2544              		.loc 1 1808 0
 2545 00e8 FFF7FEFF 		bl	vPortExitCritical
 2546              	.LVL275:
1813:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2547              		.loc 1 1813 0
 2548 00ec FFF7FEFF 		bl	vTaskSuspendAll
 2549              	.LVL276:
1814:FreeRTOS/queue.c **** 
 2550              		.loc 1 1814 0
 2551 00f0 FFF7FEFF 		bl	vPortEnterCritical
 2552              	.LVL277:
 2553 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2554 00f8 5BB2     		sxtb	r3, r3
 2555 00fa B3F1FF3F 		cmp	r3, #-1
 2556 00fe D1D0     		beq	.L244
 2557              	.L230:
1814:FreeRTOS/queue.c **** 
 2558              		.loc 1 1814 0 is_stmt 0 discriminator 3
 2559 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2560 0104 5BB2     		sxtb	r3, r3
 2561 0106 B3F1FF3F 		cmp	r3, #-1
 2562 010a CFD0     		beq	.L245
 2563              	.L231:
1814:FreeRTOS/queue.c **** 
 2564              		.loc 1 1814 0 discriminator 6
 2565 010c FFF7FEFF 		bl	vPortExitCritical
 2566              	.LVL278:
1817:FreeRTOS/queue.c ****         {
 2567              		.loc 1 1817 0 is_stmt 1 discriminator 6
 2568 0110 01A9     		add	r1, sp, #4
 2569 0112 02A8     		add	r0, sp, #8
 2570 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2571              	.LVL279:
 2572 0118 0028     		cmp	r0, #0
 2573 011a D1D1     		bne	.L232
1821:FreeRTOS/queue.c ****             {
 2574              		.loc 1 1821 0
 2575 011c 2046     		mov	r0, r4
 2576 011e FFF7FEFF 		bl	prvIsQueueEmpty
 2577              	.LVL280:
 2578 0122 0028     		cmp	r0, #0
 2579 0124 C6D0     		beq	.L233
1824:FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2580              		.loc 1 1824 0
 2581 0126 0199     		ldr	r1, [sp, #4]
 2582 0128 04F12400 		add	r0, r4, #36
 2583 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 2584              	.LVL281:
1825:FreeRTOS/queue.c **** 
 2585              		.loc 1 1825 0
 2586 0130 2046     		mov	r0, r4
 2587 0132 FFF7FEFF 		bl	prvUnlockQueue
 2588              	.LVL282:
1827:FreeRTOS/queue.c ****                 {
 2589              		.loc 1 1827 0
 2590 0136 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/cc6LrBXE.s 			page 99


 2591              	.LVL283:
 2592 013a 0028     		cmp	r0, #0
 2593 013c CAD1     		bne	.L224
1829:FreeRTOS/queue.c ****                 }
 2594              		.loc 1 1829 0
 2595 013e 054B     		ldr	r3, .L246
 2596 0140 4FF08052 		mov	r2, #268435456
 2597 0144 1A60     		str	r2, [r3]
 2598              		.syntax unified
 2599              	@ 1829 "FreeRTOS/queue.c" 1
 2600 0146 BFF34F8F 		dsb
 2601              	@ 0 "" 2
 2602              	@ 1829 "FreeRTOS/queue.c" 1
 2603 014a BFF36F8F 		isb
 2604              	@ 0 "" 2
 2605              		.thumb
 2606              		.syntax unified
 2607 014e C1E7     		b	.L224
 2608              	.L240:
1854:FreeRTOS/queue.c ****             }
 2609              		.loc 1 1854 0
 2610 0150 0020     		movs	r0, #0
 2611 0152 8DE7     		b	.L217
 2612              	.L247:
 2613              		.align	2
 2614              	.L246:
 2615 0154 04ED00E0 		.word	-536810236
 2616              		.cfi_endproc
 2617              	.LFE15:
 2619              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2620              		.align	1
 2621              		.global	xQueueReceiveFromISR
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2625              		.fpu softvfp
 2627              	xQueueReceiveFromISR:
 2628              	.LFB16:
1868:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2629              		.loc 1 1868 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              	.LVL284:
 2634 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2635              	.LCFI35:
 2636              		.cfi_def_cfa_offset 32
 2637              		.cfi_offset 3, -32
 2638              		.cfi_offset 4, -28
 2639              		.cfi_offset 5, -24
 2640              		.cfi_offset 6, -20
 2641              		.cfi_offset 7, -16
 2642              		.cfi_offset 8, -12
 2643              		.cfi_offset 9, -8
 2644              		.cfi_offset 14, -4
 2645              	.LVL285:
1873:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
ARM GAS  /tmp/cc6LrBXE.s 			page 100


 2646              		.loc 1 1873 0
 2647 0004 60B1     		cbz	r0, .L262
 2648 0006 0446     		mov	r4, r0
1874:FreeRTOS/queue.c **** 
 2649              		.loc 1 1874 0
 2650 0008 99B9     		cbnz	r1, .L251
1874:FreeRTOS/queue.c **** 
 2651              		.loc 1 1874 0 is_stmt 0 discriminator 2
 2652 000a 036C     		ldr	r3, [r0, #64]
 2653 000c 8BB1     		cbz	r3, .L251
 2654              	.LBB183:
 2655              	.LBB184:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2656              		.loc 2 200 0 is_stmt 1
 2657              		.syntax unified
 2658              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2659 000e 4FF05003 			mov r3, #80												
 2660 0012 83F31188 		msr basepri, r3											
 2661 0016 BFF36F8F 		isb														
 2662 001a BFF34F8F 		dsb														
 2663              	
 2664              	@ 0 "" 2
 2665              	.LVL286:
 2666              		.thumb
 2667              		.syntax unified
 2668              	.L252:
 2669 001e FEE7     		b	.L252
 2670              	.L262:
 2671              	.LBE184:
 2672              	.LBE183:
 2673              	.LBB185:
 2674              	.LBB186:
 2675              		.syntax unified
 2676              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2677 0020 4FF05003 			mov r3, #80												
 2678 0024 83F31188 		msr basepri, r3											
 2679 0028 BFF36F8F 		isb														
 2680 002c BFF34F8F 		dsb														
 2681              	
 2682              	@ 0 "" 2
 2683              	.LVL287:
 2684              		.thumb
 2685              		.syntax unified
 2686              	.L250:
 2687 0030 FEE7     		b	.L250
 2688              	.L251:
 2689 0032 1746     		mov	r7, r2
 2690 0034 8946     		mov	r9, r1
 2691              	.LBE186:
 2692              	.LBE185:
1890:FreeRTOS/queue.c **** 
 2693              		.loc 1 1890 0
 2694 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2695              	.LVL288:
 2696              	.LBB187:
 2697              	.LBB188:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
ARM GAS  /tmp/cc6LrBXE.s 			page 101


 2698              		.loc 2 216 0
 2699              		.syntax unified
 2700              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2701 003a EFF31186 			mrs r6, basepri											
 2702 003e 4FF05003 		mov r3, #80												
 2703 0042 83F31188 		msr basepri, r3											
 2704 0046 BFF36F8F 		isb														
 2705 004a BFF34F8F 		dsb														
 2706              	
 2707              	@ 0 "" 2
 2708              		.thumb
 2709              		.syntax unified
 2710              	.LBE188:
 2711              	.LBE187:
 2712              	.LBB189:
1894:FreeRTOS/queue.c **** 
 2713              		.loc 1 1894 0
 2714 004e D4F83880 		ldr	r8, [r4, #56]
 2715              	.LVL289:
1897:FreeRTOS/queue.c ****         {
 2716              		.loc 1 1897 0
 2717 0052 B8F1000F 		cmp	r8, #0
 2718 0056 28D0     		beq	.L257
 2719              	.LBB190:
1899:FreeRTOS/queue.c **** 
 2720              		.loc 1 1899 0
 2721 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2722 005c 6DB2     		sxtb	r5, r5
 2723              	.LVL290:
1903:FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2724              		.loc 1 1903 0
 2725 005e 4946     		mov	r1, r9
 2726 0060 2046     		mov	r0, r4
 2727 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2728              	.LVL291:
1904:FreeRTOS/queue.c **** 
 2729              		.loc 1 1904 0
 2730 0066 08F1FF33 		add	r3, r8, #-1
 2731 006a A363     		str	r3, [r4, #56]
1910:FreeRTOS/queue.c ****             {
 2732              		.loc 1 1910 0
 2733 006c B5F1FF3F 		cmp	r5, #-1
 2734 0070 0AD0     		beq	.L263
1941:FreeRTOS/queue.c **** 
 2735              		.loc 1 1941 0
 2736 0072 7F2D     		cmp	r5, #127
 2737 0074 13D1     		bne	.L255
 2738              	.LBB191:
 2739              	.LBB192:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2740              		.loc 2 200 0
 2741              		.syntax unified
 2742              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2743 0076 4FF05003 			mov r3, #80												
 2744 007a 83F31188 		msr basepri, r3											
 2745 007e BFF36F8F 		isb														
 2746 0082 BFF34F8F 		dsb														
ARM GAS  /tmp/cc6LrBXE.s 			page 102


 2747              	
 2748              	@ 0 "" 2
 2749              	.LVL292:
 2750              		.thumb
 2751              		.syntax unified
 2752              	.L256:
 2753 0086 FEE7     		b	.L256
 2754              	.L263:
 2755              	.LBE192:
 2756              	.LBE191:
1912:FreeRTOS/queue.c ****                 {
 2757              		.loc 1 1912 0
 2758 0088 2369     		ldr	r3, [r4, #16]
 2759 008a 9BB1     		cbz	r3, .L258
1914:FreeRTOS/queue.c ****                     {
 2760              		.loc 1 1914 0
 2761 008c 04F11000 		add	r0, r4, #16
 2762 0090 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2763              	.LVL293:
 2764 0094 80B1     		cbz	r0, .L259
1918:FreeRTOS/queue.c ****                         {
 2765              		.loc 1 1918 0
 2766 0096 8FB1     		cbz	r7, .L260
1920:FreeRTOS/queue.c ****                         }
 2767              		.loc 1 1920 0
 2768 0098 0120     		movs	r0, #1
 2769 009a 3860     		str	r0, [r7]
 2770 009c 06E0     		b	.L253
 2771              	.L255:
1943:FreeRTOS/queue.c ****             }
 2772              		.loc 1 1943 0
 2773 009e 6B1C     		adds	r3, r5, #1
 2774 00a0 5BB2     		sxtb	r3, r3
 2775 00a2 84F84430 		strb	r3, [r4, #68]
1946:FreeRTOS/queue.c ****         }
 2776              		.loc 1 1946 0
 2777 00a6 0120     		movs	r0, #1
 2778 00a8 00E0     		b	.L253
 2779              	.LVL294:
 2780              	.L257:
 2781              	.LBE190:
1950:FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2782              		.loc 1 1950 0
 2783 00aa 0020     		movs	r0, #0
 2784              	.L253:
 2785              	.LVL295:
 2786              	.LBE189:
 2787              	.LBB194:
 2788              	.LBB195:
 2789              		.loc 2 234 0
 2790              		.syntax unified
 2791              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2792 00ac 86F31188 			msr basepri, r6	
 2793              	@ 0 "" 2
 2794              	.LVL296:
 2795              		.thumb
 2796              		.syntax unified
ARM GAS  /tmp/cc6LrBXE.s 			page 103


 2797              	.LBE195:
 2798              	.LBE194:
1957:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2799              		.loc 1 1957 0
 2800 00b0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2801              	.LVL297:
 2802              	.L258:
 2803              	.LBB196:
 2804              	.LBB193:
1946:FreeRTOS/queue.c ****         }
 2805              		.loc 1 1946 0
 2806 00b4 0120     		movs	r0, #1
 2807 00b6 F9E7     		b	.L253
 2808              	.L259:
 2809 00b8 0120     		movs	r0, #1
 2810 00ba F7E7     		b	.L253
 2811              	.L260:
 2812 00bc 0120     		movs	r0, #1
 2813 00be F5E7     		b	.L253
 2814              	.LBE193:
 2815              	.LBE196:
 2816              		.cfi_endproc
 2817              	.LFE16:
 2819              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2820              		.align	1
 2821              		.global	xQueuePeekFromISR
 2822              		.syntax unified
 2823              		.thumb
 2824              		.thumb_func
 2825              		.fpu softvfp
 2827              	xQueuePeekFromISR:
 2828              	.LFB17:
1962:FreeRTOS/queue.c ****     BaseType_t xReturn;
 2829              		.loc 1 1962 0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 0
 2832              		@ frame_needed = 0, uses_anonymous_args = 0
 2833              	.LVL298:
 2834 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2835              	.LCFI36:
 2836              		.cfi_def_cfa_offset 24
 2837              		.cfi_offset 3, -24
 2838              		.cfi_offset 4, -20
 2839              		.cfi_offset 5, -16
 2840              		.cfi_offset 6, -12
 2841              		.cfi_offset 7, -8
 2842              		.cfi_offset 14, -4
 2843              	.LVL299:
1968:FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2844              		.loc 1 1968 0
 2845 0002 60B1     		cbz	r0, .L274
 2846 0004 0446     		mov	r4, r0
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2847              		.loc 1 1969 0
 2848 0006 99B9     		cbnz	r1, .L267
1969:FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2849              		.loc 1 1969 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cc6LrBXE.s 			page 104


 2850 0008 036C     		ldr	r3, [r0, #64]
 2851 000a 8BB1     		cbz	r3, .L267
 2852              	.LBB197:
 2853              	.LBB198:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2854              		.loc 2 200 0 is_stmt 1
 2855              		.syntax unified
 2856              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2857 000c 4FF05003 			mov r3, #80												
 2858 0010 83F31188 		msr basepri, r3											
 2859 0014 BFF36F8F 		isb														
 2860 0018 BFF34F8F 		dsb														
 2861              	
 2862              	@ 0 "" 2
 2863              	.LVL300:
 2864              		.thumb
 2865              		.syntax unified
 2866              	.L268:
 2867 001c FEE7     		b	.L268
 2868              	.L274:
 2869              	.LBE198:
 2870              	.LBE197:
 2871              	.LBB199:
 2872              	.LBB200:
 2873              		.syntax unified
 2874              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2875 001e 4FF05003 			mov r3, #80												
 2876 0022 83F31188 		msr basepri, r3											
 2877 0026 BFF36F8F 		isb														
 2878 002a BFF34F8F 		dsb														
 2879              	
 2880              	@ 0 "" 2
 2881              	.LVL301:
 2882              		.thumb
 2883              		.syntax unified
 2884              	.L266:
 2885 002e FEE7     		b	.L266
 2886              	.L267:
 2887              	.LBE200:
 2888              	.LBE199:
1970:FreeRTOS/queue.c **** 
 2889              		.loc 1 1970 0
 2890 0030 236C     		ldr	r3, [r4, #64]
 2891 0032 43B9     		cbnz	r3, .L269
 2892              	.LBB201:
 2893              	.LBB202:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2894              		.loc 2 200 0
 2895              		.syntax unified
 2896              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2897 0034 4FF05003 			mov r3, #80												
 2898 0038 83F31188 		msr basepri, r3											
 2899 003c BFF36F8F 		isb														
 2900 0040 BFF34F8F 		dsb														
 2901              	
 2902              	@ 0 "" 2
 2903              	.LVL302:
ARM GAS  /tmp/cc6LrBXE.s 			page 105


 2904              		.thumb
 2905              		.syntax unified
 2906              	.L270:
 2907 0044 FEE7     		b	.L270
 2908              	.L269:
 2909 0046 0D46     		mov	r5, r1
 2910              	.LBE202:
 2911              	.LBE201:
1986:FreeRTOS/queue.c **** 
 2912              		.loc 1 1986 0
 2913 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2914              	.LVL303:
 2915              	.LBB203:
 2916              	.LBB204:
 216:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2917              		.loc 2 216 0
 2918              		.syntax unified
 2919              	@ 216 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2920 004c EFF31186 			mrs r6, basepri											
 2921 0050 4FF05003 		mov r3, #80												
 2922 0054 83F31188 		msr basepri, r3											
 2923 0058 BFF36F8F 		isb														
 2924 005c BFF34F8F 		dsb														
 2925              	
 2926              	@ 0 "" 2
 2927              		.thumb
 2928              		.syntax unified
 2929              	.LBE204:
 2930              	.LBE203:
1991:FreeRTOS/queue.c ****         {
 2931              		.loc 1 1991 0
 2932 0060 A36B     		ldr	r3, [r4, #56]
 2933 0062 4BB1     		cbz	r3, .L272
1997:FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2934              		.loc 1 1997 0
 2935 0064 E768     		ldr	r7, [r4, #12]
 2936              	.LVL304:
1998:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2937              		.loc 1 1998 0
 2938 0066 2946     		mov	r1, r5
 2939 0068 2046     		mov	r0, r4
 2940 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 2941              	.LVL305:
1999:FreeRTOS/queue.c **** 
 2942              		.loc 1 1999 0
 2943 006e E760     		str	r7, [r4, #12]
 2944              	.LVL306:
2001:FreeRTOS/queue.c ****         }
 2945              		.loc 1 2001 0
 2946 0070 0120     		movs	r0, #1
 2947              	.LVL307:
 2948              	.L271:
 2949              	.LBB205:
 2950              	.LBB206:
 2951              		.loc 2 234 0
 2952              		.syntax unified
 2953              	@ 234 "FreeRTOS/ARM_CM3/portmacro.h" 1
ARM GAS  /tmp/cc6LrBXE.s 			page 106


 2954 0072 86F31188 			msr basepri, r6	
 2955              	@ 0 "" 2
 2956              	.LVL308:
 2957              		.thumb
 2958              		.syntax unified
 2959              	.LBE206:
 2960              	.LBE205:
2012:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2961              		.loc 1 2012 0
 2962 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2963              	.LVL309:
 2964              	.L272:
2005:FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2965              		.loc 1 2005 0
 2966 0078 0020     		movs	r0, #0
 2967 007a FAE7     		b	.L271
 2968              		.cfi_endproc
 2969              	.LFE17:
 2971              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2972              		.align	1
 2973              		.global	uxQueueMessagesWaiting
 2974              		.syntax unified
 2975              		.thumb
 2976              		.thumb_func
 2977              		.fpu softvfp
 2979              	uxQueueMessagesWaiting:
 2980              	.LFB18:
2016:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 2981              		.loc 1 2016 0
 2982              		.cfi_startproc
 2983              		@ args = 0, pretend = 0, frame = 0
 2984              		@ frame_needed = 0, uses_anonymous_args = 0
 2985              	.LVL310:
2019:FreeRTOS/queue.c **** 
 2986              		.loc 1 2019 0
 2987 0000 40B9     		cbnz	r0, .L276
 2988              	.LBB207:
 2989              	.LBB208:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 2990              		.loc 2 200 0
 2991              		.syntax unified
 2992              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 2993 0002 4FF05003 			mov r3, #80												
 2994 0006 83F31188 		msr basepri, r3											
 2995 000a BFF36F8F 		isb														
 2996 000e BFF34F8F 		dsb														
 2997              	
 2998              	@ 0 "" 2
 2999              	.LVL311:
 3000              		.thumb
 3001              		.syntax unified
 3002              	.L277:
 3003 0012 FEE7     		b	.L277
 3004              	.L276:
 3005              	.LBE208:
 3006              	.LBE207:
2016:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
ARM GAS  /tmp/cc6LrBXE.s 			page 107


 3007              		.loc 1 2016 0
 3008 0014 10B5     		push	{r4, lr}
 3009              	.LCFI37:
 3010              		.cfi_def_cfa_offset 8
 3011              		.cfi_offset 4, -8
 3012              		.cfi_offset 14, -4
 3013 0016 0446     		mov	r4, r0
2021:FreeRTOS/queue.c ****     {
 3014              		.loc 1 2021 0
 3015 0018 FFF7FEFF 		bl	vPortEnterCritical
 3016              	.LVL312:
2023:FreeRTOS/queue.c ****     }
 3017              		.loc 1 2023 0
 3018 001c A46B     		ldr	r4, [r4, #56]
 3019              	.LVL313:
2025:FreeRTOS/queue.c **** 
 3020              		.loc 1 2025 0
 3021 001e FFF7FEFF 		bl	vPortExitCritical
 3022              	.LVL314:
2028:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3023              		.loc 1 2028 0
 3024 0022 2046     		mov	r0, r4
 3025 0024 10BD     		pop	{r4, pc}
 3026              		.cfi_endproc
 3027              	.LFE18:
 3029              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3030              		.align	1
 3031              		.global	uxQueueSpacesAvailable
 3032              		.syntax unified
 3033              		.thumb
 3034              		.thumb_func
 3035              		.fpu softvfp
 3037              	uxQueueSpacesAvailable:
 3038              	.LFB19:
2032:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3039              		.loc 1 2032 0
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 0
 3042              		@ frame_needed = 0, uses_anonymous_args = 0
 3043              	.LVL315:
2036:FreeRTOS/queue.c **** 
 3044              		.loc 1 2036 0
 3045 0000 40B9     		cbnz	r0, .L281
 3046              	.LBB209:
 3047              	.LBB210:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3048              		.loc 2 200 0
 3049              		.syntax unified
 3050              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3051 0002 4FF05003 			mov r3, #80												
 3052 0006 83F31188 		msr basepri, r3											
 3053 000a BFF36F8F 		isb														
 3054 000e BFF34F8F 		dsb														
 3055              	
 3056              	@ 0 "" 2
 3057              	.LVL316:
 3058              		.thumb
ARM GAS  /tmp/cc6LrBXE.s 			page 108


 3059              		.syntax unified
 3060              	.L282:
 3061 0012 FEE7     		b	.L282
 3062              	.L281:
 3063              	.LBE210:
 3064              	.LBE209:
2032:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3065              		.loc 1 2032 0
 3066 0014 10B5     		push	{r4, lr}
 3067              	.LCFI38:
 3068              		.cfi_def_cfa_offset 8
 3069              		.cfi_offset 4, -8
 3070              		.cfi_offset 14, -4
 3071 0016 0446     		mov	r4, r0
2038:FreeRTOS/queue.c ****     {
 3072              		.loc 1 2038 0
 3073 0018 FFF7FEFF 		bl	vPortEnterCritical
 3074              	.LVL317:
2040:FreeRTOS/queue.c ****     }
 3075              		.loc 1 2040 0
 3076 001c E36B     		ldr	r3, [r4, #60]
 3077 001e A46B     		ldr	r4, [r4, #56]
 3078              	.LVL318:
 3079 0020 1C1B     		subs	r4, r3, r4
 3080              	.LVL319:
2042:FreeRTOS/queue.c **** 
 3081              		.loc 1 2042 0
 3082 0022 FFF7FEFF 		bl	vPortExitCritical
 3083              	.LVL320:
2045:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3084              		.loc 1 2045 0
 3085 0026 2046     		mov	r0, r4
 3086 0028 10BD     		pop	{r4, pc}
 3087              		.cfi_endproc
 3088              	.LFE19:
 3090              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3091              		.align	1
 3092              		.global	uxQueueMessagesWaitingFromISR
 3093              		.syntax unified
 3094              		.thumb
 3095              		.thumb_func
 3096              		.fpu softvfp
 3098              	uxQueueMessagesWaitingFromISR:
 3099              	.LFB20:
2049:FreeRTOS/queue.c ****     UBaseType_t uxReturn;
 3100              		.loc 1 2049 0
 3101              		.cfi_startproc
 3102              		@ args = 0, pretend = 0, frame = 0
 3103              		@ frame_needed = 0, uses_anonymous_args = 0
 3104              		@ link register save eliminated.
 3105              	.LVL321:
2053:FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3106              		.loc 1 2053 0
 3107 0000 08B1     		cbz	r0, .L288
2054:FreeRTOS/queue.c **** 
 3108              		.loc 1 2054 0
 3109 0002 806B     		ldr	r0, [r0, #56]
ARM GAS  /tmp/cc6LrBXE.s 			page 109


 3110              	.LVL322:
2057:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3111              		.loc 1 2057 0
 3112 0004 7047     		bx	lr
 3113              	.LVL323:
 3114              	.L288:
 3115              	.LBB211:
 3116              	.LBB212:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3117              		.loc 2 200 0
 3118              		.syntax unified
 3119              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3120 0006 4FF05003 			mov r3, #80												
 3121 000a 83F31188 		msr basepri, r3											
 3122 000e BFF36F8F 		isb														
 3123 0012 BFF34F8F 		dsb														
 3124              	
 3125              	@ 0 "" 2
 3126              	.LVL324:
 3127              		.thumb
 3128              		.syntax unified
 3129              	.L287:
 3130 0016 FEE7     		b	.L287
 3131              	.LBE212:
 3132              	.LBE211:
 3133              		.cfi_endproc
 3134              	.LFE20:
 3136              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3137              		.align	1
 3138              		.global	xQueueIsQueueEmptyFromISR
 3139              		.syntax unified
 3140              		.thumb
 3141              		.thumb_func
 3142              		.fpu softvfp
 3144              	xQueueIsQueueEmptyFromISR:
 3145              	.LFB27:
2406:FreeRTOS/queue.c ****     BaseType_t xReturn;
 3146              		.loc 1 2406 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 3150              		@ link register save eliminated.
 3151              	.LVL325:
2410:FreeRTOS/queue.c **** 
 3152              		.loc 1 2410 0
 3153 0000 18B1     		cbz	r0, .L294
2412:FreeRTOS/queue.c ****     {
 3154              		.loc 1 2412 0
 3155 0002 836B     		ldr	r3, [r0, #56]
 3156 0004 53B9     		cbnz	r3, .L293
2414:FreeRTOS/queue.c ****     }
 3157              		.loc 1 2414 0
 3158 0006 0120     		movs	r0, #1
 3159              	.LVL326:
 3160 0008 7047     		bx	lr
 3161              	.LVL327:
 3162              	.L294:
ARM GAS  /tmp/cc6LrBXE.s 			page 110


 3163              	.LBB213:
 3164              	.LBB214:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3165              		.loc 2 200 0
 3166              		.syntax unified
 3167              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3168 000a 4FF05003 			mov r3, #80												
 3169 000e 83F31188 		msr basepri, r3											
 3170 0012 BFF36F8F 		isb														
 3171 0016 BFF34F8F 		dsb														
 3172              	
 3173              	@ 0 "" 2
 3174              	.LVL328:
 3175              		.thumb
 3176              		.syntax unified
 3177              	.L291:
 3178 001a FEE7     		b	.L291
 3179              	.L293:
 3180              	.LBE214:
 3181              	.LBE213:
2418:FreeRTOS/queue.c ****     }
 3182              		.loc 1 2418 0
 3183 001c 0020     		movs	r0, #0
 3184              	.LVL329:
2422:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3185              		.loc 1 2422 0
 3186 001e 7047     		bx	lr
 3187              		.cfi_endproc
 3188              	.LFE27:
 3190              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3191              		.align	1
 3192              		.global	xQueueIsQueueFullFromISR
 3193              		.syntax unified
 3194              		.thumb
 3195              		.thumb_func
 3196              		.fpu softvfp
 3198              	xQueueIsQueueFullFromISR:
 3199              	.LFB29:
2444:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2445:FreeRTOS/queue.c **** 
2446:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2447:FreeRTOS/queue.c **** {
 3200              		.loc 1 2447 0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204              		@ link register save eliminated.
 3205              	.LVL330:
2448:FreeRTOS/queue.c ****     BaseType_t xReturn;
2449:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
2450:FreeRTOS/queue.c **** 
2451:FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3206              		.loc 1 2451 0
 3207 0000 28B1     		cbz	r0, .L300
2452:FreeRTOS/queue.c **** 
2453:FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3208              		.loc 1 2453 0
ARM GAS  /tmp/cc6LrBXE.s 			page 111


 3209 0002 826B     		ldr	r2, [r0, #56]
 3210 0004 C36B     		ldr	r3, [r0, #60]
 3211 0006 9A42     		cmp	r2, r3
 3212 0008 0AD1     		bne	.L299
2454:FreeRTOS/queue.c ****     {
2455:FreeRTOS/queue.c ****         xReturn = pdTRUE;
 3213              		.loc 1 2455 0
 3214 000a 0120     		movs	r0, #1
 3215              	.LVL331:
 3216 000c 7047     		bx	lr
 3217              	.LVL332:
 3218              	.L300:
 3219              	.LBB215:
 3220              	.LBB216:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3221              		.loc 2 200 0
 3222              		.syntax unified
 3223              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3224 000e 4FF05003 			mov r3, #80												
 3225 0012 83F31188 		msr basepri, r3											
 3226 0016 BFF36F8F 		isb														
 3227 001a BFF34F8F 		dsb														
 3228              	
 3229              	@ 0 "" 2
 3230              	.LVL333:
 3231              		.thumb
 3232              		.syntax unified
 3233              	.L297:
 3234 001e FEE7     		b	.L297
 3235              	.L299:
 3236              	.LBE216:
 3237              	.LBE215:
2456:FreeRTOS/queue.c ****     }
2457:FreeRTOS/queue.c ****     else
2458:FreeRTOS/queue.c ****     {
2459:FreeRTOS/queue.c ****         xReturn = pdFALSE;
 3238              		.loc 1 2459 0
 3239 0020 0020     		movs	r0, #0
 3240              	.LVL334:
2460:FreeRTOS/queue.c ****     }
2461:FreeRTOS/queue.c **** 
2462:FreeRTOS/queue.c ****     return xReturn;
2463:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3241              		.loc 1 2463 0
 3242 0022 7047     		bx	lr
 3243              		.cfi_endproc
 3244              	.LFE29:
 3246              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3247              		.align	1
 3248              		.global	vQueueAddToRegistry
 3249              		.syntax unified
 3250              		.thumb
 3251              		.thumb_func
 3252              		.fpu softvfp
 3254              	vQueueAddToRegistry:
 3255              	.LFB30:
2464:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/cc6LrBXE.s 			page 112


2465:FreeRTOS/queue.c **** 
2466:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2467:FreeRTOS/queue.c **** 
2468:FreeRTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2469:FreeRTOS/queue.c ****                              const void * pvItemToQueue,
2470:FreeRTOS/queue.c ****                              TickType_t xTicksToWait )
2471:FreeRTOS/queue.c ****     {
2472:FreeRTOS/queue.c ****         BaseType_t xReturn;
2473:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2474:FreeRTOS/queue.c **** 
2475:FreeRTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2476:FreeRTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2477:FreeRTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2478:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2479:FreeRTOS/queue.c ****         {
2480:FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2481:FreeRTOS/queue.c ****             {
2482:FreeRTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2483:FreeRTOS/queue.c ****                  * posting? */
2484:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2485:FreeRTOS/queue.c ****                 {
2486:FreeRTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2487:FreeRTOS/queue.c ****                      * return indicating that we need to block. */
2488:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2489:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2490:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2491:FreeRTOS/queue.c ****                 }
2492:FreeRTOS/queue.c ****                 else
2493:FreeRTOS/queue.c ****                 {
2494:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2495:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2496:FreeRTOS/queue.c ****                 }
2497:FreeRTOS/queue.c ****             }
2498:FreeRTOS/queue.c ****         }
2499:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2500:FreeRTOS/queue.c **** 
2501:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2502:FreeRTOS/queue.c ****         {
2503:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2504:FreeRTOS/queue.c ****             {
2505:FreeRTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2506:FreeRTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2507:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2508:FreeRTOS/queue.c **** 
2509:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2510:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2511:FreeRTOS/queue.c ****                 {
2512:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2513:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2514:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2515:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2516:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2517:FreeRTOS/queue.c ****                     {
2518:FreeRTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2519:FreeRTOS/queue.c ****                          * that a yield might be appropriate. */
2520:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2521:FreeRTOS/queue.c ****                     }
ARM GAS  /tmp/cc6LrBXE.s 			page 113


2522:FreeRTOS/queue.c ****                     else
2523:FreeRTOS/queue.c ****                     {
2524:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2525:FreeRTOS/queue.c ****                     }
2526:FreeRTOS/queue.c ****                 }
2527:FreeRTOS/queue.c ****                 else
2528:FreeRTOS/queue.c ****                 {
2529:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2530:FreeRTOS/queue.c ****                 }
2531:FreeRTOS/queue.c ****             }
2532:FreeRTOS/queue.c ****             else
2533:FreeRTOS/queue.c ****             {
2534:FreeRTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2535:FreeRTOS/queue.c ****             }
2536:FreeRTOS/queue.c ****         }
2537:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2538:FreeRTOS/queue.c **** 
2539:FreeRTOS/queue.c ****         return xReturn;
2540:FreeRTOS/queue.c ****     }
2541:FreeRTOS/queue.c **** 
2542:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2543:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2544:FreeRTOS/queue.c **** 
2545:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2546:FreeRTOS/queue.c **** 
2547:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2548:FreeRTOS/queue.c ****                                 void * pvBuffer,
2549:FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
2550:FreeRTOS/queue.c ****     {
2551:FreeRTOS/queue.c ****         BaseType_t xReturn;
2552:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2553:FreeRTOS/queue.c **** 
2554:FreeRTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2555:FreeRTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2556:FreeRTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2557:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2558:FreeRTOS/queue.c ****         {
2559:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2560:FreeRTOS/queue.c ****             {
2561:FreeRTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2562:FreeRTOS/queue.c ****                  * leave with nothing? */
2563:FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2564:FreeRTOS/queue.c ****                 {
2565:FreeRTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2566:FreeRTOS/queue.c ****                      * indicating that we need to block. */
2567:FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2568:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2569:FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2570:FreeRTOS/queue.c ****                 }
2571:FreeRTOS/queue.c ****                 else
2572:FreeRTOS/queue.c ****                 {
2573:FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2574:FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2575:FreeRTOS/queue.c ****                 }
2576:FreeRTOS/queue.c ****             }
2577:FreeRTOS/queue.c ****             else
2578:FreeRTOS/queue.c ****             {
ARM GAS  /tmp/cc6LrBXE.s 			page 114


2579:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2580:FreeRTOS/queue.c ****             }
2581:FreeRTOS/queue.c ****         }
2582:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2583:FreeRTOS/queue.c **** 
2584:FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2585:FreeRTOS/queue.c ****         {
2586:FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2587:FreeRTOS/queue.c ****             {
2588:FreeRTOS/queue.c ****                 /* Data is available from the queue. */
2589:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2590:FreeRTOS/queue.c **** 
2591:FreeRTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2592:FreeRTOS/queue.c ****                 {
2593:FreeRTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2594:FreeRTOS/queue.c ****                 }
2595:FreeRTOS/queue.c ****                 else
2596:FreeRTOS/queue.c ****                 {
2597:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2598:FreeRTOS/queue.c ****                 }
2599:FreeRTOS/queue.c **** 
2600:FreeRTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2601:FreeRTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2602:FreeRTOS/queue.c **** 
2603:FreeRTOS/queue.c ****                 xReturn = pdPASS;
2604:FreeRTOS/queue.c **** 
2605:FreeRTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2606:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2607:FreeRTOS/queue.c ****                 {
2608:FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2609:FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2610:FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2611:FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2612:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2613:FreeRTOS/queue.c ****                     {
2614:FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2615:FreeRTOS/queue.c ****                     }
2616:FreeRTOS/queue.c ****                     else
2617:FreeRTOS/queue.c ****                     {
2618:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2619:FreeRTOS/queue.c ****                     }
2620:FreeRTOS/queue.c ****                 }
2621:FreeRTOS/queue.c ****                 else
2622:FreeRTOS/queue.c ****                 {
2623:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2624:FreeRTOS/queue.c ****                 }
2625:FreeRTOS/queue.c ****             }
2626:FreeRTOS/queue.c ****             else
2627:FreeRTOS/queue.c ****             {
2628:FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2629:FreeRTOS/queue.c ****             }
2630:FreeRTOS/queue.c ****         }
2631:FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2632:FreeRTOS/queue.c **** 
2633:FreeRTOS/queue.c ****         return xReturn;
2634:FreeRTOS/queue.c ****     }
2635:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cc6LrBXE.s 			page 115


2636:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2637:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2638:FreeRTOS/queue.c **** 
2639:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2640:FreeRTOS/queue.c **** 
2641:FreeRTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2642:FreeRTOS/queue.c ****                                     const void * pvItemToQueue,
2643:FreeRTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2644:FreeRTOS/queue.c ****     {
2645:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2646:FreeRTOS/queue.c **** 
2647:FreeRTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2648:FreeRTOS/queue.c ****          * exit without doing anything. */
2649:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2650:FreeRTOS/queue.c ****         {
2651:FreeRTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2652:FreeRTOS/queue.c **** 
2653:FreeRTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2654:FreeRTOS/queue.c ****              * co-routine has not already been woken. */
2655:FreeRTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2656:FreeRTOS/queue.c ****             {
2657:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2658:FreeRTOS/queue.c ****                 {
2659:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2660:FreeRTOS/queue.c ****                     {
2661:FreeRTOS/queue.c ****                         return pdTRUE;
2662:FreeRTOS/queue.c ****                     }
2663:FreeRTOS/queue.c ****                     else
2664:FreeRTOS/queue.c ****                     {
2665:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2666:FreeRTOS/queue.c ****                     }
2667:FreeRTOS/queue.c ****                 }
2668:FreeRTOS/queue.c ****                 else
2669:FreeRTOS/queue.c ****                 {
2670:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2671:FreeRTOS/queue.c ****                 }
2672:FreeRTOS/queue.c ****             }
2673:FreeRTOS/queue.c ****             else
2674:FreeRTOS/queue.c ****             {
2675:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2676:FreeRTOS/queue.c ****             }
2677:FreeRTOS/queue.c ****         }
2678:FreeRTOS/queue.c ****         else
2679:FreeRTOS/queue.c ****         {
2680:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2681:FreeRTOS/queue.c ****         }
2682:FreeRTOS/queue.c **** 
2683:FreeRTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2684:FreeRTOS/queue.c ****     }
2685:FreeRTOS/queue.c **** 
2686:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2687:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2688:FreeRTOS/queue.c **** 
2689:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2690:FreeRTOS/queue.c **** 
2691:FreeRTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2692:FreeRTOS/queue.c ****                                        void * pvBuffer,
ARM GAS  /tmp/cc6LrBXE.s 			page 116


2693:FreeRTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2694:FreeRTOS/queue.c ****     {
2695:FreeRTOS/queue.c ****         BaseType_t xReturn;
2696:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2697:FreeRTOS/queue.c **** 
2698:FreeRTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2699:FreeRTOS/queue.c ****          * not then just leave without doing anything. */
2700:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2701:FreeRTOS/queue.c ****         {
2702:FreeRTOS/queue.c ****             /* Copy the data from the queue. */
2703:FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2704:FreeRTOS/queue.c **** 
2705:FreeRTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2706:FreeRTOS/queue.c ****             {
2707:FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2708:FreeRTOS/queue.c ****             }
2709:FreeRTOS/queue.c ****             else
2710:FreeRTOS/queue.c ****             {
2711:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2712:FreeRTOS/queue.c ****             }
2713:FreeRTOS/queue.c **** 
2714:FreeRTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2715:FreeRTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2716:FreeRTOS/queue.c **** 
2717:FreeRTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2718:FreeRTOS/queue.c ****             {
2719:FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2720:FreeRTOS/queue.c ****                 {
2721:FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2722:FreeRTOS/queue.c ****                     {
2723:FreeRTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2724:FreeRTOS/queue.c ****                     }
2725:FreeRTOS/queue.c ****                     else
2726:FreeRTOS/queue.c ****                     {
2727:FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2728:FreeRTOS/queue.c ****                     }
2729:FreeRTOS/queue.c ****                 }
2730:FreeRTOS/queue.c ****                 else
2731:FreeRTOS/queue.c ****                 {
2732:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2733:FreeRTOS/queue.c ****                 }
2734:FreeRTOS/queue.c ****             }
2735:FreeRTOS/queue.c ****             else
2736:FreeRTOS/queue.c ****             {
2737:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2738:FreeRTOS/queue.c ****             }
2739:FreeRTOS/queue.c **** 
2740:FreeRTOS/queue.c ****             xReturn = pdPASS;
2741:FreeRTOS/queue.c ****         }
2742:FreeRTOS/queue.c ****         else
2743:FreeRTOS/queue.c ****         {
2744:FreeRTOS/queue.c ****             xReturn = pdFAIL;
2745:FreeRTOS/queue.c ****         }
2746:FreeRTOS/queue.c **** 
2747:FreeRTOS/queue.c ****         return xReturn;
2748:FreeRTOS/queue.c ****     }
2749:FreeRTOS/queue.c **** 
ARM GAS  /tmp/cc6LrBXE.s 			page 117


2750:FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2751:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2752:FreeRTOS/queue.c **** 
2753:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2754:FreeRTOS/queue.c **** 
2755:FreeRTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2756:FreeRTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2757:FreeRTOS/queue.c ****     {
 3256              		.loc 1 2757 0
 3257              		.cfi_startproc
 3258              		@ args = 0, pretend = 0, frame = 0
 3259              		@ frame_needed = 0, uses_anonymous_args = 0
 3260              		@ link register save eliminated.
 3261              	.LVL335:
2758:FreeRTOS/queue.c ****         UBaseType_t ux;
2759:FreeRTOS/queue.c **** 
2760:FreeRTOS/queue.c ****         configASSERT( xQueue );
 3262              		.loc 1 2760 0
 3263 0000 20B1     		cbz	r0, .L313
2757:FreeRTOS/queue.c ****         UBaseType_t ux;
 3264              		.loc 1 2757 0
 3265 0002 10B4     		push	{r4}
 3266              	.LCFI39:
 3267              		.cfi_def_cfa_offset 4
 3268              		.cfi_offset 4, -4
 3269 0004 0446     		mov	r4, r0
 3270              	.LVL336:
2761:FreeRTOS/queue.c **** 
2762:FreeRTOS/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
2763:FreeRTOS/queue.c **** 
2764:FreeRTOS/queue.c ****         if( pcQueueName != NULL )
 3271              		.loc 1 2764 0
 3272 0006 31BB     		cbnz	r1, .L310
 3273              	.LVL337:
 3274              	.L301:
2765:FreeRTOS/queue.c ****         {
2766:FreeRTOS/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2767:FreeRTOS/queue.c ****              * a free slot. */
2768:FreeRTOS/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2769:FreeRTOS/queue.c ****             {
2770:FreeRTOS/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2771:FreeRTOS/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
2772:FreeRTOS/queue.c ****                 {
2773:FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
2774:FreeRTOS/queue.c ****                     break;
2775:FreeRTOS/queue.c ****                 }
2776:FreeRTOS/queue.c ****                 /* Otherwise, store in the next empty location */
2777:FreeRTOS/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
2778:FreeRTOS/queue.c ****                 {
2779:FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
2780:FreeRTOS/queue.c ****                 }
2781:FreeRTOS/queue.c ****                 else
2782:FreeRTOS/queue.c ****                 {
2783:FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2784:FreeRTOS/queue.c ****                 }
2785:FreeRTOS/queue.c ****             }
2786:FreeRTOS/queue.c ****         }
ARM GAS  /tmp/cc6LrBXE.s 			page 118


2787:FreeRTOS/queue.c **** 
2788:FreeRTOS/queue.c ****         if( pxEntryToWrite != NULL )
2789:FreeRTOS/queue.c ****         {
2790:FreeRTOS/queue.c ****             /* Store the information on this queue. */
2791:FreeRTOS/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
2792:FreeRTOS/queue.c ****             pxEntryToWrite->xHandle = xQueue;
2793:FreeRTOS/queue.c **** 
2794:FreeRTOS/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2795:FreeRTOS/queue.c ****         }
2796:FreeRTOS/queue.c ****     }
 3275              		.loc 1 2796 0
 3276 0008 10BC     		pop	{r4}
 3277              	.LCFI40:
 3278              		.cfi_restore 4
 3279              		.cfi_def_cfa_offset 0
 3280              	.LVL338:
 3281 000a 7047     		bx	lr
 3282              	.LVL339:
 3283              	.L313:
 3284              	.LBB217:
 3285              	.LBB218:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3286              		.loc 2 200 0
 3287              		.syntax unified
 3288              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3289 000c 4FF05003 			mov r3, #80												
 3290 0010 83F31188 		msr basepri, r3											
 3291 0014 BFF36F8F 		isb														
 3292 0018 BFF34F8F 		dsb														
 3293              	
 3294              	@ 0 "" 2
 3295              	.LVL340:
 3296              		.thumb
 3297              		.syntax unified
 3298              	.L303:
 3299 001c FEE7     		b	.L303
 3300              	.LVL341:
 3301              	.L314:
 3302              	.LCFI41:
 3303              		.cfi_def_cfa_offset 4
 3304              		.cfi_offset 4, -4
 3305              	.LBE218:
 3306              	.LBE217:
2773:FreeRTOS/queue.c ****                     break;
 3307              		.loc 1 2773 0
 3308 001e 0F4B     		ldr	r3, .L315
 3309              	.LVL342:
 3310 0020 03EBC203 		add	r3, r3, r2, lsl #3
 3311              	.LVL343:
 3312              	.L307:
2788:FreeRTOS/queue.c ****         {
 3313              		.loc 1 2788 0
 3314 0024 002B     		cmp	r3, #0
 3315 0026 EFD0     		beq	.L301
2791:FreeRTOS/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 3316              		.loc 1 2791 0
 3317 0028 1960     		str	r1, [r3]
ARM GAS  /tmp/cc6LrBXE.s 			page 119


2792:FreeRTOS/queue.c **** 
 3318              		.loc 1 2792 0
 3319 002a 5C60     		str	r4, [r3, #4]
 3320              		.loc 1 2796 0
 3321 002c ECE7     		b	.L301
 3322              	.L308:
2768:FreeRTOS/queue.c ****             {
 3323              		.loc 1 2768 0 discriminator 2
 3324 002e 0132     		adds	r2, r2, #1
 3325              	.LVL344:
 3326              	.L304:
2768:FreeRTOS/queue.c ****             {
 3327              		.loc 1 2768 0 is_stmt 0 discriminator 1
 3328 0030 072A     		cmp	r2, #7
 3329 0032 F7D8     		bhi	.L307
2771:FreeRTOS/queue.c ****                 {
 3330              		.loc 1 2771 0 is_stmt 1
 3331 0034 0948     		ldr	r0, .L315
 3332 0036 00EBC200 		add	r0, r0, r2, lsl #3
 3333 003a 4068     		ldr	r0, [r0, #4]
 3334 003c A042     		cmp	r0, r4
 3335 003e EED0     		beq	.L314
2777:FreeRTOS/queue.c ****                 {
 3336              		.loc 1 2777 0
 3337 0040 002B     		cmp	r3, #0
 3338 0042 F4D1     		bne	.L308
2777:FreeRTOS/queue.c ****                 {
 3339              		.loc 1 2777 0 is_stmt 0 discriminator 1
 3340 0044 0548     		ldr	r0, .L315
 3341 0046 50F83200 		ldr	r0, [r0, r2, lsl #3]
 3342 004a 0028     		cmp	r0, #0
 3343 004c EFD1     		bne	.L308
2779:FreeRTOS/queue.c ****                 }
 3344              		.loc 1 2779 0 is_stmt 1
 3345 004e 034B     		ldr	r3, .L315
 3346              	.LVL345:
 3347 0050 03EBC203 		add	r3, r3, r2, lsl #3
 3348              	.LVL346:
 3349 0054 EBE7     		b	.L308
 3350              	.LVL347:
 3351              	.L310:
2762:FreeRTOS/queue.c **** 
 3352              		.loc 1 2762 0
 3353 0056 0023     		movs	r3, #0
2768:FreeRTOS/queue.c ****             {
 3354              		.loc 1 2768 0
 3355 0058 1A46     		mov	r2, r3
 3356 005a E9E7     		b	.L304
 3357              	.L316:
 3358              		.align	2
 3359              	.L315:
 3360 005c 00000000 		.word	xQueueRegistry
 3361              		.cfi_endproc
 3362              	.LFE30:
 3364              		.section	.text.pcQueueGetName,"ax",%progbits
 3365              		.align	1
 3366              		.global	pcQueueGetName
ARM GAS  /tmp/cc6LrBXE.s 			page 120


 3367              		.syntax unified
 3368              		.thumb
 3369              		.thumb_func
 3370              		.fpu softvfp
 3372              	pcQueueGetName:
 3373              	.LFB31:
2797:FreeRTOS/queue.c **** 
2798:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2799:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2800:FreeRTOS/queue.c **** 
2801:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2802:FreeRTOS/queue.c **** 
2803:FreeRTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2804:FreeRTOS/queue.c ****     {
 3374              		.loc 1 2804 0
 3375              		.cfi_startproc
 3376              		@ args = 0, pretend = 0, frame = 0
 3377              		@ frame_needed = 0, uses_anonymous_args = 0
 3378              		@ link register save eliminated.
 3379              	.LVL348:
2805:FreeRTOS/queue.c ****         UBaseType_t ux;
2806:FreeRTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
2807:FreeRTOS/queue.c **** 
2808:FreeRTOS/queue.c ****         configASSERT( xQueue );
 3380              		.loc 1 2808 0
 3381 0000 0146     		mov	r1, r0
 3382 0002 50B1     		cbz	r0, .L324
2809:FreeRTOS/queue.c **** 
2810:FreeRTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2811:FreeRTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2812:FreeRTOS/queue.c **** 
2813:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3383              		.loc 1 2813 0
 3384 0004 0023     		movs	r3, #0
 3385              	.L318:
 3386              	.LVL349:
 3387              		.loc 1 2813 0 is_stmt 0 discriminator 1
 3388 0006 072B     		cmp	r3, #7
 3389 0008 14D8     		bhi	.L325
2814:FreeRTOS/queue.c ****         {
2815:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3390              		.loc 1 2815 0 is_stmt 1
 3391 000a 0B4A     		ldr	r2, .L327
 3392 000c 02EBC302 		add	r2, r2, r3, lsl #3
 3393 0010 5268     		ldr	r2, [r2, #4]
 3394 0012 8A42     		cmp	r2, r1
 3395 0014 0AD0     		beq	.L326
2813:FreeRTOS/queue.c ****         {
 3396              		.loc 1 2813 0 discriminator 2
 3397 0016 0133     		adds	r3, r3, #1
 3398              	.LVL350:
 3399 0018 F5E7     		b	.L318
 3400              	.LVL351:
 3401              	.L324:
 3402              	.LBB219:
 3403              	.LBB220:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
ARM GAS  /tmp/cc6LrBXE.s 			page 121


 3404              		.loc 2 200 0
 3405              		.syntax unified
 3406              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3407 001a 4FF05003 			mov r3, #80												
 3408 001e 83F31188 		msr basepri, r3											
 3409 0022 BFF36F8F 		isb														
 3410 0026 BFF34F8F 		dsb														
 3411              	
 3412              	@ 0 "" 2
 3413              	.LVL352:
 3414              		.thumb
 3415              		.syntax unified
 3416              	.L319:
 3417 002a FEE7     		b	.L319
 3418              	.LVL353:
 3419              	.L326:
 3420              	.LBE220:
 3421              	.LBE219:
2816:FreeRTOS/queue.c ****             {
2817:FreeRTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3422              		.loc 1 2817 0
 3423 002c 024A     		ldr	r2, .L327
 3424 002e 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3425              	.LVL354:
2818:FreeRTOS/queue.c ****                 break;
 3426              		.loc 1 2818 0
 3427 0032 7047     		bx	lr
 3428              	.LVL355:
 3429              	.L325:
2806:FreeRTOS/queue.c **** 
 3430              		.loc 1 2806 0
 3431 0034 0020     		movs	r0, #0
 3432              	.LVL356:
2819:FreeRTOS/queue.c ****             }
2820:FreeRTOS/queue.c ****             else
2821:FreeRTOS/queue.c ****             {
2822:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2823:FreeRTOS/queue.c ****             }
2824:FreeRTOS/queue.c ****         }
2825:FreeRTOS/queue.c **** 
2826:FreeRTOS/queue.c ****         return pcReturn;
2827:FreeRTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3433              		.loc 1 2827 0
 3434 0036 7047     		bx	lr
 3435              	.L328:
 3436              		.align	2
 3437              	.L327:
 3438 0038 00000000 		.word	xQueueRegistry
 3439              		.cfi_endproc
 3440              	.LFE31:
 3442              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3443              		.align	1
 3444              		.global	vQueueUnregisterQueue
 3445              		.syntax unified
 3446              		.thumb
 3447              		.thumb_func
 3448              		.fpu softvfp
ARM GAS  /tmp/cc6LrBXE.s 			page 122


 3450              	vQueueUnregisterQueue:
 3451              	.LFB32:
2828:FreeRTOS/queue.c **** 
2829:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2830:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2831:FreeRTOS/queue.c **** 
2832:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2833:FreeRTOS/queue.c **** 
2834:FreeRTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2835:FreeRTOS/queue.c ****     {
 3452              		.loc 1 2835 0
 3453              		.cfi_startproc
 3454              		@ args = 0, pretend = 0, frame = 0
 3455              		@ frame_needed = 0, uses_anonymous_args = 0
 3456              		@ link register save eliminated.
 3457              	.LVL357:
2836:FreeRTOS/queue.c ****         UBaseType_t ux;
2837:FreeRTOS/queue.c **** 
2838:FreeRTOS/queue.c ****         configASSERT( xQueue );
 3458              		.loc 1 2838 0
 3459 0000 0146     		mov	r1, r0
 3460 0002 50B1     		cbz	r0, .L336
2839:FreeRTOS/queue.c **** 
2840:FreeRTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2841:FreeRTOS/queue.c ****          * registry. */
2842:FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3461              		.loc 1 2842 0
 3462 0004 0023     		movs	r3, #0
 3463              	.L330:
 3464              	.LVL358:
 3465              		.loc 1 2842 0 is_stmt 0 discriminator 1
 3466 0006 072B     		cmp	r3, #7
 3467 0008 18D8     		bhi	.L337
2843:FreeRTOS/queue.c ****         {
2844:FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3468              		.loc 1 2844 0 is_stmt 1
 3469 000a 0D4A     		ldr	r2, .L339
 3470 000c 02EBC302 		add	r2, r2, r3, lsl #3
 3471 0010 5268     		ldr	r2, [r2, #4]
 3472 0012 8A42     		cmp	r2, r1
 3473 0014 0AD0     		beq	.L338
2842:FreeRTOS/queue.c ****         {
 3474              		.loc 1 2842 0 discriminator 2
 3475 0016 0133     		adds	r3, r3, #1
 3476              	.LVL359:
 3477 0018 F5E7     		b	.L330
 3478              	.LVL360:
 3479              	.L336:
 3480              	.LBB221:
 3481              	.LBB222:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3482              		.loc 2 200 0
 3483              		.syntax unified
 3484              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3485 001a 4FF05003 			mov r3, #80												
 3486 001e 83F31188 		msr basepri, r3											
 3487 0022 BFF36F8F 		isb														
ARM GAS  /tmp/cc6LrBXE.s 			page 123


 3488 0026 BFF34F8F 		dsb														
 3489              	
 3490              	@ 0 "" 2
 3491              	.LVL361:
 3492              		.thumb
 3493              		.syntax unified
 3494              	.L331:
 3495 002a FEE7     		b	.L331
 3496              	.LVL362:
 3497              	.L338:
 3498              	.LBE222:
 3499              	.LBE221:
2845:FreeRTOS/queue.c ****             {
2846:FreeRTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2847:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 3500              		.loc 1 2847 0
 3501 002c 044A     		ldr	r2, .L339
 3502 002e 0021     		movs	r1, #0
 3503 0030 42F83310 		str	r1, [r2, r3, lsl #3]
2848:FreeRTOS/queue.c **** 
2849:FreeRTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2850:FreeRTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2851:FreeRTOS/queue.c ****                  * added again. */
2852:FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3504              		.loc 1 2852 0
 3505 0034 02EBC303 		add	r3, r2, r3, lsl #3
 3506              	.LVL363:
 3507 0038 5960     		str	r1, [r3, #4]
2853:FreeRTOS/queue.c ****                 break;
 3508              		.loc 1 2853 0
 3509 003a 7047     		bx	lr
 3510              	.LVL364:
 3511              	.L337:
2854:FreeRTOS/queue.c ****             }
2855:FreeRTOS/queue.c ****             else
2856:FreeRTOS/queue.c ****             {
2857:FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2858:FreeRTOS/queue.c ****             }
2859:FreeRTOS/queue.c ****         }
2860:FreeRTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3512              		.loc 1 2860 0
 3513 003c 7047     		bx	lr
 3514              	.L340:
 3515 003e 00BF     		.align	2
 3516              	.L339:
 3517 0040 00000000 		.word	xQueueRegistry
 3518              		.cfi_endproc
 3519              	.LFE32:
 3521              		.section	.text.vQueueDelete,"ax",%progbits
 3522              		.align	1
 3523              		.global	vQueueDelete
 3524              		.syntax unified
 3525              		.thumb
 3526              		.thumb_func
 3527              		.fpu softvfp
 3529              	vQueueDelete:
 3530              	.LFB21:
ARM GAS  /tmp/cc6LrBXE.s 			page 124


2061:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3531              		.loc 1 2061 0
 3532              		.cfi_startproc
 3533              		@ args = 0, pretend = 0, frame = 0
 3534              		@ frame_needed = 0, uses_anonymous_args = 0
 3535              	.LVL365:
2064:FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
 3536              		.loc 1 2064 0
 3537 0000 40B9     		cbnz	r0, .L342
 3538              	.LBB223:
 3539              	.LBB224:
 200:FreeRTOS/ARM_CM3/portmacro.h ****         (
 3540              		.loc 2 200 0
 3541              		.syntax unified
 3542              	@ 200 "FreeRTOS/ARM_CM3/portmacro.h" 1
 3543 0002 4FF05003 			mov r3, #80												
 3544 0006 83F31188 		msr basepri, r3											
 3545 000a BFF36F8F 		isb														
 3546 000e BFF34F8F 		dsb														
 3547              	
 3548              	@ 0 "" 2
 3549              	.LVL366:
 3550              		.thumb
 3551              		.syntax unified
 3552              	.L343:
 3553 0012 FEE7     		b	.L343
 3554              	.L342:
 3555              	.LBE224:
 3556              	.LBE223:
2061:FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3557              		.loc 1 2061 0
 3558 0014 10B5     		push	{r4, lr}
 3559              	.LCFI42:
 3560              		.cfi_def_cfa_offset 8
 3561              		.cfi_offset 4, -8
 3562              		.cfi_offset 14, -4
 3563 0016 0446     		mov	r4, r0
2069:FreeRTOS/queue.c ****         }
 3564              		.loc 1 2069 0
 3565 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3566              	.LVL367:
2077:FreeRTOS/queue.c ****         }
 3567              		.loc 1 2077 0
 3568 001c 2046     		mov	r0, r4
 3569 001e FFF7FEFF 		bl	vPortFree
 3570              	.LVL368:
2099:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3571              		.loc 1 2099 0
 3572 0022 10BD     		pop	{r4, pc}
 3573              		.cfi_endproc
 3574              	.LFE21:
 3576              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3577              		.align	1
 3578              		.global	vQueueWaitForMessageRestricted
 3579              		.syntax unified
 3580              		.thumb
 3581              		.thumb_func
ARM GAS  /tmp/cc6LrBXE.s 			page 125


 3582              		.fpu softvfp
 3584              	vQueueWaitForMessageRestricted:
 3585              	.LFB33:
2861:FreeRTOS/queue.c **** 
2862:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2863:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2864:FreeRTOS/queue.c **** 
2865:FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2866:FreeRTOS/queue.c **** 
2867:FreeRTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2868:FreeRTOS/queue.c ****                                          TickType_t xTicksToWait,
2869:FreeRTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2870:FreeRTOS/queue.c ****     {
 3586              		.loc 1 2870 0
 3587              		.cfi_startproc
 3588              		@ args = 0, pretend = 0, frame = 0
 3589              		@ frame_needed = 0, uses_anonymous_args = 0
 3590              	.LVL369:
 3591 0000 70B5     		push	{r4, r5, r6, lr}
 3592              	.LCFI43:
 3593              		.cfi_def_cfa_offset 16
 3594              		.cfi_offset 4, -16
 3595              		.cfi_offset 5, -12
 3596              		.cfi_offset 6, -8
 3597              		.cfi_offset 14, -4
 3598 0002 0446     		mov	r4, r0
 3599 0004 0D46     		mov	r5, r1
 3600 0006 1646     		mov	r6, r2
 3601              	.LVL370:
2871:FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2872:FreeRTOS/queue.c **** 
2873:FreeRTOS/queue.c ****         /* This function should not be called by application code hence the
2874:FreeRTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2875:FreeRTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2876:FreeRTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2877:FreeRTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2878:FreeRTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2879:FreeRTOS/queue.c ****          * section. */
2880:FreeRTOS/queue.c **** 
2881:FreeRTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2882:FreeRTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2883:FreeRTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2884:FreeRTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2885:FreeRTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2886:FreeRTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2887:FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 3602              		.loc 1 2887 0
 3603 0008 FFF7FEFF 		bl	vPortEnterCritical
 3604              	.LVL371:
 3605 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3606 0010 5BB2     		sxtb	r3, r3
 3607 0012 B3F1FF3F 		cmp	r3, #-1
 3608 0016 0DD0     		beq	.L351
 3609              	.L347:
 3610              		.loc 1 2887 0 is_stmt 0 discriminator 3
 3611 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3612 001c 5BB2     		sxtb	r3, r3
ARM GAS  /tmp/cc6LrBXE.s 			page 126


 3613 001e B3F1FF3F 		cmp	r3, #-1
 3614 0022 0BD0     		beq	.L352
 3615              	.L348:
 3616              		.loc 1 2887 0 discriminator 6
 3617 0024 FFF7FEFF 		bl	vPortExitCritical
 3618              	.LVL372:
2888:FreeRTOS/queue.c **** 
2889:FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3619              		.loc 1 2889 0 is_stmt 1 discriminator 6
 3620 0028 A36B     		ldr	r3, [r4, #56]
 3621 002a 5BB1     		cbz	r3, .L353
 3622              	.L349:
2890:FreeRTOS/queue.c ****         {
2891:FreeRTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2892:FreeRTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
2893:FreeRTOS/queue.c ****         }
2894:FreeRTOS/queue.c ****         else
2895:FreeRTOS/queue.c ****         {
2896:FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2897:FreeRTOS/queue.c ****         }
2898:FreeRTOS/queue.c **** 
2899:FreeRTOS/queue.c ****         prvUnlockQueue( pxQueue );
 3623              		.loc 1 2899 0
 3624 002c 2046     		mov	r0, r4
 3625 002e FFF7FEFF 		bl	prvUnlockQueue
 3626              	.LVL373:
2900:FreeRTOS/queue.c ****     }
 3627              		.loc 1 2900 0
 3628 0032 70BD     		pop	{r4, r5, r6, pc}
 3629              	.LVL374:
 3630              	.L351:
2887:FreeRTOS/queue.c **** 
 3631              		.loc 1 2887 0 discriminator 1
 3632 0034 0023     		movs	r3, #0
 3633 0036 84F84430 		strb	r3, [r4, #68]
 3634 003a EDE7     		b	.L347
 3635              	.L352:
2887:FreeRTOS/queue.c **** 
 3636              		.loc 1 2887 0 is_stmt 0 discriminator 4
 3637 003c 0023     		movs	r3, #0
 3638 003e 84F84530 		strb	r3, [r4, #69]
 3639 0042 EFE7     		b	.L348
 3640              	.L353:
2892:FreeRTOS/queue.c ****         }
 3641              		.loc 1 2892 0 is_stmt 1
 3642 0044 3246     		mov	r2, r6
 3643 0046 2946     		mov	r1, r5
 3644 0048 04F12400 		add	r0, r4, #36
 3645 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3646              	.LVL375:
 3647 0050 ECE7     		b	.L349
 3648              		.cfi_endproc
 3649              	.LFE33:
 3651              		.comm	xQueueRegistry,64,4
 3652              		.text
 3653              	.Letext0:
 3654              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
ARM GAS  /tmp/cc6LrBXE.s 			page 127


 3655              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3656              		.file 5 "/usr/include/newlib/sys/lock.h"
 3657              		.file 6 "/usr/include/newlib/sys/_types.h"
 3658              		.file 7 "/usr/include/newlib/sys/reent.h"
 3659              		.file 8 "/usr/include/newlib/stdlib.h"
 3660              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 3661              		.file 10 "FreeRTOS/ARM_CM3/FreeRTOSConfig.h"
 3662              		.file 11 "FreeRTOS/include/list.h"
 3663              		.file 12 "FreeRTOS/include/task.h"
 3664              		.file 13 "FreeRTOS/include/queue.h"
 3665              		.file 14 "FreeRTOS/include/portable.h"
 3666              		.file 15 "<built-in>"
ARM GAS  /tmp/cc6LrBXE.s 			page 128


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/cc6LrBXE.s:16     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
     /tmp/cc6LrBXE.s:22     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
     /tmp/cc6LrBXE.s:52     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/cc6LrBXE.s:58     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/cc6LrBXE.s:99     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/cc6LrBXE.s:105    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/cc6LrBXE.s:144    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/cc6LrBXE.s:150    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/cc6LrBXE.s:269    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/cc6LrBXE.s:275    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/cc6LrBXE.s:324    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/cc6LrBXE.s:330    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/cc6LrBXE.s:436    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/cc6LrBXE.s:443    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/cc6LrBXE.s:586    .text.xQueueGenericReset:00000000000000a4 $d
     /tmp/cc6LrBXE.s:591    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/cc6LrBXE.s:597    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/cc6LrBXE.s:639    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/cc6LrBXE.s:646    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/cc6LrBXE.s:744    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/cc6LrBXE.s:751    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/cc6LrBXE.s:1075   .text.xQueueGenericSend:0000000000000178 $d
     /tmp/cc6LrBXE.s:1080   .text.prvInitialiseMutex:0000000000000000 $t
     /tmp/cc6LrBXE.s:1086   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
     /tmp/cc6LrBXE.s:1126   .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/cc6LrBXE.s:1133   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/cc6LrBXE.s:1165   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:1172   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/cc6LrBXE.s:1392   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:1399   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/cc6LrBXE.s:1630   .text.xQueueReceive:0000000000000000 $t
     /tmp/cc6LrBXE.s:1637   .text.xQueueReceive:0000000000000000 xQueueReceive
     /tmp/cc6LrBXE.s:1934   .text.xQueueReceive:0000000000000154 $d
     /tmp/cc6LrBXE.s:1939   .text.xQueueSemaphoreTake:0000000000000000 $t
     /tmp/cc6LrBXE.s:1946   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
     /tmp/cc6LrBXE.s:2305   .text.xQueueSemaphoreTake:0000000000000198 $d
     /tmp/cc6LrBXE.s:2310   .text.xQueuePeek:0000000000000000 $t
     /tmp/cc6LrBXE.s:2317   .text.xQueuePeek:0000000000000000 xQueuePeek
     /tmp/cc6LrBXE.s:2615   .text.xQueuePeek:0000000000000154 $d
     /tmp/cc6LrBXE.s:2620   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:2627   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/cc6LrBXE.s:2820   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:2827   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/cc6LrBXE.s:2972   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/cc6LrBXE.s:2979   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/cc6LrBXE.s:3030   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/cc6LrBXE.s:3037   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/cc6LrBXE.s:3091   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:3098   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/cc6LrBXE.s:3137   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:3144   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/cc6LrBXE.s:3191   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/cc6LrBXE.s:3198   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/cc6LrBXE.s:3247   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/cc6LrBXE.s:3254   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
ARM GAS  /tmp/cc6LrBXE.s 			page 129


     /tmp/cc6LrBXE.s:3360   .text.vQueueAddToRegistry:000000000000005c $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/cc6LrBXE.s:3365   .text.pcQueueGetName:0000000000000000 $t
     /tmp/cc6LrBXE.s:3372   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/cc6LrBXE.s:3438   .text.pcQueueGetName:0000000000000038 $d
     /tmp/cc6LrBXE.s:3443   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/cc6LrBXE.s:3450   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/cc6LrBXE.s:3517   .text.vQueueUnregisterQueue:0000000000000040 $d
     /tmp/cc6LrBXE.s:3522   .text.vQueueDelete:0000000000000000 $t
     /tmp/cc6LrBXE.s:3529   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/cc6LrBXE.s:3577   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
     /tmp/cc6LrBXE.s:3584   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
